import{_ as p,M as o,p as c,q as i,R as n,t as a,N as e,a1 as t}from"./framework-96b046e1.js";const l="/assets/6a33797917e34056b95238471ff0c06b-4f77e133.gif",u={},r=t(`<h2 id="场景" tabindex="-1"><a class="header-anchor" href="#场景" aria-hidden="true">#</a> 场景</h2><p>由于生产应用希望在有新版本时，自动为用户推送更新，所以此处便写一下如何让 electron 程序自动更新。</p><h2 id="安装-npm-包" tabindex="-1"><a class="header-anchor" href="#安装-npm-包" aria-hidden="true">#</a> 安装 npm 包</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> apps/main/ <span class="token operator">&amp;&amp;</span> <span class="token function">yarn</span> <span class="token function">add</span> electron-updater
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="配置-electron-builder" tabindex="-1"><a class="header-anchor" href="#配置-electron-builder" aria-hidden="true">#</a> 配置 electron-builder</h2>`,5),d={href:"https://www.electron.build/auto-update",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>其实本质上就是配置一个网络可以访问到的静态资源目录，这里使用了一个本地的静态资源服务器，指向目录是 <em>apps/main/release</em>（即打包而进程程序的目录）</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;publish&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;provider&quot;</span><span class="token operator">:</span> <span class="token string">&quot;generic&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:8080/&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="启动时检查更新" tabindex="-1"><a class="header-anchor" href="#启动时检查更新" aria-hidden="true">#</a> 启动时检查更新</h2><p>在主进程添加检查更新的代码，并自定义提示文案。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">await</span> autoUpdater<span class="token punctuation">.</span><span class="token function">checkForUpdates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
autoUpdater<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">&#39;update-downloaded&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    title<span class="token operator">:</span> <span class="token string">&#39;更新提醒&#39;</span><span class="token punctuation">,</span>
    body<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">新版本 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>info<span class="token punctuation">.</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 已经准备好，点击立刻更新！</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      autoUpdater<span class="token punctuation">.</span><span class="token function">quitAndInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果" tabindex="-1"><a class="header-anchor" href="#效果" aria-hidden="true">#</a> 效果</h2>`,6),v=n("em",null,"apps/main/release",-1),m={href:"https://www.npmjs.com/package/live-server",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,[n("img",{src:l,alt:"效果"})],-1);function b(f,g){const s=o("ExternalLinkIcon");return c(),i("div",null,[r,n("blockquote",null,[n("p",null,[a("参考: "),n("a",d,[a("https://www.electron.build/auto-update"),e(s)])])]),k,n("p",null,[a("现在，你可以启动一个本地静态服务器指向 "),v,a("，例如 "),n("a",m,[a("live-server"),e(s)]),a("，然后打包一个新版本，再启动旧的程序就可以了。")]),h])}const q=p(u,[["render",b],["__file","bf7621c04d9f45098fb0ecf2acad336e.html.vue"]]);export{q as default};
