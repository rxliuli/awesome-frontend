import{_ as i,M as o,p as l,q as d,R as n,t as a,N as e,a1 as t}from"./framework-96b046e1.js";const c={},r=n("p",null,"记录一些最常用的命令（从上往下使用频率依次降低），当然，这里只是吾辈个人的，其他功能可能暂时还没用到呢",-1),p={href:"https://git-scm.com/book/zh",target:"_blank",rel:"noopener noreferrer"},u=t(`<h2 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令" aria-hidden="true">#</a> 基本命令</h2><table><thead><tr><th>关键词</th><th>命令格式</th><th>命令解释</th><th>命令示例</th></tr></thead><tbody><tr><td>init</td><td><code>git init</code></td><td>为当前目录初始化 git 本地仓库</td><td></td></tr><tr><td>add</td><td><code>git add [要追踪的文件/路径]</code></td><td>添加到 git 跟踪</td><td><code>git add -A</code></td></tr><tr><td>commit</td><td><code>git commit [路径] [选项] [提交说明]</code></td><td>提交当前的修改内容</td><td><code>git commit -a -m &quot;提交全部的修改&quot;</code></td></tr><tr><td>remote</td><td><code>git remote [选项] [远程仓库名]</code></td><td>操作 git 远程仓库</td><td><code>git remote</code></td></tr><tr><td></td><td></td><td></td><td><code>git remote add origin https://github.com/rxliuli/rxliuli.github.io.git</code></td></tr><tr><td></td><td></td><td></td><td><code>git remote show origin</code></td></tr><tr><td></td><td></td><td></td><td><code>git remote remove origin</code></td></tr><tr><td>push</td><td><code>git push [远程别名] [远程分支]</code></td><td>推送本地修改到远程</td><td><code>git push origin master</code></td></tr><tr><td>pull</td><td><code>git pull [远程别名] [远程分支]</code></td><td>拉取远程修改到本地</td><td><code>git pull origin master</code></td></tr><tr><td>status</td><td><code>git status</code></td><td>查看本地仓库的状态，以此得知添加和修改的文件</td><td></td></tr><tr><td>clone</td><td><code>git clone [远程仓库地址]</code></td><td>克隆一个远程仓库到本地，这里和 pull 不同点在于本地不存在要克隆的仓库</td><td><code>git clone https://github.com/rxliuli/rxliuli.github.io.git</code></td></tr><tr><td>log</td><td><code>git log [选项]</code></td><td>查看 git 日志</td><td><code>git log</code></td></tr><tr><td>revert</td><td><code>git revert [提交记录 hash]</code></td><td>撤销掉指定提交</td><td><code>git revert ab1c2d2</code></td></tr><tr><td>reset</td><td><code>git reset [提交记录 hash]</code></td><td>重置到某次提交上，和上面不一样的是不会添加新的提交记录，而是删除已有的提交记录</td><td><code>git reset ab1c2d2</code></td></tr><tr><td></td><td><code>git reset HEAD~[N 回退次数]</code></td><td>回退最近几次的提交, N 为几就回退几次</td><td><code>git reset HEAD~1</code></td></tr><tr><td>branch</td><td><code>git branch [分支]</code></td><td>git 分支(强大而又复杂的功能)</td><td><code>git branch dev</code></td></tr><tr><td></td><td></td><td></td><td><code>git branch</code></td></tr><tr><td></td><td></td><td></td><td><code>git branch dev -D</code></td></tr><tr><td>checkout</td><td><code>git checkout [分支名]</code></td><td>切换当前分支(分支之间不共享修改)</td><td><code>git checkout master</code></td></tr><tr><td></td><td></td><td></td><td><code>git checkout origin/dev -b dev</code></td></tr><tr><td>merge</td><td><code>git merge [选项]</code></td><td>合并其他分支的修改到当前分支上</td><td><code>git merge dev</code></td></tr><tr><td></td><td></td><td></td><td><code>git merge origin/master --allow-unrelated-histories</code></td></tr><tr><td>push</td><td><code>git push [远程仓库名] :[分支名]</code></td><td>删除掉指定的远程分支（仓库还在，只是删除分支）</td><td><code>git push origin :dev</code></td></tr><tr><td>stash</td><td><code>git stash</code></td><td>暂存本地更改</td><td></td></tr><tr><td></td><td><code>git stash list</code></td><td>查看所有暂存更改</td><td></td></tr><tr><td></td><td><code>git stash apply [index]</code></td><td>重新应用指定暂存更改</td><td><code>git stash apply</code></td></tr><tr><td></td><td><code>git stash drop [index]</code></td><td>删除掉指定的暂存更改</td><td><code>git stash drop</code></td></tr></tbody></table><h2 id="复合命令" tabindex="-1"><a class="header-anchor" href="#复合命令" aria-hidden="true">#</a> 复合命令</h2><h3 id="撤销掉本地所有的修改" tabindex="-1"><a class="header-anchor" href="#撤销掉本地所有的修改" aria-hidden="true">#</a> 撤销掉本地所有的修改</h3><p>命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> stash <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> stash drop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释</p><ol><li>添加所有更改到 git 追踪中（如果没有被忽略的话）</li><li>添加所有本地更改到暂存区域中</li><li>删除掉刚添加的最新暂存更改</li></ol><p>应用场景修改了一些文件但又没有提交，突然发现有问题，想把它们全删除了重来，或者全部回到上次提交，先把这些修改暂存起来（不加最后一条命令）</p><h3 id="区分文件名大小写" tabindex="-1"><a class="header-anchor" href="#区分文件名大小写" aria-hidden="true">#</a> 区分文件名大小写</h3><p>命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config core.ignorecase <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释 Windows 下默认不区分文件名大小写，所以需要特别设置一下。</p><h3 id="git-push-强制推送" tabindex="-1"><a class="header-anchor" href="#git-push-强制推送" aria-hidden="true">#</a> git push 强制推送</h3><p>命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释</p><p>强制推送到远程分支，即便是远程包含本地不存在的提交</p><h3 id="忽略已经跟踪的文件的提交" tabindex="-1"><a class="header-anchor" href="#忽略已经跟踪的文件的提交" aria-hidden="true">#</a> 忽略已经跟踪的文件的提交</h3>`,19),h={href:"https://ruby-china.org/topics/17948",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>忽略修改</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> update-index --assume-unchanged <span class="token operator">&lt;</span>files<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>取消这种设定</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> update-index --no-assume-unchanged <span class="token operator">&lt;</span>files<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="从远端拉取分支" tabindex="-1"><a class="header-anchor" href="#从远端拉取分支" aria-hidden="true">#</a> 从远端拉取分支</h3>`,5),m={href:"https://www.cnblogs.com/phpper/p/7136048.html",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>本地分支名<span class="token punctuation">(</span>不存在<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>远程分支名<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev origin/dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="忽略已提交的文件修改" tabindex="-1"><a class="header-anchor" href="#忽略已提交的文件修改" aria-hidden="true">#</a> 忽略已提交的文件修改</h3>`,5),b={href:"https://www.jianshu.com/p/e5b13480479b",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>主要用于忽略一些本地修改的文件但又不希望提交，同时也不希望添加到 .gitignore 中将之从云端排除的方式。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> update-index --assume-unchanged <span class="token punctuation">[</span>file-pattern<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="git-删除远程-tag" tabindex="-1"><a class="header-anchor" href="#git-删除远程-tag" aria-hidden="true">#</a> git 删除远程 tag</h3><p>显示本地 tag</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除本地 tag</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag <span class="token parameter variable">-d</span> Remote_Systems_Operation
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用 push, 删除远程 tag</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin :refs/tags/Remote_Systems_Operation
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除远程分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-r</span> <span class="token parameter variable">-d</span> origin/branch-name
<span class="token function">git</span> push origin :branch-name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="两个-git-仓库合并" tabindex="-1"><a class="header-anchor" href="#两个-git-仓库合并" aria-hidden="true">#</a> 两个 git 仓库合并</h3>`,12),f={href:"https://github.com/kktjs/kkt.git",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/kktjs/kkt-next.git",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"kkt-next",-1),y=n("code",null,"kkt",-1),w=n("code",null,"kkt-next",-1),q=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1. 克隆主仓库代码</span>
<span class="token function">git</span> clone git@github.com:kktjs/kkt.git

<span class="token comment"># 2. 将 kkt-next 作为远程仓库，添加到 kkt 中，设置别名为 other</span>
<span class="token function">git</span> remote <span class="token function">add</span> other git@github.com:kktjs/kkt-next.git

<span class="token comment"># 3. 从 kkt-next 仓库中拉取数据到本仓库</span>
<span class="token function">git</span> fetch other

<span class="token comment"># 4. 将 kkt-next 仓库拉取的 master 分支作为新分支 checkout 到本地，新分支名设定为 dev</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev other/master

<span class="token comment"># 5. 切换回 kkt 的 master 分支</span>
<span class="token function">git</span> checkout master

<span class="token comment"># 6. 将 dev 合并入 kkt 的 master 分支</span>
<span class="token function">git</span> merge dev

<span class="token comment"># 如果第 6 步报错 \`fatal: refusing to merge unrelated histories\`</span>
<span class="token comment"># 请执行下面命令 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span>
<span class="token function">git</span> merge dev --allow-unrelated-histories
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>JetBrains IDE 提供了非常好用的冲突合并工具</p></blockquote><p>在合并时有可能两个分支对同一个文件都做了修改，这时需要解决冲突，对文本文件来说很简单，根据需要对冲突的位置进行处理就可以。对于二进制文件，需要用到如下命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">--theirs</span> YOUR_BINARY_FILES     <span class="token comment"># 保留需要合并进来的分支的修改</span>
<span class="token function">git</span> checkout <span class="token parameter variable">--ours</span> YOUR_BINARY_FILES       <span class="token comment"># 保留自己的修改</span>
<span class="token function">git</span> <span class="token function">add</span> YOUR_BINARY_FILES
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),E={href:"https://segmentfault.com/a/1190000021919753",target:"_blank",rel:"noopener noreferrer"},A=n("h3",{id:"在-git-目录中忽略-git-子模块的所有变更",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#在-git-目录中忽略-git-子模块的所有变更","aria-hidden":"true"},"#"),a(" 在 git 目录中忽略 git 子模块的所有变更")],-1),B={href:"https://git-scm.com/docs/gitmodules#Documentation/gitmodules.txt-submoduleltnamegtignore",target:"_blank",rel:"noopener noreferrer"},S=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># .gitmodules</span>
<span class="token punctuation">[</span>submodule <span class="token string">&quot;examples/blog-hexo-example/themes/next&quot;</span><span class="token punctuation">]</span>
  path <span class="token operator">=</span> examples/blog-hexo-example/themes/next
  url <span class="token operator">=</span> https://github.com/theme-next/hexo-theme-next
  ignore <span class="token operator">=</span> all
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-提交时忽略-hooks" tabindex="-1"><a class="header-anchor" href="#git-提交时忽略-hooks" aria-hidden="true">#</a> git 提交时忽略 hooks</h3><p>添加 <code>--no-verify</code> 参数即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit --no-verify
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="git-错误-reset-恢复" tabindex="-1"><a class="header-anchor" href="#git-错误-reset-恢复" aria-hidden="true">#</a> Git 错误 Reset 恢复</h3><ol><li><p>找到使用 <code>git reset</code> 之前的最后一次提交的 <code>commit id</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看 git 记录的所有操作，包括回退操作也会记录</span>
<span class="token function">git</span> reflog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 <code>git reset --hard</code> 回退</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 回退到指定提交，但不会将之后提交混入到未提交的内容</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> dd256c7d66ad2e9671cbd47650ffddc4267ca7d5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 <code>git log</code> 检查最后一次提交是否恢复</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 这时可以看到最后一次提交已经恢复了</span>
<span class="token function">git</span> log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,6),I={href:"https://segmentfault.com/q/1010000000167491",target:"_blank",rel:"noopener noreferrer"},G=n("h3",{id:"git-高级合并",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#git-高级合并","aria-hidden":"true"},"#"),a(" Git 高级合并")],-1),j=n("p",null,[a("前端想要调整项目组织将之前的项目放到 "),n("code",null,"monorepo"),a(" 中，所以需要使用 git 将之前的项目合并到新项目的指定目录中，同时保留所有记录。")],-1),R={href:"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%AB%98%E7%BA%A7%E5%90%88%E5%B9%B6#_subtree_merge",target:"_blank",rel:"noopener noreferrer"},N={href:"https://www.educative.io/edpresso/the-fatal-refusing-to-merge-unrelated-histories-git-error",target:"_blank",rel:"noopener noreferrer"},D=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> rack_remote https://github.com/rack/rack
<span class="token function">git</span> fetch rack_remote --no-tags
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> rack_branch rack_remote/master
<span class="token function">git</span> checkout master
<span class="token function">git</span> read-tree <span class="token parameter variable">--prefix</span><span class="token operator">=</span>rack/ <span class="token parameter variable">-u</span> rack_branch
<span class="token function">git</span> merge <span class="token parameter variable">--squash</span> <span class="token parameter variable">-s</span> recursive <span class="token parameter variable">-Xsubtree</span><span class="token operator">=</span>rack rack_branch --allow-unrelated-histories
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="系统更新后-git-错误" tabindex="-1"><a class="header-anchor" href="#系统更新后-git-错误" aria-hidden="true">#</a> 系统更新后 git 错误</h3><p>需要修改 <em>~/.ssh/config</em> 配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Host *
  ServerAliveInterval <span class="token number">10</span>
  HostKeyAlgorithms +ssh-rsa
  PubkeyAcceptedKeyTypes +ssh-rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关联本地与远端分支" tabindex="-1"><a class="header-anchor" href="#关联本地与远端分支" aria-hidden="true">#</a> 关联本地与远端分支</h3><p>当你 <code>git push</code> 时可能会提示需要关联，基本上复制提示的命令即可。下面是关联本地与远端的 master 分支的方法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push --set-upstream origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后便可以直接 <code>git push</code> 推送代码了</p><h3 id="git-log-设置日期格式" tabindex="-1"><a class="header-anchor" href="#git-log-设置日期格式" aria-hidden="true">#</a> git log 设置日期格式</h3><p>默认 git log 使用的日期格式对于国内并不方面查看，但 git 支持设置格式化格式。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> log.date format:<span class="token string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),F={href:"https://www.kancloud.cn/zmh0122/git_log/1933964",target:"_blank",rel:"noopener noreferrer"},L=t(`<h3 id="查看指定目录的-commit-历史" tabindex="-1"><a class="header-anchor" href="#查看指定目录的-commit-历史" aria-hidden="true">#</a> 查看指定目录的 commit 历史</h3><blockquote><p>jetbrains ide 自带，但 vscode 没有，所以需要用命令行。。。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--oneline</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="windows-下配置避免中文乱码" tabindex="-1"><a class="header-anchor" href="#windows-下配置避免中文乱码" aria-hidden="true">#</a> Windows 下配置避免中文乱码</h3><p>在公司的电脑上碰到了 Git 中文乱码的问题，例如想要查看一下仓库的状态，中文全部变成了 <code> umber</code> 的形式。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status
On branch master
Your branch is up to <span class="token function">date</span> with <span class="token string">&#39;origin/master&#39;</span><span class="token builtin class-name">.</span>

Changes not staged <span class="token keyword">for</span> commit:
  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="token punctuation">)</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>

        modified:   <span class="token string">&quot;source/_posts/JavaScript/<span class="token entity" title="\\345">\\345</span><span class="token entity" title="\\234">\\234</span><span class="token entity" title="\\250">\\250</span><span class="token entity" title="\\344">\\344</span><span class="token entity" title="\\274">\\274</span><span class="token entity" title="\\240">\\240</span><span class="token entity" title="\\347">\\347</span><span class="token entity" title="\\273">\\273</span><span class="token entity" title="\\237">\\237</span><span class="token entity" title="\\351">\\351</span><span class="token entity" title="\\241">\\241</span><span class="token entity" title="\\271">\\271</span><span class="token entity" title="\\347">\\347</span><span class="token entity" title="\\233">\\233</span><span class="token entity" title="\\256">\\256</span><span class="token entity" title="\\344">\\344</span><span class="token entity" title="\\270">\\270</span><span class="token entity" title="\\255">\\255</span><span class="token entity" title="\\344">\\344</span><span class="token entity" title="\\275">\\275</span><span class="token entity" title="\\277">\\277</span><span class="token entity" title="\\347">\\347</span><span class="token entity" title="\\224">\\224</span><span class="token entity" title="\\250">\\250</span>-babel-<span class="token entity" title="\\347">\\347</span><span class="token entity" title="\\274">\\274</span><span class="token entity" title="\\226">\\226</span><span class="token entity" title="\\350">\\350</span><span class="token entity" title="\\257">\\257</span><span class="token entity" title="\\221">\\221</span>-ES6.md&quot;</span>
        modified:   <span class="token string">&quot;source/_posts/Tool/IDEA/IDEA <span class="token entity" title="\\344">\\344</span><span class="token entity" title="\\275">\\275</span><span class="token entity" title="\\277">\\277</span><span class="token entity" title="\\347">\\347</span><span class="token entity" title="\\224">\\224</span><span class="token entity" title="\\250">\\250</span><span class="token entity" title="\\346">\\346</span><span class="token entity" title="\\212">\\212</span><span class="token entity" title="\\200">\\200</span><span class="token entity" title="\\345">\\345</span><span class="token entity" title="\\267">\\267</span><span class="token entity" title="\\247">\\247</span>.md&quot;</span>
        modified:   test/test.html
        modified:   test/test.js

no changes added to commit <span class="token punctuation">(</span>use <span class="token string">&quot;git add&quot;</span> and/or <span class="token string">&quot;git commit -a&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方案</p>`,7),Y={href:"https://gist.github.com/nightire/5069597",target:"_blank",rel:"noopener noreferrer"},O=t(`<p>配置一下这些内容即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.quotepath <span class="token boolean">false</span> <span class="token comment"># 显示 status 编码</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> gui.encoding utf-8 <span class="token comment"># 图形界面编码</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> i18n.commit.encoding utf-8 <span class="token comment"># 提交信息编码</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> i18n.logoutputencoding utf-8 <span class="token comment"># 输出 log 编码</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">LESSCHARSET</span><span class="token operator">=</span>utf-8 <span class="token comment"># 最后一条命令是因为 git log 默认使用 less 分页，所以需要 bash 对 less 命令进行 utf-8 编码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-log-选项" tabindex="-1"><a class="header-anchor" href="#git-log-选项" aria-hidden="true">#</a> git log 选项</h3><ul><li><code>--format</code>: 设置格式，例如 %s 可以仅显示提交的消息</li><li><code>--author</code>: 根据提交者过滤</li><li><code>--no-merges</code>: 过滤掉合并的历史</li><li><code>--reverse</code>: 反转排序，按照时间正序</li><li><code>--max-count</code>: 显示的 commit 最大数量</li><li><code>--after</code>: 显示指定日期之后的 commit</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">&quot;%s %cd&quot;</span> <span class="token parameter variable">--author</span><span class="token operator">=</span>rxliuli --no-merges <span class="token parameter variable">--after</span><span class="token operator">=</span><span class="token number">2022</span>-01-01 <span class="token parameter variable">--reverse</span> --max-count<span class="token operator">=</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="获取文件在指定时间后的内容" tabindex="-1"><a class="header-anchor" href="#获取文件在指定时间后的内容" aria-hidden="true">#</a> 获取文件在指定时间后的内容</h3><p>获取文件在指定日期后面的第一次提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--after</span><span class="token operator">=</span><span class="token number">2022</span>-07-01 --max-count<span class="token operator">=</span><span class="token number">1</span> -- ./package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取文件在特定提交时的内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> show 0e120d21e7376268ebd0b574bee2b923f2b9fd34:./package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 js（simple-git）获取的代码如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> git <span class="token operator">=</span> <span class="token function">simpleGit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getFileAfter</span><span class="token punctuation">(</span>
  filePath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  date<span class="token operator">:</span> Date<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> after <span class="token operator">=</span> <span class="token keyword">await</span> git<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    file<span class="token operator">:</span> filePath<span class="token punctuation">,</span>
    maxCount<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;--after&#39;</span><span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>after<span class="token punctuation">.</span>latest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">await</span> git<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> stat <span class="token operator">=</span> <span class="token keyword">await</span> git<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>after<span class="token punctuation">.</span>latest<span class="token punctuation">.</span>hash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> stat
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除所有被-gitignore-忽略的文件" tabindex="-1"><a class="header-anchor" href="#删除所有被-gitignore-忽略的文件" aria-hidden="true">#</a> 删除所有被 gitignore 忽略的文件</h3><p>有时候会需要清理当前项目到刚刚 clone 的状态以便清理掉各种缓存问题。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clean <span class="token parameter variable">-xdn</span>
<span class="token function">git</span> clean <span class="token parameter variable">-xdf</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不过清理项目的缓存更好的方式是结合上 find 命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> stash
<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">&#39;node_modules&#39;</span> <span class="token parameter variable">-type</span> d <span class="token parameter variable">-prune</span> <span class="token parameter variable">-print</span> <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token string">&#39;{}&#39;</span> <span class="token punctuation">\\</span><span class="token punctuation">;</span>
<span class="token function">git</span> clean <span class="token parameter variable">-xdf</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),P={href:"https://stackoverflow.com/a/36573710",target:"_blank",rel:"noopener noreferrer"},H=t(`<h3 id="换行符警告" tabindex="-1"><a class="header-anchor" href="#换行符警告" aria-hidden="true">#</a> 换行符警告</h3><p>在 Windows 上使用 git 会出现警告 <code>LF will be replaced by CRLF the next time Git touches it</code>，适用以下全局配置即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.autocrlf <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),C={href:"https://stackoverflow.com/a/17628353",target:"_blank",rel:"noopener noreferrer"},T=t(`<h3 id="合并特定分支的指定提交" tabindex="-1"><a class="header-anchor" href="#合并特定分支的指定提交" aria-hidden="true">#</a> 合并特定分支的指定提交</h3><p>使用 <code>git cherry-pick</code> 即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> cherry-pick 743a35e2f1b9400658e04f7a2724eecf063901b6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),V={href:"https://lonelyrookie.github.io/2019/06/30/Git%E5%90%88%E5%B9%B6%E7%89%B9%E5%AE%9Acommits%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF/",target:"_blank",rel:"noopener noreferrer"},z=t(`<h3 id="创建空的分支" tabindex="-1"><a class="header-anchor" href="#创建空的分支" aria-hidden="true">#</a> 创建空的分支</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch <span class="token parameter variable">--orphan</span> <span class="token operator">&lt;</span>new branch<span class="token operator">&gt;</span>
<span class="token function">git</span> commit --allow-empty <span class="token parameter variable">-m</span> <span class="token string">&quot;Initial commit on orphan branch&quot;</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin <span class="token operator">&lt;</span>new branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),U={href:"https://stackoverflow.com/questions/34100048/",target:"_blank",rel:"noopener noreferrer"};function W(J,K){const s=o("ExternalLinkIcon");return l(),d("div",null,[r,n("blockquote",null,[n("p",null,[a("详细的 git 相关知识强烈推荐 "),n("a",p,[a("Pro Git"),e(s)])])]),u,n("blockquote",null,[n("p",null,[a("参考："),n("a",h,[a("怎样让 Git 忽略当前已经更改的文件"),e(s)])])]),g,n("blockquote",null,[n("p",null,[a("参考："),n("a",m,[a("git 获取远程服务器的指定分支"),e(s)])])]),k,n("blockquote",null,[n("p",null,[a("参考："),n("a",b,[a("git 如何忽略已经提交的文件 (.gitignore 文件无效)"),e(s)])])]),v,n("p",null,[a("现在有两个仓库 "),n("a",f,[a("kktjs/kkt"),e(s)]),a(" 和 "),n("a",_,[a("kktjs/kkt-next"),e(s)]),a(" 我们需要将 "),x,a(" 仓库合并到 "),y,a(" 并保留 "),w,a(" 的所有提交内容。")]),q,n("blockquote",null,[n("p",null,[a("参考: "),n("a",E,[a("https://segmentfault.com/a/1190000021919753"),e(s)])])]),A,n("blockquote",null,[n("p",null,[a("参考 "),n("a",B,[a("git submodule"),e(s)])])]),S,n("blockquote",null,[n("p",null,[a("参考: "),n("a",I,[a("执行了 git reset，还有办法取消吗？"),e(s)])])]),G,j,n("blockquote",null,[n("p",null,[a("主要依赖功能 "),n("a",R,[a("高级合并 => 子树合并"),e(s)]),a("，同时参考错误解决方案 "),n("a",N,[a("The “fatal: refusing to merge unrelated histories” Git error"),e(s)])])]),D,n("blockquote",null,[n("p",null,[a("参考："),n("a",F,[a("Git log 修改时间格式"),e(s)])])]),L,n("blockquote",null,[n("p",null,[a("该方案摘抄自 "),n("a",Y,[a("解决 Git 在 windows 下中文乱码的问题"),e(s)])])]),O,n("blockquote",null,[n("p",null,[a("ref: "),n("a",P,[a("https://stackoverflow.com/a/36573710"),e(s)])])]),H,n("blockquote",null,[n("p",null,[a("ref: "),n("a",C,[a("https://stackoverflow.com/a/17628353"),e(s)])])]),T,n("blockquote",null,[n("p",null,[a("ref: "),n("a",V,[a("https://lonelyrookie.github.io/2019/06/30/Git合并特定commits到另一个分支/"),e(s)])])]),z,n("blockquote",null,[n("p",null,[a("ref: "),n("a",U,[a("https://stackoverflow.com/questions/34100048/"),e(s)])])])])}const $=i(c,[["render",W],["__file","b63ba6ff31c049f8a6703ce7022a79e6.html.vue"]]);export{$ as default};
