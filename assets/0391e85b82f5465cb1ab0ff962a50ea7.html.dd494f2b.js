import{r as n,o as s,c as a,a as t,F as p,b as e,d as o}from"./app.c83a8dcf.js";const c={},l=t("h2",{id:"背景",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#背景","aria-hidden":"true"},"#"),e(" 背景")],-1),u=e("前端近两年来发展迅速，随着 "),r={href:"https://nodejs.org",target:"_blank",rel:"noopener noreferrer"},i=e("nodejs"),k=e(" 的广泛使用，大批 "),b={href:"https://npmjs.com",target:"_blank",rel:"noopener noreferrer"},m=e("npm"),d=e(" 的框架/库层出不穷，npm 上 JavaScript 库的数量甚至超过了 "),g={href:"https://mvnrepository.com/",target:"_blank",rel:"noopener noreferrer"},v=e("Maven 中央仓库"),q=e("。"),f=t("br",null,null,-1),h=e(" 然而即便如此，仍然有很多公司固守在传统的前端切 UI，后端通过模板视图填充视图的技术。一方面固然是为了避免新技术踩坑，另一方面，居然有人在 "),y={href:"https://github.com/denoland/deno",target:"_blank",rel:"noopener noreferrer"},w=e("deno"),j=e(" 下说出了："),S={href:"https://github.com/denoland/deno/issues/25",target:"_blank",rel:"noopener noreferrer"},x=e("求不要更新了，老子学不动了"),M=e("，并引发了大量讨论。"),T=o('<blockquote><p>deno 是 nodejs 的作者开发的下一代 JavaScript 运行时。</p></blockquote><h2 id="现代前端" tabindex="-1"><a class="header-anchor" href="#现代前端" aria-hidden="true">#</a> 现代前端</h2><p>前端发展史</p><blockquote><ol><li>1996 年，样式表标准 <code>CSS</code> 第一版发布。</li><li>2001 年，微软公司时隔 5 年之后，发布了 IE 浏览器的下一个版本 <code>Internet Explorer 6</code>。这是当时最先进的浏览器，它后来统治了浏览器市场多年。</li><li>2002 年，Mozilla 项目发布了它的浏览器的第一版，后来起名为 <code>Firefox</code>。</li><li>2003 年，苹果公司发布了 <code>Safari</code> 浏览器的第一版。</li><li>2004 年，Google 公司发布了 <code>Gmail</code>，促成了互联网应用程序（<code>Web Application</code>）这个概念的诞生。由于 Gmail 是在 4 月 1 日发布的，很多人起初以为这只是一个玩笑。</li><li>2004 年，<code>WHATWG</code> 组织成立，致力于加速 HTML 语言的标准化进程。</li><li>2005 年，<code>Ajax</code> 方法（Asynchronous JavaScript and XML）正式诞生，Jesse James Garrett 发明了这个词汇。它开始流行的标志是，2 月份发布的 Google Maps 项目大量采用该方法。它几乎成了新一代网站的标准做法，促成了 <code>Web 2.0</code> 时代的来临。</li><li>2006 年，<code>jQuery</code> 函数库诞生，作者为 John Resig。jQuery 为操作网页 <code>DOM</code> 结构提供了非常强大易用的接口，成为了使用最广泛的函数库，并且让 JavaScript 语言的应用难度大大降低，推动了这种语言的流行。</li><li>2008 年，<code>V8</code> 编译器诞生.</li><li>2009 年，<code>Node.js</code> 项目诞生，创始人为 Ryan Dahl，它标志着 JavaScript 可以用于 <code>服务器端编程</code>，从此网站的前端和后端可以使用同一种语言开发。并且，Node.js 可以承受很大的并发流量，使得开发某些互联网大规模的实时应用变得容易。</li><li>2013 年 5 月，Facebook 发布 UI 框架库 <code>React</code>，引入了新的 <code>JSX</code> 语法，使得 UI 层可以用组件开发。</li><li>2015 年 3 月，Facebook 公司发布了 <code>React Native</code> 项目，将 React 框架移植到了手机端，可以用来开发手机 <code>App</code>。它会将 JavaScript 代码转为 <code>iOS</code> 平台的 <code>Objective-C</code> 代码，或者 <code>Android</code> 平台的 <code>Java</code> 代码，从而为 JavaScript 语言开发高性能的原生 App 打开了一条道路。</li><li>2015 年 <code>vuejs</code> 发布 1.0 版本</li><li>2016 年 <code>vuejs2.x</code> 版本发布</li><li>新生事物仍在不断涌现...</li></ol></blockquote><p>上面就是前端的大概发展史，看完之后，不难发现，有一些关键的历史时刻，对前端开发产生了重大影响。例如 IE6 的发布（统治了浏览器市场很多年），JQuery 的诞生，Ajax 的流行。而现在，新的拐点出现了 -- nodejs 的流行。现代前端仍然在快速发展中，前后端分离，SSR，PWA 都是近两年才出现的概念。如果没有上车，后面就再难追上了。例如像十年前不使用 Spring 开发的应用，在现代 Java Web 后端的环境中，没有 Spring 简直寸步难行。</p><p>上面说了一些现代前端的历史，那么使用它具体有什么好处呢？</p><h3 id="javascript-模块化" tabindex="-1"><a class="header-anchor" href="#javascript-模块化" aria-hidden="true">#</a> JavaScript 模块化</h3><p>仔细想想，我们的 HTML, CSS 和 JavaScript 是如何结合使用的？</p><p>是的，我们按照规范分离了 HTML, CSS 和 JavaScript，并在 HTML 中使用 <code>&lt;link /&gt;</code> 和 <code>&lt;scirpt&gt;&lt;/script&gt;</code> 标签引入 CSS 和 JavaScript。那么，不同的 JavaScript 之间如何交互呢？我们只能通过暴露顶级变量（<code>window 作用域</code>）来进行交互。 是呀，稍有经验的 JavaScript 开发者都会 <strong>抽取函数</strong>，然而一个 JavaScript 中太多的函数仍然容易产生混乱。</p><p>例如下面这段代码，点击不同的按钮，显示不同的面板。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- index.html --&gt;</span>\n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ie=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript 避免使用 if-else<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tab<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-tab-radio<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n          第一个选项卡\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-tab-radio<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n          第二个选项卡\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-tab-radio<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n          第三个选项卡\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>extends-form<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./js/if-else.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// js/if-else.js</span>\ndocument<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;#tab input[name=&quot;form-tab-radio&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> index <span class="token operator">=</span> el<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>index<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> header <span class="token operator">=</span> el<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span>innerText<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 如果为 1 就添加一个文本表单</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#extends-form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n            &lt;header&gt;&lt;h2&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>header<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h2&gt;&lt;/header&gt;\n            &lt;div&gt;\n              &lt;label for=&quot;name&quot;&gt;姓名&lt;/label&gt;\n              &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; /&gt;\n            &lt;/div&gt;\n            &lt;div&gt;\n              &lt;label for=&quot;age&quot;&gt;年龄&lt;/label&gt;\n              &lt;input type=&quot;number&quot; name=&quot;age&quot; id=&quot;age&quot; /&gt;\n            &lt;/div&gt;\n            &lt;div&gt;\n              &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt; &lt;button type=&quot;reset&quot;&gt;重置&lt;/button&gt;\n            &lt;/div&gt;\n          </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#extends-form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n        &lt;header&gt;&lt;h2&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>header<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h2&gt;&lt;/header&gt;\n        &lt;div&gt;\n          &lt;label for=&quot;avatar&quot;&gt;头像&lt;/label&gt;\n          &lt;input type=&quot;file&quot; name=&quot;avatar&quot; id=&quot;avatar&quot; /&gt;\n        &lt;/div&gt;\n        &lt;div&gt;&lt;img id=&quot;avatar-preview&quot; src=&quot;&quot; /&gt;&lt;/div&gt;\n        &lt;div&gt;\n          &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt; &lt;button type=&quot;reset&quot;&gt;重置&lt;/button&gt;\n        &lt;/div&gt;\n      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n      <span class="token keyword">function</span> <span class="token function">readLocalFile</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          fr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token function">resolve</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">;</span>\n          fr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">;</span>\n          fr<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#avatar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;change&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evnet</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> file <span class="token operator">=</span> evnet<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">readLocalFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">link</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#avatar-preview&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> link<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> initData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">第 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 项内容</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#extends-form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n        &lt;header&gt;&lt;h2&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>header<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h2&gt;&lt;/header&gt;\n        &lt;div&gt;\n          &lt;label for=&quot;search-text&quot;&gt;搜索文本&lt;/label&gt;\n          &lt;input type=&quot;text&quot; name=&quot;search-text&quot; id=&quot;search-text&quot; /&gt;\n          &lt;ul id=&quot;search-result&quot;&gt;&lt;/ul&gt;\n        &lt;/div&gt;\n      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n      document\n        <span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#search-text&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evnet</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> searchText <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n          document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#search-result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> initData\n            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>searchText<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br></div></div><p>使用现代前端的 JavaScript 模块化重构如下</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// common.js</span>\n<span class="token doc-comment comment">/**\n * 状态机\n * 用于避免使用 if-else 的一种方式\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">StateMachine</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token function">getBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> clazzMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token doc-comment comment">/**\n     * 状态注册器\n     * 更好的有限状态机，分离子类与构建的关系，无论子类如何增删该都不影响基类及工厂类\n     */</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">class</span> Builder <span class="token punctuation">{</span>\n      <span class="token comment">// noinspection JSMethodCanBeStatic</span>\n      <span class="token doc-comment comment">/**\n       * 注册一个 class，创建子类时调用，用于记录每一个 [状态 =&gt; 子类] 对应\n       * <span class="token keyword">@param</span> <span class="token parameter">state</span> 作为键的状态\n       * <span class="token keyword">@param</span> <span class="token parameter">clazz</span> 对应的子类型\n       * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> 返回 clazz 本身\n       */</span>\n      <span class="token function">register</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> clazz</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        clazzMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> clazz\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// noinspection JSMethodCanBeStatic</span>\n      <span class="token doc-comment comment">/**\n       * 获取一个标签子类对象\n       * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span> <span class="token parameter">state</span> 状态索引\n       * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>QuestionType<span class="token punctuation">}</span></span> 子类对象\n       */</span>\n      <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> clazz <span class="token operator">=</span> clazzMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token keyword">null</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//构造函数的参数</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">clazz</span><span class="token punctuation">(</span><span class="token operator">...</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> StateMachine\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// TabBuilder.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> StateMachine<span class="token punctuation">.</span><span class="token function">getBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Tab.js</span>\n<span class="token keyword">class</span> <span class="token class-name">Tab</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 基类里面的初始化方法放一些通用的操作</span>\n  <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">header</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n      &lt;header&gt;&lt;h2&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>header<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h2&gt;&lt;/header&gt;\n      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#extends-form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 给出一个方法让子类实现，以获得不同的 HTML 内容</span>\n  <span class="token function">initHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Tab<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Tab1.js</span>\n<span class="token keyword">import</span> builder <span class="token keyword">from</span> <span class="token string">&quot;./TabBuilder.js&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Tab <span class="token keyword">from</span> <span class="token string">&quot;./Tab&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Tab1 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>\n  <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token keyword">class</span> <span class="token class-name">Tab1</span> <span class="token keyword">extends</span> <span class="token class-name">Tab</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 实现 initHTML，获得选项卡对应的 HTML</span>\n    <span class="token function">initHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n        &lt;div&gt;\n          &lt;label for=&quot;name&quot;&gt;姓名&lt;/label&gt;\n          &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; /&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n          &lt;label for=&quot;age&quot;&gt;年龄&lt;/label&gt;\n          &lt;input type=&quot;number&quot; name=&quot;age&quot; id=&quot;age&quot; /&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n          &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt; &lt;button type=&quot;reset&quot;&gt;重置&lt;/button&gt;\n        &lt;/div&gt;\n      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Tab2.js</span>\n<span class="token keyword">import</span> builder <span class="token keyword">from</span> <span class="token string">&quot;./TabBuilder.js&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Tab <span class="token keyword">from</span> <span class="token string">&quot;./Tab&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Tab2 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>\n  <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token keyword">class</span> <span class="token class-name">Tab2</span> <span class="token keyword">extends</span> <span class="token class-name">Tab</span> <span class="token punctuation">{</span>\n    <span class="token function">initHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n      &lt;div&gt;\n        &lt;label for=&quot;avatar&quot;&gt;头像&lt;/label&gt;\n        &lt;input type=&quot;file&quot; name=&quot;avatar&quot; id=&quot;avatar&quot; /&gt;\n      &lt;/div&gt;\n      &lt;div&gt;&lt;img id=&quot;avatar-preview&quot; src=&quot;&quot; /&gt;&lt;/div&gt;\n      &lt;div&gt;\n        &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt; &lt;button type=&quot;reset&quot;&gt;重置&lt;/button&gt;\n      &lt;/div&gt;\n      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 重写 init 初始化方法，并首先调用基类通用初始化的方法</span>\n    <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">header</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#avatar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;change&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evnet</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> file <span class="token operator">=</span> evnet<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readLocalFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">link</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#avatar-preview&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> link<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 子类独有方法</span>\n    <span class="token function">readLocalFile</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token function">resolve</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        fr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        fr<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Tab2.js</span>\n<span class="token keyword">import</span> builder <span class="token keyword">from</span> <span class="token string">&quot;./TabBuilder.js&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Tab <span class="token keyword">from</span> <span class="token string">&quot;./Tab&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Tab3 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>\n  <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token keyword">class</span> <span class="token class-name">Tab3</span> <span class="token keyword">extends</span> <span class="token class-name">Tab</span> <span class="token punctuation">{</span>\n    <span class="token function">initHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n      &lt;div&gt;\n        &lt;label for=&quot;search-text&quot;&gt;搜索文本&lt;/label&gt;\n        &lt;input type=&quot;text&quot; name=&quot;search-text&quot; id=&quot;search-text&quot; /&gt;\n        &lt;ul id=&quot;search-result&quot; /&gt;\n      &lt;/div&gt;\n    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">header</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> initData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">第 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 项内容</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      document\n        <span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#search-text&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evnet</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> searchText <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n          document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#search-result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> initData\n            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>searchText<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// main.js</span>\n<span class="token keyword">import</span> builder <span class="token keyword">from</span> <span class="token string">&quot;./TabBuilder.js&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">&quot;./Tab1&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">&quot;./Tab2&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">&quot;./Tab3&quot;</span><span class="token punctuation">;</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;#tab input[name=&quot;form-tab-radio&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    <span class="token comment">// 调用方式不变</span>\n    builder\n      <span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span>innerText<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>虽然看起来代码/文件变得更多了，然而实际上不同的状态区分更加明显，代码也更容易维护了。</p><h3 id="兼容性" tabindex="-1"><a class="header-anchor" href="#兼容性" aria-hidden="true">#</a> 兼容性</h3><p>如果我们想要让传统前端项目兼容 <code>IE11</code>，那么恐怕不得不使用 <code>JQuery</code> 以及 <code>ES5</code> 以前的语法（ES5 也支持的不完全）。如果想要使用 <code>ES6/ES7/ES8</code> 的话恐怕不仅在 IE11 上无法保证兼容性，既便 Web 标准的前沿实现者 Google Chrome，它的旧版本对新特性的支持恐怕也不算好（Google Chrome 开发团队的实力毋庸置疑，然而如果一个标准是在浏览器发布之后才出现的话，旧版本浏览器却是不可能兼容了）。</p><blockquote><p>附: 最近两年 JavaScript 的标准几乎是一年一个版本，不过都没有再像 <code>ES6</code> 如此激进了</p></blockquote>',24),J=e("那么，如果使用现代前端就能解决这个问题了么？是的，它现代前端项目基本上都会引入的一个库 -- "),E={href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer"},L=e("Babel"),H=e("。"),_=o('<p>Babel 官网首页用一句话说明了 Babel 的定位</p><blockquote><p>Babel is a JavaScript compiler.<br> Use next generation JavaScript, today.</p></blockquote><p>意为：<br><strong>Babel 是一个 JavaScript 编译器。</strong><br><strong>立刻使用下一代 JavaScript。</strong></p><p>是的，你没听错，Babel 给自身的定义是 JavaScript 编译器。众所周知，JavaScript 是运行在浏览器上（现在也可以运行在 NodeJS）的解释型弱类型的脚本语言，是没有编译器的。而 Babel 就是帮我们将 ES6 之后的 JavaScript 代码编译成 ES5 的代码，以兼容较旧版本的浏览器。</p><p>例如下面的代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>会被转换成</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    i <span class="token operator">=</span> _i<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当然，传统前端不能使用 Babel 了么？答案是可以的，然而因为是在浏览器端编译 JavaScript，所以速度比较慢，具体可以参考吾辈写的 <a href="/p/8c57648407fa4b72ac30c3a61b1c1fef">在传统项目中使用 babel 编译 ES6</a>。</p><h3 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm" aria-hidden="true">#</a> MVVM</h3>',10),A={href:"https://zh.wikipedia.org/zh-cn/MVVM",target:"_blank",rel:"noopener noreferrer"},z=e("Wiki"),V=o('<p><code>MVVM</code>（<code>Model–view–viewmodel</code>）是一种软件架构模式。</p><p>MVVM 有助于将图形用户界面的开发与业务逻辑或后端逻辑（数据模型）的开发分离开来，这是通过置标语言或 GUI 代码实现的。MVVM 的视图模型是一个值转换器，这意味着视图模型负责从模型中暴露（转换）数据对象，以便轻松管理和呈现对象。在这方面，视图模型比视图做得更多，并且处理大部分视图的显示逻辑。视图模型可以实现中介者模式，组织对视图所支持的用例集的后端逻辑的访问。</p><p>说人话就是 MVVM 能让我们不再关心 DOM 的更改，专注于操作数据，DOM 会根据数据自动渲染，我们不再需要关心它。</p><p>事实上，我们的不同的代码虽然分离了，但逻辑上却不然，JavaScript 仍然需要操作 DOM 和 Style，而这项工作是非常繁琐而且易错的。<br> 曾经我们使用 JQuery 来进行 DOM 交互，同时保证兼容性，以及更好的 Ajax 工具。现在，现代前端的很多框架就是为了解决数据与 DOM 同步的，不管是 <code>React</code> 的 <code>JSX</code>，还是 <code>VueJS</code> 的 <code>单文件组件</code>。</p><p><code>JSX</code>：React 的理念是 既然 JavaScript 能够操作 HTML/CSS，那就把所有的控制权交给 JavaScript 就好了，在 React JSX 中，一切都是 JavaScript，即便是 JSX 的 DSL 也只是一个看起来像 HTML 的 JavaScript 代码而已。像下面的代码，事实上就是 JavaScript，直接写 <code>&lt;div&gt;Hello {this.props.name}&lt;/div&gt;</code> 只是语法糖，背后真正运行的还是 JavaScript。</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">HelloMessage</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HelloMessage</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Taylor<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>假如使用 vuejs 的话写起来大概是这样</p><div class="language-vuejs ext-vuejs line-numbers-mode"><pre class="language-vuejs"><code>&lt;template&gt;\n  &lt;div&gt;Hello {name}&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &#39;HelloWord&#39;,\n  props: {\n    name: {\n      type: String\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> HelloMessage <span class="token keyword">from</span> <span class="token string">&quot;./HelloMessage&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span> HelloMessage <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token string">&quot;&lt;App/&gt;&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>它们之间的思想有许多共同之处，都推崇组件化开发，把 <code>HTML/CSS/JavaScript</code> 混合起来形成组件（类似于 Java 中将属性和函数封装为类），然后组合成更大的组件，形成组件树，并最终构成 WebApp。吾辈目前推荐先看 VueJS，毕竟是国人开发，中文文档最为完善，在三大前端框架中也属于最简单的一个（ReactJS 是最困难也是生态最好的一个）。</p><h3 id="生态丰富" tabindex="-1"><a class="header-anchor" href="#生态丰富" aria-hidden="true">#</a> 生态丰富</h3><p>NPM 的生态相当丰富，现代前端几乎所有的库都通过 NPM 发布。至今，NPM 上已经有超过 70W+ 的包，在数量上甚至远超了 Maven 中央仓库。正是因为 NPM 发布包相当简单（吾辈都发布了几个），造成了如今无比繁荣的生态（想想 Maven 感觉都是泪。。。）</p>',12),B=e("包管理器对比数据可以参考 "),D={href:"http://www.modulecounts.com/",target:"_blank",rel:"noopener noreferrer"},C=e("http://www.modulecounts.com/"),R=t("p",null,[e("使用 NPM 安装和使用包相当简单，使用 "),t("code",null,"npm i [package]"),e(" 就能直接安装一个包，使用 ES6 "),t("code",null,"import"),e(" 语法就能在自己的 JavaScript 文件中快速引用一个包。")],-1),I=t("p",null,"下面列出一些常用的 NPM 库",-1),N={href:"https://yarnpkg.com/",target:"_blank",rel:"noopener noreferrer"},F=e("yarn"),O=e(": Facebook 家的前端包管理器"),W={href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer"},P=e("babel"),G=e(": 现代前端的 JQuery，解决兼容性"),U={href:"https://vuejs.org/",target:"_blank",rel:"noopener noreferrer"},$=e("vuejs"),Q=e(": 华人开发的前端 MVVM 框架"),X={href:"http://stylus-lang.com/",target:"_blank",rel:"noopener noreferrer"},K=e("stylus"),Y=e(": CSS 预处理器"),Z={href:"https://eslint.org/",target:"_blank",rel:"noopener noreferrer"},nn=e("eslint"),sn=e(": 前端代码规范检查"),an={href:"https://webpack.js.org",target:"_blank",rel:"noopener noreferrer"},tn=e("webpack"),pn=e(": 现代前端必备的打包工具"),en={href:"https://www.rollupjs.com/",target:"_blank",rel:"noopener noreferrer"},on=e("rollup"),cn=e(": JavaScript SDK 打包工具"),ln={href:"https://lodash.com/",target:"_blank",rel:"noopener noreferrer"},un=e("lodashjs"),rn=e(": 流行的函数式工具库"),kn={href:"https://www.axios.com/",target:"_blank",rel:"noopener noreferrer"},bn=e("axios"),mn=e(": 符合 ES6 Promise 风格的 Ajax 库"),dn={href:"https://vuetifyjs.com/",target:"_blank",rel:"noopener noreferrer"},gn=e("vuetify"),vn=e(": 基于 vuejs 的前端 "),qn=t("code",null,"material",-1),fn=e(" 风格的 UI 库"),hn={href:"https://github.com/SheetJS/js-xlsx",target:"_blank",rel:"noopener noreferrer"},yn=e("js-xlsx"),wn=e(": 前端 Excel 处理工具"),jn={href:"https://www.npmjs.com/package/debug",target:"_blank",rel:"noopener noreferrer"},Sn=e("debug"),xn=e(": debug 日志辅助工具"),Mn={href:"https://www.npmjs.com/package/uglify-js",target:"_blank",rel:"noopener noreferrer"},Tn=e("uglifyjs"),Jn=e(": JavaScript 压缩工具"),En={href:"https://www.npmjs.com/package/http-server",target:"_blank",rel:"noopener noreferrer"},Ln=e("http-server"),Hn=e(": 静态 http 服务器"),_n={href:"https://hexo.io/",target:"_blank",rel:"noopener noreferrer"},An=e("hexo"),zn=e(": 现代前端开发的博客系统"),Vn={href:"https://www.highcharts.com/",target:"_blank",rel:"noopener noreferrer"},Bn=e("highcharts"),Dn=e(": 丰富强大的图表库"),Cn={href:"https://masonry.desandro.com/",target:"_blank",rel:"noopener noreferrer"},Rn=e("masonry"),In=e(": 无限滚动瀑布流"),Nn={href:"https://highlightjs.org/",target:"_blank",rel:"noopener noreferrer"},Fn=e("highlightjs"),On=e(": 代码高亮"),Wn={href:"https://www.npmjs.com/package/rx-util",target:"_blank",rel:"noopener noreferrer"},Pn=e("rx-util"),Gn=e(": 写 Greasemonkey 脚本时自定义的工具库"),Un=t("li",null,"还有更多。。。",-1),$n=o('<h3 id="工程化" tabindex="-1"><a class="header-anchor" href="#工程化" aria-hidden="true">#</a> 工程化</h3><p>现代前端已经和后端类似，将原本混沌的 HTML/CSS/JavaScript 细分为了许多的内容。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>├── dist <span class="token comment">// 打包后的静态文件</span>\n├── <span class="token punctuation">.</span>editorconfig <span class="token comment">// 编辑器配置</span>\n├── <span class="token punctuation">.</span>eslintrc<span class="token punctuation">.</span>js <span class="token comment">// eslint 配置格式</span>\n├── <span class="token punctuation">.</span>git <span class="token comment">// git 仓库</span>\n├── <span class="token punctuation">.</span>gitignore <span class="token comment">// git 忽略文件</span>\n├── babel<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js <span class="token comment">// babel 配置</span>\n├── <span class="token constant">LICENSE</span> <span class="token comment">// 许可证</span>\n├── node_module <span class="token comment">// 项目依赖</span>\n├── <span class="token keyword">package</span><span class="token punctuation">.</span>json <span class="token comment">// npm 定义文件</span>\n├── <span class="token keyword">public</span> <span class="token comment">// 一些公共的资源</span>\n│   ├── favicon<span class="token punctuation">.</span>ico\n│   └── index<span class="token punctuation">.</span>html\n├── <span class="token constant">README</span><span class="token punctuation">.</span>md <span class="token comment">// 项目说明</span>\n├── src <span class="token comment">// 源代码目录</span>\n│   ├── App<span class="token punctuation">.</span>vue <span class="token comment">// 根组件</span>\n│   ├── main<span class="token punctuation">.</span>js <span class="token comment">// 项目入口</span>\n│   ├── api <span class="token comment">// api 接口，和 views 中的文件夹对应</span>\n│   ├── components <span class="token comment">// 公共的组件</span>\n│   ├── plugins <span class="token comment">// vuejs 插件</span>\n│   │   └── vuetify<span class="token punctuation">.</span>js\n│   ├── router <span class="token comment">// vuejs 路由管理</span>\n│   │   └── index<span class="token punctuation">.</span>js\n│   ├── store <span class="token comment">// vuejs 状态管理</span>\n│   │   └── index<span class="token punctuation">.</span>js\n│   ├── utils <span class="token comment">// 工具函数</span>\n│   └── views <span class="token comment">// 各个页面</span>\n├── tests\n│   └── unit <span class="token comment">// 单元测试</span>\n│       ├── <span class="token punctuation">.</span>eslintrc<span class="token punctuation">.</span>js\n│       └── example<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>js\n├── vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js <span class="token comment">// vuejs 的配置</span>\n└── yarn<span class="token punctuation">.</span>lock <span class="token comment">// yarn 配置文件</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>当初第一次看到这个目录时真是被吓到了，使用 <code>yarn</code> 一下子 20000 个依赖文件就下载下来了。然而其实这只是将传统前端分的更细一点而已，对后期维护的好处也是不言而喻的。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>总而言之，现代前端流行之后，前后端分离已然是大势所趋，前端开发如果还仅仅是 <strong>切图仔</strong> 的话，迟早会因为跟不上时代而被淘汰。就吾辈而言，亦希望有更多人入坑现代前端，体会现代前端的强大!</p><blockquote><p>附：吾辈个人而言认为现代前端主要的优势 <a href="#JavaScript-%E6%A8%A1%E5%9D%97%E5%8C%96">模块化</a>/<a href="%E5%B7%A5%E7%A8%8B%E5%8C%96">工程化</a> 和 <a href="#MVVM">MVVM</a>。前者使大型 WebApp 的开发变成可能，后者则改变了数据与 DOM 之间的交互方式。</p></blockquote>',7);c.render=function(e,o){const c=n("OutboundLink");return s(),a(p,null,[l,t("p",null,[u,t("a",r,[i,t(c)]),k,t("a",b,[m,t(c)]),d,t("a",g,[v,t(c)]),q,f,h,t("a",y,[w,t(c)]),j,t("a",S,[x,t(c)]),M]),T,t("p",null,[J,t("a",E,[L,t(c)]),H]),_,t("blockquote",null,[t("p",null,[t("a",A,[z,t(c)])])]),V,t("blockquote",null,[t("p",null,[B,t("a",D,[C,t(c)])])]),R,I,t("ul",null,[t("li",null,[t("a",N,[F,t(c)]),O]),t("li",null,[t("a",W,[P,t(c)]),G]),t("li",null,[t("a",U,[$,t(c)]),Q]),t("li",null,[t("a",X,[K,t(c)]),Y]),t("li",null,[t("a",Z,[nn,t(c)]),sn]),t("li",null,[t("a",an,[tn,t(c)]),pn]),t("li",null,[t("a",en,[on,t(c)]),cn]),t("li",null,[t("a",ln,[un,t(c)]),rn]),t("li",null,[t("a",kn,[bn,t(c)]),mn]),t("li",null,[t("a",dn,[gn,t(c)]),vn,qn,fn]),t("li",null,[t("a",hn,[yn,t(c)]),wn]),t("li",null,[t("a",jn,[Sn,t(c)]),xn]),t("li",null,[t("a",Mn,[Tn,t(c)]),Jn]),t("li",null,[t("a",En,[Ln,t(c)]),Hn]),t("li",null,[t("a",_n,[An,t(c)]),zn]),t("li",null,[t("a",Vn,[Bn,t(c)]),Dn]),t("li",null,[t("a",Cn,[Rn,t(c)]),In]),t("li",null,[t("a",Nn,[Fn,t(c)]),On]),t("li",null,[t("a",Wn,[Pn,t(c)]),Gn]),Un]),$n],64)};export{c as default};
