import{_ as p,M as o,p as c,q as l,R as n,t as s,N as t,a1 as e}from"./framework-96b046e1.js";const i="/assets/19a3d23c4f024938b8e327148d9f964e-dcf4b5f7.png",r={},u=e(`<h2 id="使用-keyof-限定对象的属性值参数" tabindex="-1"><a class="header-anchor" href="#使用-keyof-限定对象的属性值参数" aria-hidden="true">#</a> 使用 keyof 限定对象的属性值参数</h2><p>如果参数中包含对象的属性，吾辈一般会使用 <code>string</code> 或者 <code>PropertyKey</code>，但实际上 ts 里在这种场景下有更合适的方式: <code>keyof</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> k<span class="token operator">:</span> PropertyKey<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">number</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优化一下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> k<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这里的第二个参数会有类型约束</span>
<span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">number</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="将对象的所有值进行映射" tabindex="-1"><a class="header-anchor" href="#将对象的所有值进行映射" aria-hidden="true">#</a> 将对象的所有值进行映射</h2><p>ts 内部实现了一个 <code>Partial</code> 类型就是这样</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * Make all properties in T optional
 */</span>
<span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个使用示例，将对象中所有属性的值映射为函数。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MapValueToFunc<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">mapToComputed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> MapValueToFunc<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
    <span class="token keyword">return</span> res
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试一下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">mapToComputed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;rx&#39;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>
  sex<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="infer-解构" tabindex="-1"><a class="header-anchor" href="#infer-解构" aria-hidden="true">#</a> infer 解构</h2><p>可以将复杂类型进行解构，以得到复杂类型中的部分类型。</p><p>下面是几个应用场景</p><ul><li>取出泛型类。例如从 <code>Promise&lt;T&gt;</code> 中取出 <code>T</code></li><li>取出函数的参数类型列表/返回值。例如从 <code>(...args: P): R</code> 中取出 <code>P</code> 和 <code>R</code></li><li>获取到构造函数参数列表</li></ul><p>取出泛型类</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 一个用于</span>
<span class="token keyword">type</span> <span class="token class-name">PromiseDeconstruct<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span>
  <span class="token operator">?</span> <span class="token constant">R</span>
  <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// 解构 Promsie 中的泛型类</span>
<span class="token keyword">const</span> i<span class="token operator">:</span> PromiseDeconstruct<span class="token operator">&lt;</span><span class="token keyword">typeof</span> res<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取函数的类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">FuncParam<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>
  <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span> <span class="token comment">// 声明一个变量以进行解构部分类型</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>
  <span class="token operator">?</span> <span class="token constant">P</span> <span class="token comment">// 这个值其实永远不会到</span>
  <span class="token operator">:</span> <span class="token builtin">never</span>

<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">AddParam</span> <span class="token operator">=</span> FuncParam<span class="token operator">&lt;</span><span class="token keyword">typeof</span> add<span class="token operator">&gt;</span>

<span class="token keyword">const</span> arr<span class="token operator">:</span> AddParam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typeof-获取变量的类型" tabindex="-1"><a class="header-anchor" href="#typeof-获取变量的类型" aria-hidden="true">#</a> typeof 获取变量的类型</h2><p>typeof 在 JS 中原本只是获取变量的类型，而且除了基本类型和 <code>Function</code> 之外，其它的所有类型都会得到 <code>object</code>。而在 TS 种，该关键字的功能得到了增强，它真的变成了可以获取到变量类型，并且参与类型运算了。</p><ul><li><p>如果是 <code>const</code> 声明的基本类型，则会被认为是字面量类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">type</span> <span class="token class-name">CustomString</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> s <span class="token comment">// &#39;&#39;</span>
<span class="token keyword">const</span> str1<span class="token operator">:</span> CustomString <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">const</span> str2<span class="token operator">:</span> CustomString <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span> <span class="token comment">// Type &#39;&quot;1&quot;&#39; is not assignable to type &#39;&quot;&quot;&#39;.ts(2322)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果是 <code>let/var</code> 声明的基本类型变量，则会被正常认为是基本类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">type</span> <span class="token class-name">CustomString</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> s <span class="token comment">// string</span>
<span class="token keyword">const</span> str1<span class="token operator">:</span> CustomString <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">const</span> str2<span class="token operator">:</span> CustomString <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果是对象，则会被认为是对象的真实类型而非 <code>object</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * <span class="token punctuation">{</span>
 *   name: string;
 *   age: number;
 * <span class="token punctuation">}</span>
 */</span>
<span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> user
<span class="token keyword">const</span> user2<span class="token operator">:</span> User <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;rx&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>注：虽然着 TypeScript 的类型运算中是这样的，但实际上使用 <code>console.log(typeof new Date())</code> 打印的还是 <code>object</code> 而非 <code>Date</code>，请记住：<strong>TypeScript 只在编译期生效，运行时所有类型都会被擦除。</strong></p><h2 id="as-const-声明常量" tabindex="-1"><a class="header-anchor" href="#as-const-声明常量" aria-hidden="true">#</a> as const 声明常量</h2><p>使用 <code>as const</code> 可以声明一个变量为常量</p><ul><li><p>基本类型：将之变为字面量类型</p></li><li><p>对象：将之所有的属性变为只读</p></li><li><p>数组：将之变为元组</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">as</span> <span class="token keyword">const</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span> <span class="token keyword">as</span> <span class="token keyword">const</span>
<span class="token keyword">const</span> bool <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token keyword">as</span> <span class="token keyword">const</span>
<span class="token keyword">const</span> tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;rx&#39;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="泛型中指定类型必须拥有某个字段" tabindex="-1"><a class="header-anchor" href="#泛型中指定类型必须拥有某个字段" aria-hidden="true">#</a> 泛型中指定类型必须拥有某个字段</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">treeMap</span><span class="token generic class-name"><span class="token operator">&lt;</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token punctuation">,</span>
  <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">;</span> children<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">C</span><span class="token punctuation">[</span><span class="token string">&#39;children&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>node<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> fn<span class="token operator">:</span> <span class="token punctuation">(</span>t<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> parentPath<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">C</span><span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">R</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态根据对象的值进行过滤-pick-omit-是静态的" tabindex="-1"><a class="header-anchor" href="#动态根据对象的值进行过滤-pick-omit-是静态的" aria-hidden="true">#</a> 动态根据对象的值进行过滤（Pick/Omit 是静态的）</h2>`,30),k={href:"https://github.com/microsoft/TypeScript/issues/23199#issuecomment-379323872",target:"_blank",rel:"noopener noreferrer"},d=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">FilteredKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span>

<span class="token comment">// 过滤所有值不为 object 的字段</span>
<span class="token keyword">type</span> <span class="token class-name">PickObject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> FilteredKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> object<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">S</span></span> <span class="token operator">=</span> PickObject<span class="token operator">&lt;</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
  info<span class="token operator">:</span> <span class="token punctuation">{</span>
    age<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token comment">// { info: { age: []; }; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="node-js-在-typescript-中使用-process-env" tabindex="-1"><a class="header-anchor" href="#node-js-在-typescript-中使用-process-env" aria-hidden="true">#</a> node.js 在 TypeScript 中使用 p<wbr>rocess.env</h2><p>TypeScript 中定义 p<wbr>rocess.env 的类型，默认为 Record&lt;string, string&gt;</p><p>使用以下定义可破</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/@types/environment.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">namespace</span> NodeJS <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">ProcessEnv</span> <span class="token punctuation">{</span>
    <span class="token constant">GITHUB_AUTH_TOKEN</span><span class="token operator">:</span> <span class="token builtin">string</span>
    <span class="token constant">NODE_ENV</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;production&#39;</span>
    <span class="token constant">PORT</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
    <span class="token constant">PWD</span><span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// If this file has no import/export statements (i.e. is a script)</span>
<span class="token comment">// convert it into a module by adding an empty export statement.</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),v={href:"https://stackoverflow.com/questions/45194598/using-process-env-in-typescript",target:"_blank",rel:"noopener noreferrer"},m=e(`<p>如果使用的是 <code>i<wbr>mport.meta.env.NODE_ENV</code> 的写法，则需要修改成下面这样</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/env.d.ts</span>
<span class="token keyword">interface</span> <span class="token class-name">ImportMeta</span> <span class="token punctuation">{</span>
  env<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token constant">NODE_ENV</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;production&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动推断包含一般值与函数的情况" tabindex="-1"><a class="header-anchor" href="#自动推断包含一般值与函数的情况" aria-hidden="true">#</a> 自动推断包含一般值与函数的情况</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">GetValue<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span>
<span class="token keyword">type</span> <span class="token class-name">GetValueType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>
  <span class="token operator">?</span> ReturnType<span class="token operator">&lt;</span>Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;&gt;</span> <span class="token operator">|</span> Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span>
  <span class="token operator">:</span> <span class="token constant">T</span>

<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">f</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  map<span class="token operator">:</span> <span class="token punctuation">[</span>probability<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> GetValueType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>

<span class="token generic-function"><span class="token function">f</span><span class="token generic class-name"><span class="token operator">&lt;</span>GetValue<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// The type is not correctly inferred</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+i+`" alt="1622083980387"></p><p>f 的类型定义修改如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">f</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  map<span class="token operator">:</span> <span class="token punctuation">[</span>probability<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> GetValueType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),b={href:"https://segmentfault.com/q/1010000040072586/a-1020000040073003",target:"_blank",rel:"noopener noreferrer"},y=e(`<h2 id="如何增加新的全局变量" tabindex="-1"><a class="header-anchor" href="#如何增加新的全局变量" aria-hidden="true">#</a> 如何增加新的全局变量</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 这行是必不可少的</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">declare</span> global <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">Global</span> <span class="token punctuation">{</span>
    config<span class="token operator">:</span> MyConfigType
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),g={href:"https://stackoverflow.com/questions/57132428/",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"如何为第三方包定义类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#如何为第三方包定义类型","aria-hidden":"true"},"#"),s(" 如何为第三方包定义类型")],-1),f={href:"https://www.typescriptlang.org/dt/search",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"大致上有三种方式",-1),T=n("li",null,[s("在项目的 "),n("code",null,"src/@types/<module>.d.ts"),s(" 中编写类型定义")],-1),x=n("li",null,[s("在 monorepo 项目中创建 "),n("code",null,"types-<module>"),s(" 模块")],-1),_={href:"https://github.com/DefinitelyTyped/DefinitelyTyped",target:"_blank",rel:"noopener noreferrer"},P=e(`<p>现在只说一下第一、第二种方式，假设我们要为名字为 <code>a</code> 的模块定义类型</p><p>在项目的 <code>src/@types/a.d.ts</code> 中编写类型定义</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// a.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;a&#39;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 注意：import 必须卸载 declare module 内部</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin
<span class="token punctuation">}</span>

<span class="token comment">// 使用</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;a&#39;</span>

<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 monorepo 项目中创建 <code>types-a</code> 模块</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// a.d.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置 package.json 导出</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;types-a&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./a.d.ts&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在需要的模块安装它即可</p><h2 id="强制断言类型" tabindex="-1"><a class="header-anchor" href="#强制断言类型" aria-hidden="true">#</a> 强制断言类型</h2><p>有时候我们知道某些类型应该是什么类型，但 ts 不忍，所以需要绕过去。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Expect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">E</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">E</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">f</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  o<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>
  k<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>args<span class="token operator">:</span> Parameters<span class="token operator">&lt;</span>Expect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Func<span class="token operator">&gt;&gt;</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ReturnType<span class="token operator">&lt;</span>Expect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Func<span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token function">f</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;liuli&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function j(q,E){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("参考："),n("a",k,[s("https://github.com/microsoft/TypeScript/issues/23199#issuecomment-379323872"),t(a)])])]),d,n("p",null,[s("参考: "),n("a",v,[s("https://stackoverflow.com/questions/45194598/using-process-env-in-typescript"),t(a)])]),m,n("blockquote",null,[n("p",null,[s("参考答案："),n("a",b,[s("https://segmentfault.com/q/1010000040072586/a-1020000040073003"),t(a)])])]),y,n("blockquote",null,[n("p",null,[s("参考："),n("a",g,[s("https://stackoverflow.com/questions/57132428/"),t(a)])])]),h,n("p",null,[s("在使用某些 npm 模块时，你可能发现 "),n("a",f,[s("@types/"),t(a)]),s(" 下面并没有社区维护的类型定义，这时候你需要自己维护一个类型定义。")]),w,n("ol",null,[T,x,n("li",null,[s("为社区项目 "),n("a",_,[s("DefinitelyTyped"),t(a)]),s(" 做贡献")])]),P])}const C=p(r,[["render",j],["__file","f1d61494bcdd4cad8f7dbf73c908c884.html.vue"]]);export{C as default};
