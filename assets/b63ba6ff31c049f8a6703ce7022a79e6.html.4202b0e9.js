import{r as t,o as e,c as n,a as s,F as a,b as d,d as r}from"./app.2bd37eb5.js";const o={},i=s("p",null,"记录一些最常用的命令（从上往下使用频率依次降低），当然，这里只是吾辈个人的，其他功能可能暂时还没用到呢",-1),c=d("详细的 git 相关知识强烈推荐 "),l={href:"https://git-scm.com/book/zh",target:"_blank",rel:"noopener noreferrer"},p=d("Pro Git"),u=r('<h2 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令" aria-hidden="true">#</a> 基本命令</h2><table><thead><tr><th>关键词</th><th>命令格式</th><th>命令解释</th><th>命令示例</th><th>命令解释</th></tr></thead><tbody><tr><td>init</td><td><code>git init</code></td><td>为当前目录初始化 git 本地仓库</td><td></td><td></td></tr><tr><td>add</td><td><code>git add [要追踪的文件/路径]</code></td><td>添加到 git 跟踪</td><td><code>git add -A</code></td><td>追踪仓库目录下的所有文件</td></tr><tr><td>commit</td><td><code>git commit [路径] [选项] [提交说明]</code></td><td>提交当前的修改内容</td><td><code>git commit -a -m &quot;提交全部的修改&quot;</code></td><td>提交了全部的修改内容（仍在本机）</td></tr><tr><td>remote</td><td><code>git remote [选项] [远程仓库名]</code></td><td>操作 git 远程仓库</td><td><code>git remote</code></td><td>显示所有远程仓库的别名</td></tr><tr><td></td><td></td><td></td><td><code>git remote add origin https://github.com/rxliuli/rxliuli.github.io.git</code></td><td>为本地仓库关联一个远程仓库</td></tr><tr><td></td><td></td><td></td><td><code>git remote show origin</code></td><td>显示 origin 远程仓库的详细信息</td></tr><tr><td></td><td></td><td></td><td><code>git remote remove origin</code></td><td>删除 origin 远程仓库</td></tr><tr><td>push</td><td><code>git push [远程别名] [远程分支]</code></td><td>推送本地修改到远程</td><td><code>git push origin master</code></td><td>推送本地修改到远程 origin 的 master 分支上</td></tr><tr><td>pull</td><td><code>git pull [远程别名] [远程分支]</code></td><td>拉取远程修改到本地</td><td><code>git pull origin master</code></td><td>拉去远程 origin 上 master 分支的修改到本地</td></tr><tr><td>status</td><td><code>git status</code></td><td>查看本地仓库的状态，以此得知添加和修改的文件</td><td></td><td></td></tr><tr><td>clone</td><td><code>git clone [远程仓库地址]</code></td><td>克隆一个远程仓库到本地，这里和 pull 不同点在于本地不存在要克隆的仓库</td><td><code>git clone https://github.com/rxliuli/rxliuli.github.io.git</code></td><td>克隆吾辈的博客 github 仓库到本地</td></tr><tr><td>log</td><td><code>git log [选项]</code></td><td>查看 git 日志</td><td><code>git log</code></td><td>简单的查看 git commit 历史纪录</td></tr><tr><td>revert</td><td><code>git revert [提交记录 hash]</code></td><td>撤销掉指定提交</td><td><code>git revert ab1c2d2</code></td><td>撤销一次提交内容，然后将撤销的内容作为修改提交一次，保留了所有的记录</td></tr><tr><td>reset</td><td><code>git reset [提交记录 hash]</code></td><td>重置到某次提交上，和上面不一样的是不会添加新的提交记录，而是删除已有的提交记录</td><td><code>git reset ab1c2d2</code></td><td>不会在 log 中留下痕迹</td></tr><tr><td></td><td><code>git reset HEAD~[N 回退次数]</code></td><td>回退最近几次的提交, N 为几就回退几次</td><td><code>git reset HEAD~1</code></td><td>回退最近一次的提交</td></tr><tr><td>branch</td><td><code>git branch [分支]</code></td><td>git 分支(强大而又复杂的功能)</td><td><code>git branch dev</code></td><td>创建 dev 分支</td></tr><tr><td></td><td></td><td></td><td><code>git branch</code></td><td>列出所有分支</td></tr><tr><td></td><td></td><td></td><td><code>git branch dev -D</code></td><td>删除名为 dev 的分支</td></tr><tr><td>checkout</td><td><code>git checkout [分支名]</code></td><td>切换当前分支(分支之间不共享修改)</td><td><code>git checkout master</code></td><td>切换当前分支到 master 分支</td></tr><tr><td></td><td></td><td></td><td><code>git checkout origin/dev -b dev</code></td><td>拉取远程分支到本地并切换</td></tr><tr><td>merge</td><td><code>git merge [选项]</code></td><td>合并其他分支的修改到当前分支上</td><td><code>git merge dev</code></td><td>合并 dev 分支的修改到当前分支(一般是 master 分支)</td></tr><tr><td></td><td></td><td></td><td><code>git merge origin/master --allow-unrelated-histories</code></td><td>强行合并远程分支到本地</td></tr><tr><td>push</td><td><code>git push [远程仓库名] :[分支名]</code></td><td>删除掉指定的远程分支（仓库还在，只是删除分支）</td><td><code>git push origin :dev</code></td><td>删除远程仓库 origin 下的 dev 开发分支</td></tr><tr><td>stash</td><td><code>git stash</code></td><td>暂存本地更改</td><td></td><td></td></tr><tr><td></td><td><code>git stash list</code></td><td>查看所有暂存更改</td><td></td><td></td></tr><tr><td></td><td><code>git stash apply [index]</code></td><td>重新应用指定暂存更改</td><td><code>git stash apply</code></td><td>重新应用最新的暂存更改</td></tr><tr><td></td><td><code>git stash drop [index]</code></td><td>删除掉指定的暂存更改</td><td><code>git stash drop</code></td><td>删除掉最新的暂存更改</td></tr></tbody></table><h2 id="复合命令" tabindex="-1"><a class="header-anchor" href="#复合命令" aria-hidden="true">#</a> 复合命令</h2><h3 id="撤销掉本地所有的修改" tabindex="-1"><a class="header-anchor" href="#撤销掉本地所有的修改" aria-hidden="true">#</a> 撤销掉本地所有的修改</h3><p>命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> -A <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> stash <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> stash drop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>解释</p><ol><li>添加所有更改到 git 追踪中（如果没有被忽略的话）</li><li>添加所有本地更改到暂存区域中</li><li>删除掉刚添加的最新暂存更改</li></ol><p>应用场景修改了一些文件但又没有提交，突然发现有问题，想把它们全删除了重来，或者全部回到上次提交，先把这些修改暂存起来（不加最后一条命令）</p><h3 id="区分文件名大小写" tabindex="-1"><a class="header-anchor" href="#区分文件名大小写" aria-hidden="true">#</a> 区分文件名大小写</h3><p>命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> config core.ignorecase <span class="token boolean">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>解释 Windows 下默认不区分文件名大小写，所以需要特别设置一下。</p><h3 id="git-push-强制推送" tabindex="-1"><a class="header-anchor" href="#git-push-强制推送" aria-hidden="true">#</a> git push 强制推送</h3><p>命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> push -f\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>解释</p><p>强制推送到远程分支，即便是远程包含本地不存在的提交</p><h3 id="忽略已经跟踪的文件的提交" tabindex="-1"><a class="header-anchor" href="#忽略已经跟踪的文件的提交" aria-hidden="true">#</a> 忽略已经跟踪的文件的提交</h3>',19),g=d("参考："),h={href:"https://ruby-china.org/topics/17948",target:"_blank",rel:"noopener noreferrer"},b=d("怎样让 Git 忽略当前已经更改的文件"),m=r('<p>忽略修改</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> update-index --assume-unchanged <span class="token operator">&lt;</span>files<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>取消这种设定</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> update-index --no-assume-unchanged <span class="token operator">&lt;</span>files<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="从远端拉取分支" tabindex="-1"><a class="header-anchor" href="#从远端拉取分支" aria-hidden="true">#</a> 从远端拉取分支</h3>',5),k=d("参考："),v={href:"https://www.cnblogs.com/phpper/p/7136048.html",target:"_blank",rel:"noopener noreferrer"},f=d("git 获取远程服务器的指定分支"),x=r('<p>命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>本地分支名<span class="token punctuation">(</span>不存在<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>远程分支名<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>示例</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout -b dev origin/dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="忽略已提交的文件修改" tabindex="-1"><a class="header-anchor" href="#忽略已提交的文件修改" aria-hidden="true">#</a> 忽略已提交的文件修改</h3>',5),_=d("参考："),q={href:"https://www.jianshu.com/p/e5b13480479b",target:"_blank",rel:"noopener noreferrer"},w=d("git 如何忽略已经提交的文件 (.gitignore 文件无效)"),j=r('<p>主要用于忽略一些本地修改的文件但又不希望提交，同时也不希望添加到 .gitignore 中将之从云端排除的方式。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> update-index --assume-unchanged <span class="token punctuation">[</span>file-pattern<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="git-删除远程-tag" tabindex="-1"><a class="header-anchor" href="#git-删除远程-tag" aria-hidden="true">#</a> git 删除远程 tag</h3><p>显示本地 tag</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> tag\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>删除本地 tag</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> tag -d Remote_Systems_Operation\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>用 push, 删除远程 tag</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> push origin :refs/tags/Remote_Systems_Operation\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>删除远程分支</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch -r -d origin/branch-name\n<span class="token function">git</span> push origin :branch-name\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="两个-git-仓库合并" tabindex="-1"><a class="header-anchor" href="#两个-git-仓库合并" aria-hidden="true">#</a> 两个 git 仓库合并</h3>',12),R=d("现在有两个仓库 "),y={href:"https://github.com/kktjs/kkt.git",target:"_blank",rel:"noopener noreferrer"},A=d("kktjs/kkt"),I=d(" 和 "),E={href:"https://github.com/kktjs/kkt-next.git",target:"_blank",rel:"noopener noreferrer"},O=d("kktjs/kkt-next"),Y=d(" 我们需要将 "),D=s("code",null,"kkt-next",-1),N=d(" 仓库合并到 "),S=s("code",null,"kkt",-1),B=d(" 并保留 "),F=s("code",null,"kkt-next",-1),L=d(" 的所有提交内容。"),U=r('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 1. 克隆主仓库代码</span>\n<span class="token function">git</span> clone git@github.com:kktjs/kkt.git\n\n<span class="token comment"># 2. 将 kkt-next 作为远程仓库，添加到 kkt 中，设置别名为 other</span>\n<span class="token function">git</span> remote <span class="token function">add</span> other git@github.com:kktjs/kkt-next.git\n\n<span class="token comment"># 3. 从 kkt-next 仓库中拉取数据到本仓库</span>\n<span class="token function">git</span> fetch other\n\n<span class="token comment"># 4. 将 kkt-next 仓库拉取的 master 分支作为新分支 checkout 到本地，新分支名设定为 dev</span>\n<span class="token function">git</span> checkout -b dev other/master\n\n<span class="token comment"># 5. 切换回 kkt 的 master 分支</span>\n<span class="token function">git</span> checkout master\n\n<span class="token comment"># 6. 将 dev 合并入 kkt 的 master 分支</span>\n<span class="token function">git</span> merge dev\n\n<span class="token comment"># 如果第 6 步报错 `fatal: refusing to merge unrelated histories`</span>\n<span class="token comment"># 请执行下面命令 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span>\n<span class="token function">git</span> merge dev --allow-unrelated-histories\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><blockquote><p>JetBrains IDE 提供了非常好用的冲突合并工具</p></blockquote><p>在合并时有可能两个分支对同一个文件都做了修改，这时需要解决冲突，对文本文件来说很简单，根据需要对冲突的位置进行处理就可以。对于二进制文件，需要用到如下命令:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout --theirs YOUR_BINARY_FILES     <span class="token comment"># 保留需要合并进来的分支的修改</span>\n<span class="token function">git</span> checkout --ours YOUR_BINARY_FILES       <span class="token comment"># 保留自己的修改</span>\n<span class="token function">git</span> <span class="token function">add</span> YOUR_BINARY_FILES\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',4),G=d("参考: "),H={href:"https://segmentfault.com/a/1190000021919753",target:"_blank",rel:"noopener noreferrer"},z=d("https://segmentfault.com/a/1190000021919753"),J=s("h3",{id:"在-git-目录中忽略-git-子模块的所有变更",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#在-git-目录中忽略-git-子模块的所有变更","aria-hidden":"true"},"#"),d(" 在 git 目录中忽略 git 子模块的所有变更")],-1),P=d("参考 "),W={href:"https://git-scm.com/docs/gitmodules#Documentation/gitmodules.txt-submoduleltnamegtignore",target:"_blank",rel:"noopener noreferrer"},C=d("git submodule"),K=r('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># .gitmodules</span>\n<span class="token punctuation">[</span>submodule <span class="token string">&quot;examples/blog-hexo-example/themes/next&quot;</span><span class="token punctuation">]</span>\n  path <span class="token operator">=</span> examples/blog-hexo-example/themes/next\n  url <span class="token operator">=</span> https://github.com/theme-next/hexo-theme-next\n  ignore <span class="token operator">=</span> all\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',1);o.render=function(d,r){const o=t("OutboundLink");return e(),n(a,null,[i,s("blockquote",null,[s("p",null,[c,s("a",l,[p,s(o)])])]),u,s("blockquote",null,[s("p",null,[g,s("a",h,[b,s(o)])])]),m,s("blockquote",null,[s("p",null,[k,s("a",v,[f,s(o)])])]),x,s("blockquote",null,[s("p",null,[_,s("a",q,[w,s(o)])])]),j,s("p",null,[R,s("a",y,[A,s(o)]),I,s("a",E,[O,s(o)]),Y,D,N,S,B,F,L]),U,s("blockquote",null,[s("p",null,[G,s("a",H,[z,s(o)])])]),J,s("blockquote",null,[s("p",null,[P,s("a",W,[C,s(o)])])]),K],64)};export{o as default};
