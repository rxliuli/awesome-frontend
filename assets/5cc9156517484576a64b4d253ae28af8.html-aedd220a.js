import{_ as o,M as p,p as c,q as l,Q as i,R as n,t as s,N as e,a1 as t}from"./framework-96b046e1.js";const r="/assets/4bdfd0cdf55c4e098b1f5b3a92fb7947-e460e93c.png",d="/assets/d2a07efc8ff24354b49289c2d4210b79-093240b2.gif",u={},k=n("h2",{id:"使用-react-devtool-插件调试",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用-react-devtool-插件调试","aria-hidden":"true"},"#"),s(" 使用 react devtool 插件调试")],-1),v=n("p",null,"前言",-1),m=n("p",null,"虽然绝大多数时候，我们都可以也应该在浏览器调试渲染层的功能，但确实也会有需要在 electron 程序中调试的需求，这里就说明一下 electron 如何安装 chrome 插件 react devtool 调试项目。",-1),b={href:"https://www.npmjs.com/package/electron-devtools-installer",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>步骤</p><p>1、安装依赖</p><p>cd 到 <em>apps/main</em> 目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> electron-devtools-installer @types/electron-devtools-installer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、添加环境变量 <code>&quot;NODE_ENV&quot;: &quot;development&quot;</code> 标识为开发环境</p><p>修改 <em>.env-cmdrc.json</em> 配置文件</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;NODE_ENV&quot;</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;ELECTRON_START_URL&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:3000/&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、修改 <code>main</code> 函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  app<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 安装 devtool 扩展</span>
      <span class="token keyword">await</span> <span class="token function">installExtension</span><span class="token punctuation">(</span><span class="token constant">REACT_DEVELOPER_TOOLS</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">await</span> <span class="token function">createMainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、修改 <code>createMainWindow</code> 函数</p><p>一般，我们在开发环境还习惯打开控制台，这里也可以在创建窗口后自动打开它。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createMainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建新的 electron 窗口</span>
  <span class="token keyword">const</span> mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 载入生产环境的 url</span>
  <span class="token keyword">await</span> mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>
    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ELECTRON_START_URL</span> <span class="token operator">||</span>
      path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./build/index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mainWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">openDevTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可能的错误参考: <a href="/p/c68829779f5449d0afe0e67806dc7fc1">常见问题</a> <strong>安装浏览器扩展报错</strong></p></blockquote><p>5、启动 electron 开发环境</p><p>启动后可以看到自动打开了控制台，然后可以看到 react devtool</p><p><img src="`+r+'" alt="实际效果"></p><h2 id="让主进程的代码也能热更新" tabindex="-1"><a class="header-anchor" href="#让主进程的代码也能热更新" aria-hidden="true">#</a> 让主进程的代码也能热更新</h2><p>前言</p><p>可能你也发现了，渲染层使用 cra 创建的项目默认包含了热更新，这都要得益于 webpack HMR 技术，但主进程并非如此，即便使用 <code>tsc -w</code> 监听并编译 ts 代码，但想要生效仍然需要重启 electron，不厌其烦。幸运的是，有人已经实现了这个需求。</p>',19),g={href:"https://www.npmjs.com/package/electron-reloader",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>1、安装依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> electron-reloader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、在主进程入口文件载入 electron-reloader</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//添加热更新功能</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron-reloader&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、启动 electron 开发环境</p><p><img src="`+d+'" alt="效果"></p>',6),f={href:"https://www.npmjs.com/package/electron-reload",target:"_blank",rel:"noopener noreferrer"},q=t(`<h2 id="使用-esbuild-优化渲染层打包性能" tabindex="-1"><a class="header-anchor" href="#使用-esbuild-优化渲染层打包性能" aria-hidden="true">#</a> 使用 esbuild 优化渲染层打包性能</h2><blockquote><p>如果你还没有感觉到 cra 打包很慢，可以跳过这一节。</p></blockquote><h3 id="禁止-ts-babel-将代码编译为-es5" tabindex="-1"><a class="header-anchor" href="#禁止-ts-babel-将代码编译为-es5" aria-hidden="true">#</a> 禁止 ts/babel 将代码编译为 ES5</h3><p>由于 electron 捆绑的浏览器和 nodejs 版本都比较新，所以实际上渲染层我们基本不需要 babel 转义，可以优化一些配置项。</p><ul><li><p>将 <code>browserslist</code> 设置为仅支持最后一个 chrome 版本</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;browserslist&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;last 1 chrome version&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改 <em>tsconfig.json</em> 中的配置，将编译目标修改为 <code>ESNext</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNext&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="使用-esbuild-编译-typescript-代码" tabindex="-1"><a class="header-anchor" href="#使用-esbuild-编译-typescript-代码" aria-hidden="true">#</a> 使用 esbuild 编译 typescript 代码</h3>`,6),y={href:"https://github.com/evanw/esbuild",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/gsoft-inc/craco",target:"_blank",rel:"noopener noreferrer"},E=t(`<p>esbuild 是一个使用 golang 编写前端打包工具，官方在性能测试中提出比现有工具快 10-100 倍。</p><p>在 cra 创建的项目中，我们可以通过 craco 将 esbuild 仅用作 ts 编译之用（不会检查类型）。</p><p>1、安装依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> @craco/craco craco-esbuild
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、修改 npm script，使用 <code>craco</code> 替换 <code>react-scripts</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;craco start&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build:cra&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react-scripts build&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;craco build&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;craco test&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生产项目中的对比测试结果（6000+ 行 ts 代码）</p><table><thead><tr><th>分类</th><th>ESBuild</th><th>tsc</th></tr></thead><tbody><tr><td>无缓存</td><td>17.61</td><td>36.57</td></tr><tr><td>有缓存（运行 5 次）</td><td>15252.8</td><td>17095.2</td></tr></tbody></table>`,8);function x(N,j){const a=p("ExternalLinkIcon");return c(),l("div",null,[k,i(" TODO 需要将这两个函数抽离成静态工具类 "),v,m,n("blockquote",null,[n("p",null,[s("核心依赖: "),n("a",b,[s("electron-devtools-installer"),e(a)])])]),h,n("blockquote",null,[n("p",null,[s("核心依赖: "),n("a",g,[s("electron-reloader"),e(a)])])]),_,n("blockquote",null,[n("p",null,[s("注 2: 当修改代码时，重启 electron 应用是由 electron-reloader 负责，即它不在 WebStorm 的控制之下了。 注 2: 目前另一个 "),n("a",f,[s("electron-reload"),e(a)]),s(" 还存在一些小问题。")])]),q,n("blockquote",null,[n("p",null,[s("核心依赖: "),n("a",y,[s("esbuild"),e(a)]),s(", "),n("a",w,[s("craco"),e(a)])])]),E])}const D=o(u,[["render",x],["__file","5cc9156517484576a64b4d253ae28af8.html.vue"]]);export{D as default};
