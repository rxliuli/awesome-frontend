import{_ as s,M as a,p as n,q as l,R as t,t as e,N as r,a1 as i}from"./framework-96b046e1.js";const h={},o=t("h2",{id:"推荐-rimraf",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#推荐-rimraf","aria-hidden":"true"},"#"),e(" [推荐] rimraf")],-1),c=t("p",null,"2021-11-20",-1),p=t("p",null,[e("删除任何东西的 cli，支持 glob 模式，例如 "),t("code",null,"rimraf **/node_modules"),e("。")],-1),b={href:"https://www.npmtrends.com/del-cli-vs-rimraf-vs-trash-cli",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.npmjs.com/package/@liuli-util/shell",target:"_blank",rel:"noopener noreferrer"},u=i(`<h2 id="推荐-tsx" tabindex="-1"><a class="header-anchor" href="#推荐-tsx" aria-hidden="true">#</a> [推荐] tsx</h2><p>2022-08-26</p><p>基于 esbuild 的 node 运行时，支持直接运行 esm/cjs 的 js/ts 代码，非常适合测试 cli。</p><table><thead><tr><th>对比</th><th>tsx</th><th>esno</th><th>node</th><th>ts-node</th></tr></thead><tbody><tr><td>速度</td><td>快</td><td>快</td><td>快</td><td>较慢（类型检查）</td></tr><tr><td>支持 ts</td><td>是</td><td>是</td><td>否</td><td>是</td></tr><tr><td>支持 esm/cjs</td><td>是</td><td>是</td><td>是</td><td>否</td></tr><tr><td>开发者</td><td>esbuild 官方</td><td>esbuild 社区</td><td>nodejs</td><td>ts 社区</td></tr></tbody></table><h2 id="推荐-live-server" tabindex="-1"><a class="header-anchor" href="#推荐-live-server" aria-hidden="true">#</a> [推荐] live-server</h2><p>2021-11-20</p><p>一个支持热更新的简单的 nodejs http 静态服务器。</p><p>可以使用以下方式简单的将指定目录或文件作为静态服务器，默认为当前目录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 指定目录</span>
live-server dist/
<span class="token comment"># 指定文件</span>
live-server src/index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>对比</th><th>live-server</th><th>http-server</th></tr></thead><tbody><tr><td>热更新</td><td>是</td><td>否</td></tr><tr><td>css 热更新</td><td>是</td><td>否</td></tr><tr><td>跨域访问</td><td>是</td><td>是</td></tr><tr><td>维护</td><td>否</td><td>是</td></tr></tbody></table><h2 id="测试-kill-port" tabindex="-1"><a class="header-anchor" href="#测试-kill-port" aria-hidden="true">#</a> [测试] kill-port</h2><p>可以关闭占用指定端口的程序，在开发中有时会遇到这种问题。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kill-port <span class="token number">3000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="不推荐-esno" tabindex="-1"><a class="header-anchor" href="#不推荐-esno" aria-hidden="true">#</a> [不推荐] esno</h2><p>2021-11-20</p><p>基于 esbuild 的 node 运行时，支持直接运行 esm/cjs 的 js/ts 代码，非常适合测试 cli。</p><table><thead><tr><th>对比</th><th>esno</th><th>node</th><th>ts-node</th></tr></thead><tbody><tr><td>速度</td><td>快</td><td>快</td><td>较慢（类型检查）</td></tr><tr><td>支持 ts</td><td>是</td><td>否</td><td>是</td></tr><tr><td>支持 esm/cjs 混合</td><td>是</td><td>否</td><td>否</td></tr></tbody></table>`,17);function v(_,f){const d=a("ExternalLinkIcon");return n(),l("div",null,[o,c,p,t("blockquote",null,[t("p",null,[e("同类型的工具很多，但 rimraf 是最流行的，参考 "),t("a",b,[e("del-cli vs rimraf vs trash-cli"),r(d)]),e(" 吾辈曾经写过类似的 cli "),t("a",m,[e("@liuli-util/shell"),r(d)]),e("，但实际使用中发现大多数时候都只需要删除罢了，其他操作更多是作为插件集成到构建工具中。")])]),u])}const k=s(h,[["render",v],["__file","b39ddde71e3f489a9e4c9f5591815b27.html.vue"]]);export{k as default};
