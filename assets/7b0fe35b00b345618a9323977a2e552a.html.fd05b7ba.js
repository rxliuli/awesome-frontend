import{r as e,o as n,c as a,a as s,F as l,b as p,d as t}from"./app.ba20e0a6.js";const o={},r=s("h2",{id:"场景",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#场景","aria-hidden":"true"},"#"),p(" 场景")],-1),i={href:"https://www.npmjs.com/package/gh-pages",target:"_blank",rel:"noopener noreferrer"},c=p("gh-pages"),u=t('<p>之前就有在使用 gh-pages 这个库，但由于名字并未想到它如此强大，甚至支持发布代码到任意 git 仓库。换言之，它可以将任意本地文件发布到远端 git 仓库，而不需要自己处理各种乱七八糟的问题。</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><p>首先说一下我们之前前后端分离项目的发布流程</p><ol><li>修改打包的 webpack 脚本以支持引用 cdn 上的资源（本质上是修改路径）</li><li>打包静态资源文件</li><li>找到前端静态资源发布项目，切换到指定分支</li><li>复制静态资源到特定目录</li><li><code>git commit &amp;&amp; git push</code></li><li>如果要发布 cdn 则再次对 cdn 仓库同样如此操作</li><li>通知后端发布生产环境，进行验证</li></ol><p>这其中涉及到几个重要痛点</p>',5),d=p("修改 webpack 配置，它极高的复杂度甚至产生了 "),h={href:"https://www.zhihu.com/question/267908710",target:"_blank",rel:"noopener noreferrer"},g=p("webpack 配置工程师"),b=p(" 这一职业岗位。"),k=s("li",null,"处理文件复制提交 git 信息，有可能操作错误，每次发布生产都是一次心理上的考验",-1),m=s("li",null,"发布失败难以快速解决，重新发布又需要手动再走一遍流程，所以有了我之前说过的发布一次要半个钟的事实",-1),f=s("h2",{id:"解决",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#解决","aria-hidden":"true"},"#"),p(" 解决")],-1),q=s("p",null,[p("不难看出，这本质上还是因为发布没有自动化带来的问题。但是，在 DevOps 还不存在的情况下，gh-pages 能够自动化下面的两步，同时，像 "),s("code",null,"create-react-app/vue-cli"),p(" 这种基于 webpack 进行高层次封装的工具提供了 "),s("code",null,"PUBLIC_PATH"),p(" 的概念，能够通过环境变量指定 "),s("code",null,"index.html"),p(" 入口引用的其他静态资源的基本路径，即便不去碰 webpack 也可以处理第一个问题了。")],-1),w={href:"https://create-react-app.dev/docs/using-the-public-folder/",target:"_blank",rel:"noopener noreferrer"},y=p("react"),v=p(", "),_={href:"https://cli.vuejs.org/zh/config/#publicpath",target:"_blank",rel:"noopener noreferrer"},x=p("vue"),j=t('<p>大致过程如下</p><ol><li><p>在项目中添加依赖 <code>yarn add -D env-cmd gh-pages</code></p></li><li><p>在打包生产环境的资源时指定环境变量 <code>PUBLIC_URL=[cdn 发布后的远端基本路径]</code></p></li><li><p>添加发布 script 命令</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;deploy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yarn build:prod &amp;&amp; yarn deploy:cdn &amp;&amp; yarn deploy:publish&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;deploy:publish&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gh-pages -d [本地目录] -e [远端 git 目录] -r [远端 git 地址] -b [远端 git 分支]&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;deploy:cdn&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gh-pages -d [本地目录] -e [远端 git 目录] -r [远端 git 地址] -b [远端 git 分支]&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ol><p>现在，发布生产环境只需要两个步骤</p><ol><li>运行 <code>deploy</code> 命令</li><li>通知后端发布 cdn/静态资源目录</li></ol><p>虽然仍未能解决前后端不分离的项目，但，至少解决了所有新项目的发布问题了，不是么？</p>',5),L=p("这里有一个项目已经如此实现，可以进行参考："),P={href:"https://git.code.tencent.com/bingli_front/website-static",target:"_blank",rel:"noopener noreferrer"},U=p("website-static"),z=s("h2",{id:"总结",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),p(" 总结")],-1),B=s("p",null,"还是需要擅用工具，如果能够掌握更好的工具，效率的提高和自己的痛苦程度都能有极大的改善！",-1);o.render=function(p,t){const o=e("OutboundLink");return n(),a(l,null,[r,s("blockquote",null,[s("p",null,[s("a",i,[c,s(o)])])]),u,s("ol",null,[s("li",null,[d,s("a",h,[g,s(o)]),b]),k,m]),f,q,s("blockquote",null,[s("p",null,[s("a",w,[y,s(o)]),v,s("a",_,[x,s(o)])])]),j,s("blockquote",null,[s("p",null,[L,s("a",P,[U,s(o)])])]),z,B],64)};export{o as default};
