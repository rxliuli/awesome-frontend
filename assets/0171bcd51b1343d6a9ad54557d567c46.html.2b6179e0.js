import{r as o,o as e,c,a as n,d as p,F as l,e as t,b as s}from"./app.23916856.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const u={},i=t(`<h2 id="\u573A\u666F" tabindex="-1"><a class="header-anchor" href="#\u573A\u666F" aria-hidden="true">#</a> \u573A\u666F</h2><p>\u7531\u4E8E\u9700\u8981\u505A\u4E00\u4E9B CPU \u5BC6\u96C6\u578B\u7684\u8BA1\u7B97\uFF0C\u4E3A\u4E86\u4F18\u5316\u6027\u80FD\uFF0C\u543E\u8F88\u5F00\u59CB\u5C1D\u8BD5\u4F7F\u7528 worker \u5C06\u8BA1\u7B97\u4EFB\u52A1\u653E\u5230\u5176\u5B83\u7EBF\u7A0B\uFF08\u4E3B\u8981\u8FD8\u662F\u4E3A\u4E86\u907F\u514D\u4E3B\u7EBF\u7A0B\u5361\u6B7B\uFF09\u3002</p><p>\u4E3B\u8981\u573A\u666F\u5305\u62EC</p><ul><li>\u6D4F\u89C8\u5668\u4E0A\u7684 <code>WebWorker/SharedWorker</code>\uFF1A\u5904\u7406\u97F3\u9891\u6570\u636E</li><li>nodejs \u4E2D\u7684 <code>worker_threads</code>\uFF1A\u89E3\u6790 md/ts ast \u7136\u540E\u5904\u7406</li></ul><blockquote><p>\u4E3A\u4EC0\u4E48\u4E0D\u7528 wasm\uFF1F-- \u4E3B\u8981\u662F\u7531\u4E8E\u5B83\u9700\u8981\u4ECE\u96F6\u5F00\u59CB\u7F16\u5199\u76F8\u5173\u7684\u4EE3\u7801\uFF0C\u800C\u975E\u53EF\u4EE5\u76F4\u63A5\u5BF9\u73B0\u6709\u7684 js \u4EE3\u7801\u7A0D\u5FAE\u4FEE\u6539\u4FBF\u80FD\u63D0\u9AD8\u6027\u80FD\u3002</p></blockquote><h2 id="\u6D4F\u89C8\u5668" tabindex="-1"><a class="header-anchor" href="#\u6D4F\u89C8\u5668" aria-hidden="true">#</a> \u6D4F\u89C8\u5668</h2><blockquote><p>\u76EE\u524D vite \u5BF9\u6B64\u9ED8\u8BA4\u652F\u6301\u6D4F\u89C8\u5668 worker\uFF0C\u4E0D\u518D\u9700\u8981\u4EFB\u4F55\u914D\u7F6E\uFF0C\u4EC5\u4F7F\u7528 comlink \u7B80\u5316\u4F7F\u7528\u4F53\u9A8C\u5373\u53EF\u3002</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// hello.worker.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> expose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;comlink&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">expose</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./hello.worker&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> HelloWorker <span class="token keyword">from</span> <span class="token string">&quot;./hello.worker?worker&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> wrap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;comlink&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> asyncHello <span class="token operator">=</span> <span class="token generic-function"><span class="token function">wrap</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">typeof</span> hello<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncHello</span><span class="token punctuation">(</span><span class="token string">&quot;liuli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="nodejs" tabindex="-1"><a class="header-anchor" href="#nodejs" aria-hidden="true">#</a> nodejs</h2><h3 id="nodejs-\u672C\u8EAB\u63D0\u4F9B\u7684\u89E3\u51B3\u65B9\u6848" tabindex="-1"><a class="header-anchor" href="#nodejs-\u672C\u8EAB\u63D0\u4F9B\u7684\u89E3\u51B3\u65B9\u6848" aria-hidden="true">#</a> nodejs \u672C\u8EAB\u63D0\u4F9B\u7684\u89E3\u51B3\u65B9\u6848</h3><p>nodejs \u4ECD\u7136\u50CF\u6D4F\u89C8\u5668\u4E00\u6837\u57FA\u4E8E\u6587\u4EF6\u7CFB\u7EDF\u4F7F\u7528 worker_threads\uFF0C\u4F46\u5B98\u65B9\u786E\u5B9E\u63D0\u4F9B\u4E86\u4E00\u79CD\u6709\u8DA3\u7684\u89E3\u51B3\u65B9\u6848 -- \u5728\u540C\u4E00\u4E2A\u6587\u4EF6\u4E2D\u5305\u542B\u4E3B\u7EBF\u7A0B\u4E0E worker \u7EBF\u7A0B\u7684\u4EE3\u7801\uFF0C\u7136\u540E\u5728\u5176\u4E2D\u4F7F\u7528\u903B\u8F91\u5224\u65AD\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// worker.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isMainThread<span class="token punctuation">,</span> parentPort<span class="token punctuation">,</span> Worker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;worker_threads&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> expose<span class="token punctuation">,</span> wrap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;comlink&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> nodeEndpoint <span class="token keyword">from</span> <span class="token string">&quot;comlink/dist/umd/node-adapter&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> wait <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@liuli-util/async&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> worker <span class="token keyword">as</span> helloType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./worker&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">_hello</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> helloWorker <span class="token operator">=</span> <span class="token generic-function"><span class="token function">wrap</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">typeof</span> helloType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">nodeEndpoint</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">helloWorker</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      worker<span class="token punctuation">.</span><span class="token function">unref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  hello <span class="token operator">=</span> _hello<span class="token punctuation">;</span>
  <span class="token function">expose</span><span class="token punctuation">(</span>_hello<span class="token punctuation">,</span> <span class="token function">nodeEndpoint</span><span class="token punctuation">(</span>parentPort<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> hello <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">mixingThreadHello</span><span class="token punctuation">(</span><span class="token string">&quot;liuli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u770B\u8D77\u6765\u5F88\u7B80\u6D01\uFF0C\u4F46\u8FD9\u79CD\u65B9\u6848\u4E5F\u5E76\u975E\u5C3D\u5584\u5C3D\u7F8E\uFF0C\u543E\u8F88\u5B9E\u9645\u4F7F\u7528\u65F6\u53D1\u73B0\u4EE5\u4E0B\u95EE\u9898</p>`,15),k=n("li",null,"\u4E0D\u652F\u6301\u5F00\u53D1\u73AF\u5883\u6D4B\u8BD5 ts \u4EE3\u7801\uFF0C\u5FC5\u987B\u7F16\u8BD1\u4E3A js \u624D\u80FD\u8FD0\u884C",-1),d=s("\u7531\u4E8E\u57FA\u4E8E\u6587\u4EF6\u7CFB\u7EDF\uFF0C\u6240\u4EE5\u6253\u5305\u9700\u8981\u624B\u52A8\u5206\u5757\uFF0C\u6216\u8005\u4E0D\u8FDB\u884C\u6253\u5305 rollup \u53C2\u8003 "),b={href:"https://rollupjs.org/guide/en/#outputmanualchunks",target:"_blank",rel:"noopener noreferrer"},m=s("output.manualChunks"),w=s("\u53C2\u8003\uFF1A"),h={href:"https://nodejs.org/api/worker_threads.html#worker_threads_class_worker",target:"_blank",rel:"noopener noreferrer"},g=s("nodejs Worker"),y=t('<h3 id="\u4F7F\u7528\u6253\u5305\u5DE5\u5177\u5904\u7406\u7684\u8C03\u7814\u65B9\u6848" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u6253\u5305\u5DE5\u5177\u5904\u7406\u7684\u8C03\u7814\u65B9\u6848" aria-hidden="true">#</a> \u4F7F\u7528\u6253\u5305\u5DE5\u5177\u5904\u7406\u7684\u8C03\u7814\u65B9\u6848</h3><ul><li>rollup-plugin-web-worker-loader <ul><li>\u9ED8\u8BA4\u4E0D\u4F1A\u5904\u7406 ts \u6587\u4EF6</li><li>worker \u4E2D\u5305\u542B\u4F9D\u8D56\u65F6\u4E0D\u4F1A\u6253\u5305</li></ul></li><li>rollup-plugin-worker-factory <ul><li>\u6CA1\u6709\u770B\u5230 ts \u7684\u793A\u4F8B</li><li>\u9ED8\u8BA4\u4F1A\u4FEE\u6539 Worker</li></ul></li><li>@surma/rollup-plugin-off-main-thread <ul><li>\u6CA1\u6709\u770B\u5230 ts \u7684\u793A\u4F8B</li></ul></li></ul><p>\u76EE\u524D\u6CA1\u6709\u627E\u5230\u6EE1\u610F\u7684\u63D2\u4EF6\uFF0C\u540E\u7EED\u53EF\u80FD\u4E0D\u5F97\u4E0D\u5199\u4E00\u4E2A rollup \u63D2\u4EF6\u3002\u8FD8\u662F\u90A3\u53E5\u8BDD\uFF0C\u6CA1\u6709\u5BF9\u6BD4\u5C31\u6CA1\u6709\u4F24\u5BB3\uFF0C\u5982\u679C\u6CA1\u6709 vite \u5BF9 ts+worker \u7684\u826F\u597D\u652F\u6301\uFF0C\u6216\u8BB8\u543E\u8F88\u8FD8\u80FD\u5FCD\u53D7\u8FD9\u79CD\u7CDF\u7CD5\u7684\u5F00\u53D1\u4F53\u9A8C\u3002</p>',3),f=s("\u5C1D\u8BD5\u7F16\u5199 rollup \u63D2\u4EF6 "),_={href:"https://github.com/rxliuli/liuli-tools/tree/master/libs/rollup-plugin-worker-threads",target:"_blank",rel:"noopener noreferrer"},q=s("rollup-plugin-worker-threads"),x=s("\uFF0C\u4EE5\u5728 nodejs \u4E2D\u5BF9 "),v=n("code",null,"worker_threads",-1),W=s(" \u63D0\u4F9B\u7C7B\u4F3C vite \u7684\u5F00\u53D1\u4F53\u9A8C\u3002"),j=t(`<p>\u5927\u81F4\u4F7F\u7528\u65B9\u5F0F\u5982\u4E0B</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/util/wrapWorkerFunc.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> expose<span class="token punctuation">,</span> Remote<span class="token punctuation">,</span> wrap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;comlink&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isMainThread<span class="token punctuation">,</span> parentPort<span class="token punctuation">,</span> Worker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;worker_threads&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> nodeEndpoint <span class="token keyword">from</span> <span class="token string">&quot;comlink/dist/umd/node-adapter&quot;</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * \u5305\u88C5\u9700\u8981\u653E\u5230 worker \u4E2D\u6267\u884C\u7684\u51FD\u6570
 * 1. \u5F53\u68C0\u67E5\u5230\u5F53\u524D\u6587\u4EF6\u4E0D\u662F js \u6587\u4EF6\u65F6\u4F1A\u76F4\u63A5\u8FD4\u56DE\u51FD\u6570
 * 2. \u5F53\u68C0\u67E5\u5230\u5728\u4E3B\u7EBF\u7A0B\u65F6\u6267\u884C\u65F6\uFF0C\u4F7F\u7528 Worker \u5305\u88C5\u5E76\u6267\u884C\u5B83
 * 3. \u5F53\u68C0\u67E5\u5230\u5728 Worker \u7EBF\u7A0B\u65F6\uFF0C\u4F7F\u7528 expose \u5305\u88C5\u5B83\u7136\u540E\u6267\u884C
 * \u6CE8\uFF1A\u76EE\u524D\u662F\u6BCF\u6B21\u90FD\u521B\u5EFA\u65B0\u7684 Worker\uFF0C\u4E5F\u8BB8\u53EF\u4EE5\u8003\u8651\u652F\u6301\u590D\u7528 Worker
 * <span class="token keyword">@param</span> <span class="token parameter">ep</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> wrapWorkerFunc<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  ep<span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Remote<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&quot;.js&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ep <span class="token keyword">as</span> Remote<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token generic-function"><span class="token function">wrap</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">nodeEndpoint</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> worker<span class="token punctuation">.</span><span class="token function">unref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Remote<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">expose</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> <span class="token function">nodeEndpoint</span><span class="token punctuation">(</span>parentPort<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ep <span class="token keyword">as</span> Remote<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/hello.worker.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> wait <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@liuli-util/async&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> wrapWorkerFunc <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./util/wrapWorkerFunc&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">_hello</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token function">wrapWorkerFunc</span><span class="token punctuation">(</span>_hello<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// index.ts</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;./hello.worker&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="\u53C2\u8003" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003" aria-hidden="true">#</a> \u53C2\u8003</h2>`,5),T={href:"https://blog.logrocket.com/integrating-web-workers-in-a-react-app-with-comlink/",target:"_blank",rel:"noopener noreferrer"},E=s("Integrating web workers in a React app with Comlink"),P={href:"https://lorefnon.tech/2019/03/24/using-comlink-with-typescript-and-worker-loader/",target:"_blank",rel:"noopener noreferrer"},F=s("Using comlink with typescript and worker-loader"),C={href:"https://medium.com/lacolaco-blog/an-issue-around-angular-cli-comlink-workerplugin-585be1c8d087",target:"_blank",rel:"noopener noreferrer"},R=s("An issue around Angular CLI + Comlink + WorkerPlugin");function H(I,M){const a=o("ExternalLinkIcon");return e(),c(l,null,[i,n("ul",null,[k,n("li",null,[d,n("a",b,[m,p(a)])])]),n("blockquote",null,[n("p",null,[w,n("a",h,[g,p(a)])])]),y,n("p",null,[f,n("a",_,[q,p(a)]),x,v,W]),j,n("ul",null,[n("li",null,[n("a",T,[E,p(a)])]),n("li",null,[n("a",P,[F,p(a)])]),n("li",null,[n("a",C,[R,p(a)])])])],64)}var B=r(u,[["render",H]]);export{B as default};
