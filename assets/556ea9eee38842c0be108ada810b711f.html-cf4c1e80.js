import{_ as t,M as p,p as r,q as l,R as n,t as a,N as e,a1 as o}from"./framework-96b046e1.js";const c="/assets/cf84da80c9d143cdb4163cc7a1d34fb4-0c729548.svg",i={},d=n("h2",{id:"动机",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#动机","aria-hidden":"true"},"#"),a(" 动机")],-1),u=n("li",null,"不再同时使用两个 monorepo 管理工具，或者说将 monorepo 功能整合到 yarn 里（新的依赖管理工具 npm7/pnpm/rush 都是这样干的），专注于增强 yarn（yarn.build 是一个不错的例子）",-1),k=n("li",null,"使用 yarn2 逐渐发展的生态（yarn1 基本没什么更新了）",-1),h=n("code",null,"lerna run",-1),b={href:"https://github.com/yarnpkg/berry/issues/2374",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"lerna clean -y && lerna bootstrap",-1),y=n("code",null,"node_modules/.bin",-1),g=n("code",null,"cli",-1),v={href:"https://yarnpkg.com/getting-started/migration#call-binaries-using-yarn-run-rather-than-node_modulesbin",target:"_blank",rel:"noopener noreferrer"},f=n("ul",null,[n("li",null,[a("该优化大约能将每个 cli 的构建时间从 40s 降低至 10s 内，之前大部分时间都是写入 "),n("code",null,"node_modules/.bin")])],-1),_=o(`<h2 id="如何使用类似于-lerna-run-exec-之类的命令" tabindex="-1"><a class="header-anchor" href="#如何使用类似于-lerna-run-exec-之类的命令" aria-hidden="true">#</a> 如何使用类似于 lerna run/exec 之类的命令</h2><ol><li>使用 workspaces 插件 <code>yarn plugin import @yarnpkg/plugin-workspace-tools</code></li><li>使用 <code>yarn workspaces foreach</code> 在所有模块执行命令</li></ol><p>下面是在所有模块中按照依赖顺序尽可能地并行构建包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> workspaces foreach <span class="token parameter variable">-p</span> --topological-dev run build
<span class="token comment"># 或删除所有 dist</span>
<span class="token function">yarn</span> workspaces foreach <span class="token parameter variable">-p</span> <span class="token builtin class-name">exec</span> rimraf dist
<span class="token comment"># 如果希望删除 node_modules，则需要使用 yarn dlx</span>
<span class="token function">yarn</span> workspaces foreach <span class="token parameter variable">-p</span> <span class="token builtin class-name">exec</span> <span class="token function">yarn</span> dlx rimraf node_modules
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何像-lerna-publish-更新所有模块的版本" tabindex="-1"><a class="header-anchor" href="#如何像-lerna-publish-更新所有模块的版本" aria-hidden="true">#</a> 如何像 lerna publish 更新所有模块的版本</h2><p>升级全部模块目前可以使用 <code>yarn workspaces foreach</code> 模拟 <code>lerna publish</code>，但对于独立模式则是另外一套完全不同的模式了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> workspaces foreach <span class="token builtin class-name">exec</span> <span class="token function">yarn</span> version patch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>缺点是无法按照是否修改决定是否发布新版本。。。</p><p>发布所有包</p><blockquote><p><code>yarn npm publish</code> 仍有 bug，所以只能直接 <code>npm publish</code> 了</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> workspaces foreach <span class="token parameter variable">-A</span> --no-private <span class="token builtin class-name">exec</span> <span class="token function">npm</span> publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>感觉还是需要实现缓存的功能，只是将缓存文件加到 git 而已。考虑到不是所有命令都需要，也许可以使用缓存目录。</p></blockquote><h2 id="如果包含-cli-子模块怎么办" tabindex="-1"><a class="header-anchor" href="#如果包含-cli-子模块怎么办" aria-hidden="true">#</a> 如果包含 cli 子模块怎么办？</h2><p>打包完成之后 <code>yarn</code> 安装即可，yarn 会负责将命令写入到依赖的其他子模块的 <em>node_modules/.bin/</em> 中。</p><h2 id="编写插件" tabindex="-1"><a class="header-anchor" href="#编写插件" aria-hidden="true">#</a> 编写插件</h2>`,15),w={href:"https://yarnpkg.com/advanced/plugin-tutorial",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,[n("img",{src:c,alt:"monorepo 构建.drawio.svg"})],-1),j=n("h2",{id:"问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#问题","aria-hidden":"true"},"#"),a(" 问题")],-1),C=o("<li>不能使用 lerna 那种拼接脚本的方式，即将 <code>lerna run --include-dependencies --stream</code> 放在 <code>stream</code> 脚本，然后使用 <code>yarn stream &lt;cmd&gt;</code> 拼接命令的形式。</li><li>不确定 yarn 是否包含 <code>lerna publish</code> 那种自动检测和批量发布的命令 -- 支持不太好用</li><li>不确定 yarn 是否有类似于 <code>rush/nx</code> 的构建缓存功能 -- 没有原生支持，两个插件也都有各自的问题</li><li>概念太多实在太麻烦了，各种奇怪的问题 <ul><li><code>yarn npm publish</code> 会说权限错误，但实际上 <code>yarn npm login</code> 已经成功了，文档上说可以配置 <code>npmAuthToken</code>，但这是不合理的（将 token 加到 git 管理中）</li><li><code>yarn workspaces foreach exec yarn jest --all</code> 会报一个错误</li></ul></li>",4),N={href:"https://youtrack.jetbrains.com/issue/WEB-35034",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/yarnpkg/berry/network/dependents?package_id=UGFja2FnZS03MDE5NDg3MjU%3D",target:"_blank",rel:"noopener noreferrer"},Y=n("li",null,[a("无法使用 "),n("code",null,"patch-package"),a("，但可以使用 "),n("code",null,"yarn patch"),a(" 命令。。。")],-1),P=o(`<h2 id="其他优点" tabindex="-1"><a class="header-anchor" href="#其他优点" aria-hidden="true">#</a> 其他优点</h2><ul><li>原生支持 workspaces</li><li>有插件 api，可以为自定义需求编写插件</li><li>cli 命令执行不再强绑定到 <em>node_modules/.bin</em></li><li>重新安装依赖时时不需要停止 <code>vite dev</code>（目前无法安装成功）</li></ul><h2 id="编写插件之后应该怎么在本地测试" tabindex="-1"><a class="header-anchor" href="#编写插件之后应该怎么在本地测试" aria-hidden="true">#</a> 编写插件之后应该怎么在本地测试？</h2><ol><li><p>单元测试</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> dir <span class="token operator">=</span> npath<span class="token punctuation">.</span><span class="token function">toPortablePath</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> configuration <span class="token operator">=</span> <span class="token keyword">await</span> Configuration<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> dir<span class="token punctuation">)</span>
<span class="token keyword">const</span> project <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> Project<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>project
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>yarn plugin import &lt;&gt;</code></p></li></ol><h2 id="yarn-workspace-有办法包含一个不在-workspace-管理的子目录么" tabindex="-1"><a class="header-anchor" href="#yarn-workspace-有办法包含一个不在-workspace-管理的子目录么" aria-hidden="true">#</a> yarn workspace 有办法包含一个不在 workspace 管理的子目录么？</h2><p>例如项目可能有一个 website 目录用以存放网站的文档，而又不希望将之放到 yarn workspace 管理（有可能是不同的技术栈，例如 vuepress）。</p><p>在 <code>workspace</code> 字段中排除，然后在目录中添加空的 <code>yarn.lock</code> 文件</p><h2 id="npmrc-yarnrc-yml" tabindex="-1"><a class="header-anchor" href="#npmrc-yarnrc-yml" aria-hidden="true">#</a> npmrc =&gt; yarnrc.yml</h2><h2 id="yarn2-在-monorepo-中根模块无法直接-import-子模块的-yarn-插件" tabindex="-1"><a class="header-anchor" href="#yarn2-在-monorepo-中根模块无法直接-import-子模块的-yarn-插件" aria-hidden="true">#</a> yarn2 在 monorepo 中根模块无法直接 import 子模块的 yarn 插件</h2>`,9),U={href:"https://github.com/rxliuli/liuli-tools",target:"_blank",rel:"noopener noreferrer"},E=o(`<p>复现步骤</p><ol><li><code>yarn &amp;&amp; yarn setup</code> 安装依赖及初始化</li><li><code>cd libs/yarn-plugin-changed &amp;&amp; yarn build</code> 打包插件</li><li><code>cd ../.. &amp;&amp; yarn plugin import libs/yarn-plugin-changed/bundles/\\@yarnpkg/plugin-changed.js</code> 回到根目录安装插件</li><li>得到错误</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$ yarn plugin <span class="token keyword">import</span> libs<span class="token operator">/</span>yarn<span class="token operator">-</span>plugin<span class="token operator">-</span>changed<span class="token operator">/</span>bundles<span class="token operator">/</span>\\@yarnpkg<span class="token operator">/</span>plugin<span class="token operator">-</span>changed<span class="token punctuation">.</span>js
➤ <span class="token constant">YN0001</span><span class="token operator">:</span> Error<span class="token operator">:</span> Invalid <span class="token function">locator</span> <span class="token punctuation">(</span>@yarnpkg<span class="token operator">/</span>plugin<span class="token operator">-</span>libs<span class="token operator">/</span>yarn<span class="token operator">-</span>plugin<span class="token operator">-</span>changed<span class="token operator">/</span>bundles<span class="token operator">/</span>@yarnpkg<span class="token operator">/</span>plugin<span class="token operator">-</span>changed<span class="token punctuation">.</span>js<span class="token punctuation">)</span>
    at Object<span class="token punctuation">.</span><span class="token function">hA</span> <span class="token punctuation">(</span><span class="token constant">C</span><span class="token operator">:</span>\\Users\\rxliuli\\Code\\Pkg\\liuli<span class="token operator">-</span>tools\\<span class="token punctuation">.</span>yarn\\releases\\yarn<span class="token operator">-</span>berry<span class="token punctuation">.</span>cjs<span class="token operator">:</span><span class="token number">242</span><span class="token operator">:</span><span class="token number">12395</span><span class="token punctuation">)</span>
    at <span class="token constant">C</span><span class="token operator">:</span>\\Users\\rxliuli\\Code\\Pkg\\liuli<span class="token operator">-</span>tools\\<span class="token punctuation">.</span>yarn\\releases\\yarn<span class="token operator">-</span>berry<span class="token punctuation">.</span>cjs<span class="token operator">:</span><span class="token number">387</span><span class="token operator">:</span><span class="token number">1702</span>
    at <span class="token keyword">async</span> Function<span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token constant">C</span><span class="token operator">:</span>\\Users\\rxliuli\\Code\\Pkg\\liuli<span class="token operator">-</span>tools\\<span class="token punctuation">.</span>yarn\\releases\\yarn<span class="token operator">-</span>berry<span class="token punctuation">.</span>cjs<span class="token operator">:</span><span class="token number">275</span><span class="token operator">:</span><span class="token number">2287</span><span class="token punctuation">)</span>
    at <span class="token keyword">async</span> Rp<span class="token punctuation">.</span><span class="token function">execute</span> <span class="token punctuation">(</span><span class="token constant">C</span><span class="token operator">:</span>\\Users\\rxliuli\\Code\\Pkg\\liuli<span class="token operator">-</span>tools\\<span class="token punctuation">.</span>yarn\\releases\\yarn<span class="token operator">-</span>berry<span class="token punctuation">.</span>cjs<span class="token operator">:</span><span class="token number">387</span><span class="token operator">:</span><span class="token number">1110</span><span class="token punctuation">)</span>
    at <span class="token keyword">async</span> Rp<span class="token punctuation">.</span><span class="token function">validateAndExecute</span> <span class="token punctuation">(</span><span class="token constant">C</span><span class="token operator">:</span>\\Users\\rxliuli\\Code\\Pkg\\liuli<span class="token operator">-</span>tools\\<span class="token punctuation">.</span>yarn\\releases\\yarn<span class="token operator">-</span>berry<span class="token punctuation">.</span>cjs<span class="token operator">:</span><span class="token number">197</span><span class="token operator">:</span><span class="token number">620</span><span class="token punctuation">)</span>
    at <span class="token keyword">async</span> ts<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">(</span><span class="token constant">C</span><span class="token operator">:</span>\\Users\\rxliuli\\Code\\Pkg\\liuli<span class="token operator">-</span>tools\\<span class="token punctuation">.</span>yarn\\releases\\yarn<span class="token operator">-</span>berry<span class="token punctuation">.</span>cjs<span class="token operator">:</span><span class="token number">211</span><span class="token operator">:</span><span class="token number">1846</span><span class="token punctuation">)</span>
    at <span class="token keyword">async</span> ts<span class="token punctuation">.</span><span class="token function">runExit</span> <span class="token punctuation">(</span><span class="token constant">C</span><span class="token operator">:</span>\\Users\\rxliuli\\Code\\Pkg\\liuli<span class="token operator">-</span>tools\\<span class="token punctuation">.</span>yarn\\releases\\yarn<span class="token operator">-</span>berry<span class="token punctuation">.</span>cjs<span class="token operator">:</span><span class="token number">211</span><span class="token operator">:</span><span class="token number">2013</span><span class="token punctuation">)</span>
    at <span class="token keyword">async</span> <span class="token function">i</span> <span class="token punctuation">(</span><span class="token constant">C</span><span class="token operator">:</span>\\Users\\rxliuli\\Code\\Pkg\\liuli<span class="token operator">-</span>tools\\<span class="token punctuation">.</span>yarn\\releases\\yarn<span class="token operator">-</span>berry<span class="token punctuation">.</span>cjs<span class="token operator">:</span><span class="token number">310</span><span class="token operator">:</span><span class="token number">12327</span><span class="token punctuation">)</span>
    at <span class="token keyword">async</span> <span class="token function">r</span> <span class="token punctuation">(</span><span class="token constant">C</span><span class="token operator">:</span>\\Users\\rxliuli\\Code\\Pkg\\liuli<span class="token operator">-</span>tools\\<span class="token punctuation">.</span>yarn\\releases\\yarn<span class="token operator">-</span>berry<span class="token punctuation">.</span>cjs<span class="token operator">:</span><span class="token number">310</span><span class="token operator">:</span><span class="token number">10567</span><span class="token punctuation">)</span>
➤ <span class="token constant">YN0000</span><span class="token operator">:</span> Failed <span class="token keyword">with</span> errors <span class="token keyword">in</span> 0s 133ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案</p><p>必须使用 . 开头的相对路径</p>`,5),D={href:"https://github.com/yarnpkg/berry/issues/3331#issuecomment-903615924",target:"_blank",rel:"noopener noreferrer"},L=n("h2",{id:"yarn-插件打包后在-bundles-yarnpkg-下而非我们的组织名下面",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#yarn-插件打包后在-bundles-yarnpkg-下而非我们的组织名下面","aria-hidden":"true"},"#"),a(" yarn 插件打包后在 bundles/@yarnpkg 下而非我们的组织名下面")],-1),A=n("p",null,[a("同样是在编写 yarn 插件时遇到的错误，在我们使用 yarn plugin import 安装插件之后，才发现安装的目录是 "),n("em",null,".yarn/plugins/@yarnpkg/plugin-changed.cjs"),a("，这似乎有些不对，因为我们的项目名是 "),n("code",null,"@liuli-util/yarn-plugin-changed"),a("。还是我遗漏了什么配置？")],-1),F=n("p",null,"复现步骤",-1),$=n("p",null,"现有的包是怎么做的？",-1),T={href:"https://github.com/ojkelly/yarn.build/blob/trunk/packages/plugins/plugin-build/package.json#L46-L47",target:"_blank",rel:"noopener noreferrer"},B=o(`<p>答案</p><p>是 bundler 刻意的行为，无法直接改变。。。</p><h2 id="获取系统信息" tabindex="-1"><a class="header-anchor" href="#获取系统信息" aria-hidden="true">#</a> 获取系统信息</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx envinfo <span class="token parameter variable">--preset</span> jest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用-yarn-patch-制作本地补丁包" tabindex="-1"><a class="header-anchor" href="#使用-yarn-patch-制作本地补丁包" aria-hidden="true">#</a> 使用 yarn patch 制作本地补丁包</h2>`,5),M={href:"https://yarnpkg.com/cli/patch",target:"_blank",rel:"noopener noreferrer"},R=o("<p>动机</p><p>主要是处理一些 npm 模块可能存在小问题但又来不及提 PR 的情况下，在本地修改并生成 git patch 文件，在每次 <code>yarn install</code> 时合并这些 patch。</p><p>使用步骤</p><ol><li>使用 <code>yarn patch winbox</code> 生成临时目录</li><li>修改目录中的文件</li><li>提交修改并生成 patch <code>yarn patch-commit &quot;C:\\Users\\rxliuli\\AppData\\Local\\Temp\\xfs-f35b52d4\\user&quot; -s</code>，保存位置在 <em>.yarn/patches/</em></li><li>修改 package.json 使用 patch 协议 <code>{ &quot;winbox&quot;: &quot;patch:winbox@0.2.0#../../../.yarn/patches/winbox-npm-0.2.0-8ddb0784dd&quot; }</code></li><li>重新安装依赖 <code>yarn</code></li></ol>",4),S={href:"https://github.com/ds300/patch-package/issues/132",target:"_blank",rel:"noopener noreferrer"},V=n("h2",{id:"yarn-pack-会忽略-gitignore",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#yarn-pack-会忽略-gitignore","aria-hidden":"true"},"#"),a(" yarn pack 会忽略 .gitignore")],-1),I={href:"https://github.com/yarnpkg/berry/blob/7ae458b8165ad53a8ef9db0060cbb6de73305768/packages/plugin-pack/sources/packUtils.ts#L26-L39",target:"_blank",rel:"noopener noreferrer"},W=o(`<p>是的，yarn pack 永远会忽略它，如果需要，可能需要将之打包到 js 代码里，然后在 postinstall 时写入文件（虽然会炸掉 yarn2 pnp 模式就是了）</p><h2 id="运行初始化命令但卡死了" tabindex="-1"><a class="header-anchor" href="#运行初始化命令但卡死了" aria-hidden="true">#</a> 运行初始化命令但卡死了</h2><p>可能会报下面这个错</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>The <span class="token builtin class-name">command</span> failed <span class="token keyword">for</span> workspaces that are depended upon by other workspaces<span class="token punctuation">;</span> can&#39;t satisfy the dependency graph
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>检查运行的命令中是否包含递归调用，即在 <code>setup</code> 命令中调用了 <code>setup</code> 命令</p><blockquote><p>需要开发类似 yarn.build 的 cli，可以更好的看到到底是哪个模块运行命令卡住了，可以统计一共用了多长时间。</p></blockquote><p>也有可能是其中部分模块运行命令失败，但并未返回 code 1。</p><h2 id="如何更新所有依赖的版本为最新" tabindex="-1"><a class="header-anchor" href="#如何更新所有依赖的版本为最新" aria-hidden="true">#</a> 如何更新所有依赖的版本为最新</h2>`,8),G=n("code",null,"yarn ugprade --latest",-1),Z={href:"https://yarnpkg.com/cli/upgrade-interactive",target:"_blank",rel:"noopener noreferrer"},z=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> dlx npm-check-updates <span class="token parameter variable">-u</span> <span class="token operator">&amp;&amp;</span> <span class="token function">yarn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="yarn-插件没有版本的概念" tabindex="-1"><a class="header-anchor" href="#yarn-插件没有版本的概念" aria-hidden="true">#</a> yarn 插件没有版本的概念</h2><p>例如现在当我的 yarn 版本是 2，引入 workspaces 插件就会报错。。。它总会下载最新版本的插件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Usage Error: This plugin cannot access the package referenced via typanion <span class="token function">which</span> is neither a builtin, nor an exposed entry <span class="token punctuation">(</span>when initializing @yarnpkg/plugin-workspace-tools, defined <span class="token keyword">in</span> /C:/Users/rxliuli/Code/Web/demo/yarn2-error/.yarnrc.yml<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="yarn-workspaces-的-topological-dev-参数未生效" tabindex="-1"><a class="header-anchor" href="#yarn-workspaces-的-topological-dev-参数未生效" aria-hidden="true">#</a> yarn workspaces 的 <code>--topological-dev</code> 参数未生效</h2>`,5),O={href:"https://github.com/rxliuli/yarn2-workspaces-error",target:"_blank",rel:"noopener noreferrer"},H=o(`<p>当我使用 <code>--topological-dev</code> 参数时，它并不会正常按照依赖顺序运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">yarn</span> workspaces foreach <span class="token parameter variable">-v</span> <span class="token parameter variable">-p</span> --topological-dev run setup
➤ YN0000: <span class="token punctuation">[</span>a<span class="token punctuation">]</span>: Process started
➤ YN0000: <span class="token punctuation">[</span>b<span class="token punctuation">]</span>: Process started
➤ YN0000: <span class="token punctuation">[</span>a<span class="token punctuation">]</span>: a
➤ YN0000: <span class="token punctuation">[</span>a<span class="token punctuation">]</span>: Process exited <span class="token punctuation">(</span>exit code <span class="token number">0</span><span class="token punctuation">)</span>, completed <span class="token keyword">in</span> 0s 88ms
➤ YN0000: <span class="token punctuation">[</span>b<span class="token punctuation">]</span>: b
➤ YN0000: <span class="token punctuation">[</span>b<span class="token punctuation">]</span>: Process exited <span class="token punctuation">(</span>exit code <span class="token number">0</span><span class="token punctuation">)</span>, completed <span class="token keyword">in</span> 0s 82ms
➤ YN0000: Done <span class="token keyword">in</span> 0s 101ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这似乎是一个回归错误，只有 yarn3 才会出现，目前无法使用 yarn2 安装 workspaces 插件，这是另一个错误。</p><p>复现步骤</p><ol><li><code>git clone https://github.com/rxliuli/yarn2-workspaces-error.git</code></li><li><code>cd yarn2-workspaces-error</code></li><li><code>yarn</code></li><li><code>yarn workspaces foreach -v -p --topological-dev run setup</code></li></ol>`,5),J={href:"https://github.com/yarnpkg/berry/issues/3475",target:"_blank",rel:"noopener noreferrer"},K=o(`<h2 id="yarn-install-link-step-很慢" tabindex="-1"><a class="header-anchor" href="#yarn-install-link-step-很慢" aria-hidden="true">#</a> yarn install link step 很慢</h2><p>在没有任何变化的情况使用 yarn 重新安装依赖仍然要很久，我不确定发生了什么，我们有 30 个模块，还包含嵌套的 workspace。</p><p>下面是输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➤ YN0000: │ Some peer dependencies are incorrectly met<span class="token punctuation">;</span> run <span class="token function">yarn</span> explain peer-requirements <span class="token operator">&lt;</span>hash<span class="token operator">&gt;</span> <span class="token keyword">for</span> details, where <span class="token operator">&lt;</span>hash<span class="token operator">&gt;</span> is the six-letter p-prefixed code
➤ YN0000: └ Completed <span class="token keyword">in</span> 0s 480ms
➤ YN0000: ┌ Fetch step
➤ YN0000: └ Completed <span class="token keyword">in</span> 2s 765ms
➤ YN0000: ┌ Link step
➤ YN0062: │ fsevents@patch:fsevents@npm%3A2.3.2<span class="token comment">#~builtin&lt;compat/fsevents&gt;::version=2.3.2&amp;hash=1cc4b2 The platform win32 is incompatible with this module, link skipped.</span>
➤ YN0062: │ fsevents@patch:fsevents@npm%3A1.2.13<span class="token comment">#~builtin&lt;compat/fsevents&gt;::version=1.2.13&amp;hash=1cc4b2 The platform win32 is incompatible with this module, link skipped.</span>
➤ YN0000: └ Completed <span class="token keyword">in</span> 38s 348ms
➤ YN0000: Done with warnings <span class="token keyword">in</span> 41s 807ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Q={href:"https://github.com/yarnpkg/berry/issues/3476",target:"_blank",rel:"noopener noreferrer"},X=o(`<p>看起来像是因为嵌套 workspace 引起的，有一个 PR 正在尝试修复这个问题。</p><h2 id="如何在-monorepo-中执行指定脚本" tabindex="-1"><a class="header-anchor" href="#如何在-monorepo-中执行指定脚本" aria-hidden="true">#</a> 如何在 monorepo 中执行指定脚本</h2><p>有时候想在所有模块运行脚本做一些批量迁移的工作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> esno
<span class="token function">yarn</span> workspaces foreach <span class="token parameter variable">-pvA</span> <span class="token builtin class-name">exec</span> <span class="token string">&quot;esno &lt;脚本绝对路径&gt;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="yarn-如何全局安装-monorepo-项目中包含私有模块依赖的-cli-模块" tabindex="-1"><a class="header-anchor" href="#yarn-如何全局安装-monorepo-项目中包含私有模块依赖的-cli-模块" aria-hidden="true">#</a> yarn 如何全局安装 monorepo 项目中包含私有模块依赖的 cli 模块</h2><ol><li>将所有的私有模块移至 <code>devDependencies</code></li><li>使用 esbuild 等工具将所有依赖打包到 bundle</li><li><code>npm i -g .</code> 安装依赖即可</li><li>全局使用命令</li></ol><p>这里的核心问题是全局安装依赖时无法找到 monorepo 中未发布的模块，但私有模块在全局找不到，也无法作为依赖安装，所以只能使用这种奇怪的方法了。另一种解决方案是递归将所依赖的私有模块全部全局安装（没有尝试过）。</p><h2 id="yarn-无法显式修改指定版本" tabindex="-1"><a class="header-anchor" href="#yarn-无法显式修改指定版本" aria-hidden="true">#</a> yarn 无法显式修改指定版本</h2>`,8),nn={href:"https://github.com/yarnpkg/berry/issues/3322",target:"_blank",rel:"noopener noreferrer"},an=o(`<h2 id="yarn-link-会强制检查依赖是否冲突" tabindex="-1"><a class="header-anchor" href="#yarn-link-会强制检查依赖是否冲突" aria-hidden="true">#</a> yarn link 会强制检查依赖是否冲突</h2><p>下面是控制台日志，这种行为很明显是有问题的，因为吾辈只希望能在项目中测试另一个项目的某个模块。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➤ YN0071: │ Cannot <span class="token function">link</span> @liuli-util/cli into joplin-api@workspace:libs/joplin-api dependency fs-extra@npm:10.0.0 conflicts with parent dependency fs-extra@npm:9.1.0
➤ YN0071: │ Cannot <span class="token function">link</span> @liuli-util/cli into joplin-blog@workspace:apps/joplin-blog dependency commander@npm:8.2.0 conflicts with parent dependency commander@npm:7.2.0
➤ YN0071: │ Cannot <span class="token function">link</span> @liuli-util/cli into joplin-blog@workspace:apps/joplin-blog dependency fs-extra@npm:10.0.0 conflicts with parent dependency fs-extra@npm:9.1.0
➤ YN0071: │ Cannot <span class="token function">link</span> @liuli-util/cli into joplin-blog<span class="token variable">$wsroot</span><span class="token variable">$@</span>workspace:apps/joplin-blog dependency commander@npm:8.2.0 conflicts with parent dependency commander@npm:7.2.0
➤ YN0071: │ Cannot <span class="token function">link</span> @liuli-util/cli into joplin-blog<span class="token variable">$wsroot</span><span class="token variable">$@</span>workspace:apps/joplin-blog dependency fs-extra@npm:10.0.0 conflicts with parent dependency fs-extra@npm:9.1.0
➤ YN0071: │ Cannot <span class="token function">link</span> @liuli-util/cli into joplin-api<span class="token variable">$wsroot</span><span class="token variable">$@</span>workspace:libs/joplin-api dependency fs-extra@npm:10.0.0 conflicts with parent dependency fs-extra@npm:9.1.0
➤ YN0000: └ Completed <span class="token keyword">in</span> 0s 761ms
➤ YN0000: Failed with errors <span class="token keyword">in</span> 4s 996ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前似乎只能依赖于手动复制粘贴解决。。。</p>`,4);function sn(en,on){const s=p("ExternalLinkIcon");return r(),l("div",null,[d,n("ul",null,[u,k,n("li",null,[a("lerna 的高级功能不太好用，主要是 "),h,a(" 不支持缓存导致每次重新构建会很烦 -- 考虑使用 ultra 支持，但 yarn2 似乎有插件可以支持，参考: "),n("a",b,[a("https://github.com/yarnpkg/berry/issues/2374"),e(s)])]),n("li",null,[a("yarn2 不需要使用 "),m,a(" 来将动态构建的 cli 写入到 "),y,a("，它查找 "),g,a(" 的方式发生了变化（完全动态化），参考 "),n("a",v,[a("https://yarnpkg.com/getting-started/migration#call-binaries-using-yarn-run-rather-than-node_modulesbin"),e(s)]),f])]),_,n("blockquote",null,[n("p",null,[n("a",w,[a("插件教程文档"),e(s)])])]),x,j,n("ul",null,[C,n("li",null,[a("对于 yarn2 pnp，目前 webstorm 仍然只有非常基本的支持，包括 prettier/jest 都存在问题，参考："),n("a",N,[a("https://youtrack.jetbrains.com/issue/WEB-35034"),e(s)])]),n("li",null,[a("yarn 2 的社区接受度似乎极低，github 上依赖它的库不超过 100 个，参考："),n("a",q,[a("https://github.com/yarnpkg/berry/network/dependents?package_id=UGFja2FnZS03MDE5NDg3MjU%3D"),e(s)]),a(" -- 实际上这是错的，由于 yarn2 不在 package.json 中声明而已，目前 storybook 等流行库也升级了 yarn2，但它们也混用 lerna 和 nx。。。")]),Y]),P,n("blockquote",null,[n("p",null,[n("a",U,[a("复现仓库"),e(s)])])]),E,n("blockquote",null,[n("p",null,[n("a",D,[a("github issue"),e(s)])])]),L,A,F,$,n("ul",null,[n("li",null,[n("a",T,[a("yarn.build"),e(s)]),a(": 使用系统命令手动移动文件，同时替换打包之后的 name 字段")])]),B,n("blockquote",null,[n("p",null,[n("a",M,[a("官方文档 yarn patch"),e(s)])])]),R,n("blockquote",null,[n("p",null,[a("patch-package 目前无法在 yarn2 workspaces 下正常使用，参考："),n("a",S,[a("https://github.com/ds300/patch-package/issues/132"),e(s)])])]),V,n("blockquote",null,[n("p",null,[a("官方将之写死到代码里了，参考: "),n("a",I,[a("https://github.com/yarnpkg/berry/blob/7ae458b8165ad53a8ef9db0060cbb6de73305768/packages/plugin-pack/sources/packUtils.ts#L26-L39"),e(s)])])]),W,n("p",null,[a("众所周知，yarn1 提供了 "),G,a(" 来更新所有版本至最新，但 yarn2 不存在这个命令，唯一的官方插件 "),n("a",Z,[a("upgrade-interactive"),e(s)]),a(" 是需要在交互式 cli 中选择，而且还在使用代理时存在 bug。")]),z,n("blockquote",null,[n("p",null,[n("a",O,[a("示例 github 仓库"),e(s)])])]),H,n("blockquote",null,[n("p",null,[n("a",J,[a("github issue"),e(s)])])]),K,n("blockquote",null,[n("p",null,[n("a",Q,[a("github issue"),e(s)])])]),X,n("blockquote",null,[n("p",null,[a("这是一个已知错误，目前尚未发布: "),n("a",nn,[a("https://github.com/yarnpkg/berry/issues/3322"),e(s)])])]),an])}const pn=t(i,[["render",sn],["__file","556ea9eee38842c0be108ada810b711f.html.vue"]]);export{pn as default};
