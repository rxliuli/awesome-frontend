import{r as n,o as e,c as a,a as l,F as r,b as s,d as o}from"./app.442277df.js";const i={},c=l("h2",{id:"动机",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#动机","aria-hidden":"true"},"#"),s(" 动机")],-1),u=l("li",null,"不再同时使用两个 monorepo 管理工具，或者说将 monorepo 整合到 yarn 里（新的依赖管理工具 npm7/pnpm/rush 都是这样干的），专注于对增强 yarn（yarn.build 是一个不错的例子）",-1),t=l("li",null,"使用 yarn2 逐渐发展的生态（yarn1 基本没什么更新了）",-1),d=s("lerna 的高级功能不太好用，主要是 "),p=l("code",null,"lerna run",-1),h=s(" 不支持缓存导致每次重新构建会很烦 -- 考虑使用 ultra 支持，但 yarn2 似乎有参见可以支持，参考: "),b={href:"https://github.com/yarnpkg/berry/issues/2374",target:"_blank",rel:"noopener noreferrer"},m=s("https://github.com/yarnpkg/berry/issues/2374"),g=s("yarn2 不需要使用 "),k=l("code",null,"lerna clean -y && lerna bootstrap",-1),y=s(" 来将动态构建的 cli 写入到 "),f=l("code",null,"node_modules/.bin",-1),x=s("，它查找 "),w=l("code",null,"cli",-1),_=s(" 的方式发生了变化（完全动态化），参考 "),v={href:"https://yarnpkg.com/getting-started/migration#call-binaries-using-yarn-run-rather-than-node_modulesbin",target:"_blank",rel:"noopener noreferrer"},j=s("https://yarnpkg.com/getting-started/migration#call-binaries-using-yarn-run-rather-than-node_modulesbin"),D=l("ul",null,[l("li",null,[s("该优化大约能将每个 cli 的构建时间从 40s 降低至 10s 内，之前大部分时间都是写入 "),l("code",null,"node_modules/.bin")])],-1),F=l("h2",{id:"如何使用类似于-lerna-run-exec-之类的命令",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#如何使用类似于-lerna-run-exec-之类的命令","aria-hidden":"true"},"#"),s(" 如何使用类似于 lerna run/exec 之类的命令")],-1),E=l("ol",null,[l("li",null,[s("使用 workspaces 插件 "),l("code",null,"yarn plugin import @yarnpkg/plugin-workspace-tools")]),l("li",null,[s("使用 "),l("code",null,"yarn workspaces foreach"),s(" 在所有模块执行命令")])],-1),M=l("p",null,"下面是在所有模块中按照依赖顺序尽可能地并行构建包",-1),U=l("div",{class:"language-bash ext-sh line-numbers-mode"},[l("pre",{class:"language-bash"},[l("code",null,[l("span",{class:"token function"},"yarn"),s(" workspaces foreach -p --topological-dev run build\n"),l("span",{class:"token comment"},"# 或删除所有 dist"),s("\n"),l("span",{class:"token function"},"yarn"),s(" workspaces foreach -p "),l("span",{class:"token builtin class-name"},"exec"),s(" rimraf dist\n"),l("span",{class:"token comment"},"# 如果希望删除 node_modules，则需要使用 yarn dlx"),s("\n"),l("span",{class:"token function"},"yarn"),s(" workspaces foreach -p "),l("span",{class:"token builtin class-name"},"exec"),s(),l("span",{class:"token function"},"yarn"),s(" dlx rimraf node_modules\n")])]),l("div",{class:"line-numbers"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br")])],-1),q=l("h2",{id:"如何像-lerna-publish-那样为所有模块全部升级",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#如何像-lerna-publish-那样为所有模块全部升级","aria-hidden":"true"},"#"),s(" 如何像 lerna publish 那样为所有模块全部升级？")],-1),A=l("p",null,[s("升级全部模块目前可以使用 "),l("code",null,"yarn workspaces foreach"),s(" 模拟 "),l("code",null,"lerna publish"),s("，但对于独立模式则是另外一套完全不同的模式了。")],-1),B=l("div",{class:"language-bash ext-sh line-numbers-mode"},[l("pre",{class:"language-bash"},[l("code",null,[l("span",{class:"token function"},"yarn"),s(" workspaces foreach "),l("span",{class:"token builtin class-name"},"exec"),s(),l("span",{class:"token function"},"yarn"),s(" version patch\n")])]),l("div",{class:"line-numbers"},[l("span",{class:"line-number"},"1"),l("br")])],-1),G=l("p",null,"缺点是无法按照是否修改决定是否发布新版本。。。",-1),N=l("p",null,"发布所有包",-1),S=l("blockquote",null,[l("p",null,[l("code",null,"yarn npm publish"),s(" 仍有 bug，所以只能直接 "),l("code",null,"npm publish"),s(" 了")])],-1),W=l("div",{class:"language-bash ext-sh line-numbers-mode"},[l("pre",{class:"language-bash"},[l("code",null,[l("span",{class:"token function"},"yarn"),s(" workspaces foreach -A --no-private "),l("span",{class:"token builtin class-name"},"exec"),s(),l("span",{class:"token function"},"npm"),s(" publish\n")])]),l("div",{class:"line-numbers"},[l("span",{class:"line-number"},"1"),l("br")])],-1),Z=l("blockquote",null,[l("p",null,"感觉还是需要实现缓存的功能，只是将缓存文件加到 git 而已。考虑到不是所有命令都需要，也许可以使用缓存目录。")],-1),L=l("h2",{id:"如果包含-cli-子模块怎么办",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#如果包含-cli-子模块怎么办","aria-hidden":"true"},"#"),s(" 如果包含 cli 子模块怎么办？")],-1),O=l("p",null,[s("打包完成之后 "),l("code",null,"yarn"),s(" 安装即可，yarn 会负责将命令写入到依赖的其他子模块的 "),l("em",null,"node_modules/.bin/"),s(" 中。")],-1),T=l("h2",{id:"编写插件",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#编写插件","aria-hidden":"true"},"#"),s(" 编写插件")],-1),z={href:"https://yarnpkg.com/advanced/plugin-tutorial",target:"_blank",rel:"noopener noreferrer"},C=s("插件教程文档"),H=l("p",null,[l("img",{src:"/assets/2cd2759641844259b77990b566a3d2fb.0c729548.svg",alt:"monorepo 构建.drawio.svg"})],-1),I=l("h2",{id:"问题",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#问题","aria-hidden":"true"},"#"),s(" 问题")],-1),J=o("<li>不能使用 lerna 那种拼接脚本的方式，即将 <code>lerna run --include-dependencies --stream</code> 放在 <code>stream</code> 脚本，然后使用 <code>yarn stream &lt;cmd&gt;</code> 拼接命令的形式。</li><li>不确定 yarn 是否包含 <code>lerna publish</code> 那种自动检测和批量发布的命令 -- 支持不太好用</li><li>不确定 yarn 是否有类似于 <code>rush/nx</code> 的构建缓存功能 -- 没有原生支持，两个插件也都有各自的问题</li><li>概念太多实在太麻烦了，各种奇怪的问题 <ul><li><code>yarn npm publish</code> 会说权限错误，但实际上 <code>yarn npm login</code> 已经成功了，文档上说可以配置 <code>npmAuthToken</code>，但这是不合理的（将 token 加到 git 管理中）</li><li><code>yarn workspaces foreach exec yarn jest --all</code> 会报一个错误</li></ul></li>",4),K=s("对于 yarn2 pnp，目前 webstorm 仍然只有非常基本的支持，包括 prettier/jest 都存在问题，参考："),P={href:"https://youtrack.jetbrains.com/issue/WEB-35034",target:"_blank",rel:"noopener noreferrer"},Q=s("https://youtrack.jetbrains.com/issue/WEB-35034"),R=s("yarn 2 的社区接受度似乎极低，github 上依赖它的库不超过 100 个，参考："),V={href:"https://github.com/yarnpkg/berry/network/dependents?package_id=UGFja2FnZS03MDE5NDg3MjU%3D",target:"_blank",rel:"noopener noreferrer"},X=s("https://github.com/yarnpkg/berry/network/dependents?package_id=UGFja2FnZS03MDE5NDg3MjU%3D"),Y=l("h2",{id:"亮点",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#亮点","aria-hidden":"true"},"#"),s(" 亮点")],-1),$=l("ul",null,[l("li",null,"原生支持 workspaces"),l("li",null,"有插件 api，可以为自定义需求编写插件"),l("li",null,[s("cli 命令执行不再强绑定到 "),l("em",null,"node_modules/.bin")])],-1);i.render=function(s,o){const i=n("OutboundLink");return e(),a(r,null,[c,l("ul",null,[u,t,l("li",null,[d,p,h,l("a",b,[m,l(i)])]),l("li",null,[g,k,y,f,x,w,_,l("a",v,[j,l(i)]),D])]),F,E,M,U,q,A,B,G,N,S,W,Z,L,O,T,l("blockquote",null,[l("p",null,[l("a",z,[C,l(i)])])]),H,I,l("ul",null,[J,l("li",null,[K,l("a",P,[Q,l(i)])]),l("li",null,[R,l("a",V,[X,l(i)])])]),Y,$],64)};export default i;
