import{r as n,o as s,c as a,a as t,F as e,b as p,d as o}from"./app.1a2db17f.js";const c={},l=t("h2",{id:"场景",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#场景","aria-hidden":"true"},"#"),p(" 场景")],-1),r={href:"https://github.com/rxliuli/example/tree/master/basic_list",target:"_blank",rel:"noopener noreferrer"},i=p("GitHub 源码"),u=o('<p>在后台项目中，即便使用了 antd，仍然存在太多太多的列表页面。这些列表页面大多数又是非常相似的，所以吾辈需要解决重复的简单列表的编写，避免每次都手动控制过滤器/分页之类的东西，将之抽象成配置项，然后通过配置生成列表页面。或许已经有很多人做过了这件事情，但于吾辈而言，这仍然是全新的体验，所以也便于此记录，并供之以他人参考。</p><h2 id="理念" tabindex="-1"><a class="header-anchor" href="#理念" aria-hidden="true">#</a> 理念</h2><p>使用逐级递进的方式进行封装，使用者可以根据需求停留在一个合适的封装层次，使用不同封装层次的组件。</p><ul><li><code>BasicList</code>：高层列表封装组件 <ul><li><code>ListHeader</code>：列表页顶部工具栏组件 <ul><li><code>CommonHeader</code>: 通用的顶部工具栏组件</li></ul></li><li><code>ListFilter</code>：过滤器组件 <ul><li><code>FilterSelect</code>：单选过滤器</li><li><code>FilterTimeRange</code>：时间区间过滤器</li><li><code>FilterSlot</code>：自定义过滤器</li></ul></li><li><code>ListTable</code>：列表封装组件</li></ul></li></ul><p>BasicList 使用步骤</p><div class="language-mermaid ext-mermaid line-numbers-mode"><pre class="language-mermaid"><code>graph TD;\nA[添加 api class 实现 BasicListApi] --&gt; B[添加配置项]\nB --&gt; C{是否需要动态修改};\nC --&gt; |是| C1[使用 useMemo 声明]\nC --&gt; |否| C2[将之抽离到组件外部声明为常量]\nC1 --&gt; D\nC2 --&gt; D\nD{是否有非通用 Filter}\nD --&gt; |是| D1[自定义 slot filter]\nD --&gt; |否| D2[使用 select/time filter]\nD1 --&gt; E\nD2 --&gt; E\nE{是否需要自定义表格相关功能}\nE --&gt; |是| E1[使用 filterOperate 配置]\nE --&gt; |否| E2[不声明 filter 配置]\nE1 --&gt; F\nE2 --&gt; F\nF[列表渲染]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>BasicList 渲染流程</p><div class="language-mermaid ext-mermaid line-numbers-mode"><pre class="language-mermaid"><code>graph TB\nA[从 props 拿到配置项列表] --&gt; B{header 是否为 ReactElement}\nB --&gt; |是| B1[直接渲染]\nB --&gt; |否| B2[使用 ListHeader 渲染 header 配置项]\nB1 --&gt; C\nB2 --&gt; C\nC{filters 是否存在}\nC --&gt; |是| C1{filters 是否为 ReactElement}\n  C1 --&gt; |是| C1A[直接渲染]\n  C1 --&gt; |否| C1B[使用 ListFilter 渲染 filters 配置项] --&gt; C1C[监听 initialParams 变化, 以随时修改 form]\nC --&gt; |否| C2[不渲染]\nC1A --&gt; D\nC1B --&gt; D\nC2 --&gt; D\nD[渲染列表]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h2><h3 id="使用基本-api" tabindex="-1"><a class="header-anchor" href="#使用基本-api" aria-hidden="true">#</a> 使用基本 API</h3>',10),d={href:"https://github.com/rxliuli/example/blob/master/basic_list/src/pages/example/BasicListExample.tsx",target:"_blank",rel:"noopener noreferrer"},k=p("GitHub 代码示例"),b=o('<p>如下所示，我们想要构造下面这样一个简单的列表页面，包含一个面包屑导航列表、搜索框、过滤条件选择器和一个表格。</p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;antd&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Moment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;moment&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> LabeledValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;antd/es/select&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> userApi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./api/UserApi&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  BasicList<span class="token punctuation">,</span>\n  BasicListPropsType<span class="token punctuation">,</span>\n  FilterFieldTypeEnum<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../components/list&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">PropsType</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Config</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>BasicListPropsType<span class="token punctuation">,</span> <span class="token string">&quot;params&quot;</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n  params<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    keyword<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    test<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    birthdayTimeRange<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">[</span>Moment<span class="token punctuation">,</span> Moment<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> testOptionList<span class="token operator">:</span> LabeledValue<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;测试 0&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;测试 1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&quot;测试 2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">//列表配置项</span>\n<span class="token keyword">const</span> config<span class="token operator">:</span> Config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  header<span class="token operator">:</span> <span class="token punctuation">{</span>\n    placeholder<span class="token operator">:</span> <span class="token string">&quot;用户名/住址&quot;</span><span class="token punctuation">,</span>\n    list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;用户&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;列表&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  filters<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> FilterFieldTypeEnum<span class="token punctuation">.</span>Select<span class="token punctuation">,</span>\n      label<span class="token operator">:</span> <span class="token string">&quot;测试字段&quot;</span><span class="token punctuation">,</span>\n      field<span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>\n      options<span class="token operator">:</span> testOptionList<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> FilterFieldTypeEnum<span class="token punctuation">.</span>TimeRange<span class="token punctuation">,</span>\n      label<span class="token operator">:</span> <span class="token string">&quot;生日&quot;</span><span class="token punctuation">,</span>\n      field<span class="token operator">:</span> <span class="token string">&quot;birthdayTimeRange&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  columns<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> field<span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&quot;ID&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> field<span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&quot;姓名&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> field<span class="token operator">:</span> <span class="token string">&quot;birthday&quot;</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&quot;生日&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      field<span class="token operator">:</span> <span class="token string">&quot;operate&quot;</span><span class="token punctuation">,</span>\n      title<span class="token operator">:</span> <span class="token string">&quot;操作&quot;</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">slot</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/system/user/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>param<span class="token punctuation">.</span>record<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">详情</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  api<span class="token operator">:</span> userApi<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * 一个基本的列表页面\n * @constructor\n */</span>\n<span class="token keyword">const</span> BasicListExample<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>PropsType<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BasicList</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>config<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> BasicListExample<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div><h3 id="使用自定义过滤器组件" tabindex="-1"><a class="header-anchor" href="#使用自定义过滤器组件" aria-hidden="true">#</a> 使用自定义过滤器组件</h3>',3),m={href:"https://github.com/rxliuli/example/blob/master/basic_list/src/pages/example/CustomFilterListExample.tsx",target:"_blank",rel:"noopener noreferrer"},h=p("GitHub 代码示例"),g=o('<p>事实上，总有各种奇怪的过滤器无法满足，这时候就需要添加一个自定义的过滤器了。 例如下面这个过滤器，包含了年龄的值和单位，是不是感觉很奇怪</p><p>关键代码配置如下</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">const</span> config<span class="token operator">:</span> Config <span class="token operator">=</span> <span class="token punctuation">{</span>\n  filters<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> FilterFieldTypeEnum<span class="token punctuation">.</span>Slot<span class="token punctuation">,</span>\n      label<span class="token operator">:</span> <span class="token string">&quot;年龄&quot;</span><span class="token punctuation">,</span>\n      field<span class="token operator">:</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span>\n      children<span class="token operator">:</span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input.Group</span></span> <span class="token attr-name">compact</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form.Item</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token attr-name">noStyle</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">InputNumber</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token string">&quot;calc(100% - 64px)&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form.Item</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Form.Item</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;unit&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token attr-name">noStyle</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Select</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token number">64</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ageUnitOptionList<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Form.Item</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Input.Group</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// 此处是为了添加过滤器的默认值</span>\n  params<span class="token operator">:</span> <span class="token punctuation">{</span>\n    age<span class="token operator">:</span> <span class="token punctuation">{</span>\n      unit<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="添加表格的额外操作" tabindex="-1"><a class="header-anchor" href="#添加表格的额外操作" aria-hidden="true">#</a> 添加表格的额外操作</h3>',4),y={href:"https://github.com/rxliuli/example/blob/master/basic_list/src/pages/example/TableOperationListExample.tsx",target:"_blank",rel:"noopener noreferrer"},f=p("GitHub 代码示例"),x=o('<p>有时候，我们需要添加一个额外的表格操作，例如导出/导入数据/删除选中数据。</p><p>关键代码如下</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleBatchDelete</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>\n  selectedRowKeys<span class="token punctuation">,</span>\n  setSelectedRowKeys<span class="token punctuation">,</span>\n  searchPage<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token operator">:</span> ListTableOperateParam</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedRowKeys<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">await</span> userApi<span class="token punctuation">.</span><span class="token function">batchDelete</span><span class="token punctuation">(</span>selectedRowKeys<span class="token punctuation">)</span>\n  <span class="token function">setSelectedRowKeys</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token keyword">await</span> <span class="token function">searchPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> config <span class="token operator">=</span> useMemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Config</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(\n  () =&gt; (</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">tableOperate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">handleBatchDelete</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">删除选中</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token plain-text">),\n  [],\n)\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="过滤器的下拉框数据来源是异步的" tabindex="-1"><a class="header-anchor" href="#过滤器的下拉框数据来源是异步的" aria-hidden="true">#</a> 过滤器的下拉框数据来源是异步的</h3>',4),q={href:"https://github.com/rxliuli/example/blob/master/basic_list/src/pages/example/AsyncSelectOptionsListExample.tsx",target:"_blank",rel:"noopener noreferrer"},w=p("GitHub 代码示例"),F=o('<p>很多时候，我们的数据来源并不是由前端写死，而是从后台获取的，这就要求我们传入的值是 react 的一个 State 而非一个固定值。</p><p>关键代码如下</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">const</span> testOptionList <span class="token operator">=</span> <span class="token function">useAsyncMemo</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dictApi<span class="token punctuation">.</span>list<span class="token punctuation">)</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> useMemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Config</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(\n  () =&gt; (</span><span class="token punctuation">{</span>\n    filters<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        type<span class="token operator">:</span> FilterFieldTypeEnum<span class="token punctuation">.</span>Select<span class="token punctuation">,</span>\n        label<span class="token operator">:</span> <span class="token string">&#39;测试字段&#39;</span><span class="token punctuation">,</span>\n        field<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>\n        options<span class="token operator">:</span> testOptionList<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token plain-text">),\n  [testOptionList],\n)\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="组件-api" tabindex="-1"><a class="header-anchor" href="#组件-api" aria-hidden="true">#</a> 组件 API</h2><h3 id="basiclist" tabindex="-1"><a class="header-anchor" href="#basiclist" aria-hidden="true">#</a> BasicList</h3><p>参考 <em>src/components/common/table/js/BasicListOptions.d.ts</em></p><table><thead><tr><th><code>prop</code></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>header</code></td><td><code>BasicList.Header</code></td><td>标题栏相关配置</td></tr><tr><td><code>[filters]</code></td><td><code>BaseFilterField[]</code></td><td>过滤器列表</td></tr><tr><td></td><td><code>((params: any, onChange: (params: any) =&gt; void) =&gt; ReactElement)</code></td><td></td></tr><tr><td><code>[params]</code></td><td><code>Params</code></td><td>查询参数</td></tr><tr><td><code>columns</code></td><td><code>TableColumn[]</code></td><td>列字段列表</td></tr><tr><td><code>api</code></td><td><code>BaseListApi</code></td><td>api 对象</td></tr><tr><td><code>[tableOptions]</code></td><td><code>TableOptions</code></td><td>一些其他选项</td></tr><tr><td><code>[tableOperate]</code></td><td><code>ListTableOperate</code></td><td>一些其他操作</td></tr></tbody></table><h3 id="listfilter" tabindex="-1"><a class="header-anchor" href="#listfilter" aria-hidden="true">#</a> ListFilter</h3><p>| <code>prop</code> | 类型 | 说明 | | ---------------- | -------------------- | ------------------------ | ------------------ | ---------- | | <code>[initialValue]</code> | <code>any</code> | 查询参数 | | <code>filters</code> | <code>(FilterSelectType | FilterTimeRangeType | FilterSlotType)[]</code> | 过滤器列表 | | <code>onChange</code> | <code>(value: T) =&gt; void</code> | 当过滤器的参数发生改变时 |</p><h3 id="listtable" tabindex="-1"><a class="header-anchor" href="#listtable" aria-hidden="true">#</a> ListTable</h3><table><thead><tr><th><code>prop</code></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>columns</code></td><td><code>TableColumn[]</code></td><td>列字段列表</td></tr><tr><td><code>api</code></td><td><code>BaseListApi</code></td><td>api 对象</td></tr><tr><td><code>params</code></td><td><code>Params</code></td><td>查询参数</td></tr><tr><td><code>[tableOptions]</code></td><td><code>TableOptions</code></td><td>一些其他选项</td></tr><tr><td><code>[tableOperate]</code></td><td><code>ListTableOperate</code></td><td>一些其他选项</td></tr></tbody></table><h2 id="其他类型定义" tabindex="-1"><a class="header-anchor" href="#其他类型定义" aria-hidden="true">#</a> 其他类型定义</h2><p>下面是类型定义，所有的类型定义都有对应的 <code>.d.ts</code> 文件，请使用 <code>C-N</code> 搜索 <code>class</code>。</p><table><thead><tr><th><code>HeaderNavItem</code></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>string</code></td><td></td><td>导航的名字</td></tr><tr><td><code>name</code></td><td><code>string</code></td><td>导航的名字</td></tr><tr><td><code>[link]</code></td><td><code>string</code></td><td>如果是 route 的话必须有值</td></tr></tbody></table><table><thead><tr><th><code>Header</code></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>list</code></td><td><code>HeaderNavItem[]</code></td><td>导航元素列表</td></tr><tr><td><code>placeholder</code></td><td><code>string</code></td><td>搜索框的提示文本</td></tr></tbody></table><h3 id="过滤器相关" tabindex="-1"><a class="header-anchor" href="#过滤器相关" aria-hidden="true">#</a> 过滤器相关</h3><table><thead><tr><th><code>FilterFieldTypeEnum</code></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>Slot</code></td><td><code>1</code></td><td>自定义 slot</td></tr><tr><td><code>Select</code></td><td><code>2</code></td><td>普通选择框</td></tr><tr><td><code>TimeRange</code></td><td><code>3</code></td><td>日期区间选择器</td></tr></tbody></table><table><thead><tr><th><code>FilterFieldBase</code></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>type</code></td><td><code>FilterFieldTypeEnum</code></td><td>过滤器元素类型</td></tr><tr><td><code>label</code></td><td><code>string</code></td><td>显示的标题</td></tr></tbody></table><table><thead><tr><th><code>FilterSelectType</code></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>extends</code></td><td><code>FilterFieldBase</code></td><td>继承基本过滤器配置</td></tr><tr><td><code>field</code></td><td><code>string</code></td><td>字段名</td></tr><tr><td><code>options</code></td><td><code>LabeledValue[]</code></td><td>值列表</td></tr></tbody></table><table><thead><tr><th><code>FilterTimeRangeType</code></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>extends</code></td><td><code>FilterFieldBase</code></td><td>继承基本过滤器配置</td></tr><tr><td><code>field</code></td><td><code>string</code></td><td>字段名</td></tr></tbody></table><table><thead><tr><th><code>FilterSlotType</code></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>extends</code></td><td><code>FilterFieldBase</code></td><td>继承基本过滤器配置</td></tr><tr><td><code>field</code></td><td><code>string</code></td><td>字段名</td></tr><tr><td><code>children</code></td><td><code>ReactElement</code></td><td><code>Form.Item</code> 的子元素</td></tr><tr><td><code>[computed]</code></td><td><code>(res: Record&lt;string, any&gt;, value: any) =&gt; Record&lt;string, any&gt;</code></td><td>自定义计算方法</td></tr></tbody></table><table><thead><tr><th><code>Params</code></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>keyword</code></td><td><code>string</code></td><td>查询关键字</td></tr><tr><td><code>...args</code></td><td><code>any[]</code></td><td>其他查询参数</td></tr></tbody></table><h3 id="表格相关" tabindex="-1"><a class="header-anchor" href="#表格相关" aria-hidden="true">#</a> 表格相关</h3><table><thead><tr><th><code>TableColumn</code></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>field</code></td><td><code>string</code></td><td>在数据项中对应的字段名</td></tr><tr><td><code>title</code></td><td><code>string</code></td><td>列标题</td></tr><tr><td><code>[formatter]</code></td><td><code>(v: any, record: any) =&gt; any</code></td><td>自定义字段格式化函数</td></tr><tr><td><code>[slot]</code></td><td><code>(param: { text: string; record: any; i: number }) =&gt; ReactNode</code></td><td>自定义 <code>slot</code></td></tr></tbody></table><table><thead><tr><th><code>BaseListApi</code></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>pageList</code></td><td><code>(params: any) =&gt; Promise&lt;PageRes&lt;any&gt;&gt;</code></td><td>所有 ListTable 中的 api 对象必须实现该类型</td></tr></tbody></table><table><thead><tr><th><code>ListTableOperateParam</code></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>searchPage</code></td><td><code>(page?: PageParam) =&gt; Promise&lt;void&gt;</code></td><td>导航元素列表</td></tr><tr><td><code>selectedRowKeys</code></td><td><code>string[]</code></td><td>当前选中行的主键</td></tr><tr><td><code>setSelectedRowKeys</code></td><td><code>(selectedRowKeys: string[]) =&gt; void</code></td><td>设置当前选中行的主键</td></tr><tr><td><code>page</code></td><td><code>PageData&lt;any&gt;</code></td><td>分页数据信息</td></tr><tr><td><code>params</code></td><td><code>Params</code></td><td>过滤器及搜索参数</td></tr></tbody></table><table><thead><tr><th><code>TableOptions</code></th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>[isSelect]</code></td><td><code>boolean</code></td><td>是否可选，默认为 false</td></tr><tr><td><code>[rowKey]</code></td><td><code>string</code></td><td>行的唯一键，默认为 id</td></tr></tbody></table><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>相比于之前吾辈 <a href="/p/90548a371a16435799bcbfae3e4dbfb6">Vue 表格封装 BasicTableVue</a>，嗯，差距非常明显！</p>',29);c.render=function(p,o){const c=n("OutboundLink");return s(),a(e,null,[l,t("blockquote",null,[t("p",null,[t("a",r,[i,t(c)])])]),u,t("blockquote",null,[t("p",null,[t("a",d,[k,t(c)])])]),b,t("blockquote",null,[t("p",null,[t("a",m,[h,t(c)])])]),g,t("blockquote",null,[t("p",null,[t("a",y,[f,t(c)])])]),x,t("blockquote",null,[t("p",null,[t("a",q,[w,t(c)])])]),F],64)};export{c as default};
