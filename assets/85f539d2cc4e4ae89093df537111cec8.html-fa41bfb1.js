import{_ as p,M as o,p as c,q as i,R as n,t as s,N as e,a1 as t}from"./framework-96b046e1.js";const l="/assets/92f7aa2fcd894107b05056f5c662e051-9f3b253e.png",r={},u=t(`<h2 id="场景" tabindex="-1"><a class="header-anchor" href="#场景" aria-hidden="true">#</a> 场景</h2><p>在很多生产项目中，我们希望自定义 electron 窗口顶栏，因为它确实非常简陋。</p><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤</h2><h3 id="在渲染层实现自定义顶栏" tabindex="-1"><a class="header-anchor" href="#在渲染层实现自定义顶栏" aria-hidden="true">#</a> 在渲染层实现自定义顶栏</h3><p>实际上，核心的代码就是添加一个为顶栏的元素添加 css 样式。在 electron 环境，有 <code>-webkit-app-region: drag;</code> 属性的元素可以拖动整个窗口。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.toolbar</span> <span class="token punctuation">{</span>
  <span class="token property">-webkit-app-region</span><span class="token punctuation">:</span> drag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.toolbar &gt; *</span> <span class="token punctuation">{</span>
  <span class="token property">-webkit-app-region</span><span class="token punctuation">:</span> no-drag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 css 看起来有点奇怪，但这是为了避免子元素（例如关闭按钮）也可以拖动的错误。</p>`,7),d={href:"https://www.electronjs.org/docs/api/browser-window#event-system-context-menu-windows",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/rxliuli/electron_example/blob/18a1a756e5c82e87ef1c8755a0be036b6765f04b/apps/renderer/src/components/router/component/BasicLayout.module.css#L13",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="使用-electron-通信实现窗口的三个操作" tabindex="-1"><a class="header-anchor" href="#使用-electron-通信实现窗口的三个操作" aria-hidden="true">#</a> 使用 electron 通信实现窗口的三个操作</h3><p>其实，electron 本身支持在渲染层暴露 <code>remote</code> 模块，但这里我们选择使用 <code>ipcRenderer/ipcMain</code> 手动实现，remote 模块因为安全原因默认被禁用了。</p><p>下面的步骤基本和 <a href="/p/76393a60949c47c7add910df0206734c">渲染、主进程通信</a> 所属一样，下面贴一些关键代码</p><p>共享类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// WindowDefine.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BaseDefine <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;electron_ipc_type&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">WindowDefine</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDefine<span class="token operator">&lt;</span><span class="token string">&#39;WindowApi&#39;</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token function">action</span><span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token string">&#39;min&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;max&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;close&#39;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主进程</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>
<span class="token keyword">class</span> <span class="token class-name">WindowApi</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">action</span><span class="token punctuation">(</span>e<span class="token operator">:</span> IpcMainInvokeEvent<span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;min&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;max&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;close&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> win <span class="token operator">=</span> BrowserWindow<span class="token punctuation">.</span><span class="token function">fromWebContents</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>sender<span class="token punctuation">)</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;min&#39;</span><span class="token operator">:</span>
        win<span class="token punctuation">.</span><span class="token function">minimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
      <span class="token keyword">case</span> <span class="token string">&#39;max&#39;</span><span class="token operator">:</span>
        win<span class="token punctuation">.</span><span class="token function">isMaximized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> win<span class="token punctuation">.</span><span class="token function">unmaximize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> win<span class="token punctuation">.</span><span class="token function">maximize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
      <span class="token keyword">case</span> <span class="token string">&#39;close&#39;</span><span class="token operator">:</span>
        win<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>渲染进程</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// BasicLayout.tsx</span>
<span class="token keyword">const</span> windowApi <span class="token operator">=</span> IpcRendererClient<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">gen</span><span class="token generic class-name"><span class="token operator">&lt;</span>WindowDefine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;WindowApi&#39;</span><span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
 * 封装 electron 的窗口控制 hooks
 */</span>
<span class="token keyword">function</span> <span class="token function">useElectronWindowControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">handleMin</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> windowApi<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token string">&#39;min&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">handleMax</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> windowApi<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token string">&#39;max&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">handleClose</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> windowApi<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),m={href:"https://github.com/rxliuli/electron_example/tree/3aea837b0c7661e030406a0c20d306694402a26f",target:"_blank",rel:"noopener noreferrer"},b=t(`<h3 id="隐藏掉默认的顶栏" tabindex="-1"><a class="header-anchor" href="#隐藏掉默认的顶栏" aria-hidden="true">#</a> 隐藏掉默认的顶栏</h3><p>实际上，只要在创建 electron 的 <code>BrowserWindow</code> 实例时配置即可</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  webPreferences<span class="token operator">:</span> <span class="token punctuation">{</span>
    nodeIntegration<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  frame<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  autoHideMenuBar<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，electron 程序就有自定义顶栏啦</p><p><img src="`+l+'" alt="1611134001681.png"></p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><p>虽然自定义窗口顶栏有很多优点，但也并非尽善尽美，已知缺点如下</p><ul><li>占有了一定高度，导致一些 UI 组件的位置很奇怪，例如顶部的消息提示框和侧边抽屉，会遮挡住窗口顶栏的一部分。</li><li>可能随着系统升级与系统风格不搭，早有人吐槽过 Windows 所有程序的自定义顶栏都是不一样的高度和大小，非常丑</li><li>需要重新实现窗口菜单相关的快捷键，例如 <code>ctrl+shift+i</code> 打开开发者工具</li><li>在 mac 上需要进行特别的兼容，否则和其他程序会显得格格不入</li></ul>',8);function f(h,w){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("blockquote",null,[n("p",null,[n("a",d,[s("参考文档"),e(a)]),s(", "),n("a",k,[s("参考代码"),e(a)])])]),v,n("blockquote",null,[n("p",null,[n("a",m,[s("参考代码"),e(a)])])]),b])}const y=p(r,[["render",f],["__file","85f539d2cc4e4ae89093df537111cec8.html.vue"]]);export{y as default};
