import{_ as e,M as o,p as c,q as l,R as n,t as s,N as p,a1 as t}from"./framework-96b046e1.js";const i="/assets/a744f749ef6f4652aa82f5dbcb1e22d8-e3aafe3d.svg",r={},u=n("h2",{id:"场景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#场景","aria-hidden":"true"},"#"),s(" 场景")],-1),k=n("p",null,"由于 electron 应用分为主进程、渲染进程，所以它们之间需要通信。而 electron 本身实现了一个简单的 event emitter 通信模型，虽然能用，但并不足够好。",-1),d={href:"https://www.electronjs.org/docs/api/ipc-renderer",target:"_blank",rel:"noopener noreferrer"},v=t('<p>问题</p><ul><li>基于字符串和约定进行通信本质上和当下前后端通信差不多，没有利用同构优势</li><li>使用起来没有任何限制，意味着很难维护（非强制性的约定基本上都很难生效）</li></ul><h2 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h2><p>那么一共 electron 进程通信有哪些情况呢？</p><ul><li>渲染进程 =&gt; 主进程</li><li>主进程 =&gt; 渲染进程</li><li>渲染进程 =&gt; 渲染进程</li></ul><p>而其中最常用的便是 <code>渲染进程 =&gt; 主进程</code></p>',6),m={href:"https://www.npmjs.com/package/electron-rpc-api",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.npmjs.com/package/comlink",target:"_blank",rel:"noopener noreferrer"},y=t('<p>最终，吾辈选择了接口 + 实现类的基本模式</p><p><img src="'+i+`" alt="设计图.drawio.svg"></p><h2 id="实现渲染进程-主进程" tabindex="-1"><a class="header-anchor" href="#实现渲染进程-主进程" aria-hidden="true">#</a> 实现渲染进程 =&gt; 主进程</h2><p>首先在创建 <em>libs</em> 目录用以存放通用模块（非业务），然后创建三个模块</p><ul><li><code>electron_ipc_type</code>: 一些需要引入的类型</li><li><code>electron_ipc_main</code>: 主进程封装</li><li><code>electron_ipc_renderer</code>: 渲染层封装</li></ul><blockquote><p>此处使用 rollup 进行打包</p></blockquote><p>大致实现</p><p>electron_ipc_type: 通用的基本接口定义，必须包含一个 <code>namespace</code> 属性</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">BaseDefine<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  namespace<span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>electron_ipc_main: 封装主进程实现相关代码，主要保证类型安全</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">FilteredKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span>

<span class="token doc-comment comment">/**
 * 转换为一个主进程可以实现的接口
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">IpcMainDefine<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> FilteredKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span>
    e<span class="token operator">:</span> IpcMainInvokeEvent<span class="token punctuation">,</span>
    <span class="token operator">...</span>args<span class="token operator">:</span> Parameters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">IpcMainProvider</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">readonly</span> clazzMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> object<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token doc-comment comment">/**
   * 计算主进程监听的 key
   * <span class="token keyword">@param</span> <span class="token parameter">namespace</span>
   * <span class="token keyword">@param</span> <span class="token parameter">method</span>
   * <span class="token keyword">@private</span>
   */</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generic-function"><span class="token function">getKey</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>namespace<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> method<span class="token operator">:</span> PropertyKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> namespace <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token generic-function"><span class="token function">register</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> BaseDefine<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>
    namespace<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;namespace&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    api<span class="token operator">:</span> IpcMainDefine<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> IpcMainDefine<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> instance <span class="token operator">=</span> ClassUtil<span class="token punctuation">.</span><span class="token function">bindMethodThis</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span>
    <span class="token keyword">const</span> methods <span class="token operator">=</span> ClassUtil<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
    methods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> IpcMainProvider<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> method<span class="token punctuation">)</span>
      ipcMain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> instance<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Register ipcMain.handle: &#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clazzMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> instance<span class="token punctuation">)</span>
    <span class="token keyword">return</span> instance
  <span class="token punctuation">}</span>

  <span class="token generic-function"><span class="token function">unregister</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> BaseDefine<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>
    namespace<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;namespace&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    api<span class="token operator">:</span> IpcMainDefine<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> methods <span class="token operator">=</span> ClassUtil<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span>
    methods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> IpcMainProvider<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> method<span class="token punctuation">)</span>
      ipcMain<span class="token punctuation">.</span><span class="token function">removeHandler</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clazzMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>electron_ipc_renderer: 渲染进程</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">FilteredKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span>

<span class="token doc-comment comment">/**
 * 转换为一个渲染进程可以调用的 Proxy 对象
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">IpcRendererDefine<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> FilteredKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span>
    <span class="token operator">...</span>args<span class="token operator">:</span> Parameters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">NotElectronEnvError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">IpcRendererClient</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 生成一个客户端实例
   * <span class="token keyword">@param</span> <span class="token parameter">namespace</span>
   */</span>
  <span class="token keyword">static</span> <span class="token generic-function"><span class="token function">gen</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> BaseDefine<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>
    namespace<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;namespace&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> IpcRendererDefine<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> api<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> key <span class="token operator">=</span> namespace <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> api
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> ipcRenderer <span class="token operator">=</span> IpcRendererClient<span class="token punctuation">.</span><span class="token function">getRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ipcRenderer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotElectronEnvError</span><span class="token punctuation">(</span><span class="token string">&#39;当前你不在 electron 进程中&#39;</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> ipcRenderer<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 获取 electron ipc renderer 实例
   */</span>
  <span class="token keyword">static</span> <span class="token function">getRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IpcRenderer <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isElectron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> window<span class="token punctuation">.</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ipcRenderer <span class="token keyword">as</span> IpcRenderer
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>使用</p><p>在 apps 下创建一个模块 <code>shared_type</code>，里面包含一些渲染进程与主进程之间共享的类型，下面是一个简单的示例</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// HelloDefine.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">HelloDefine</span> <span class="token keyword">extends</span> <span class="token class-name">BaseDefine<span class="token operator">&lt;</span><span class="token string">&#39;HelloApi&#39;</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在主进程中使用 class 实现它并注册</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>

<span class="token keyword">class</span> <span class="token class-name">HelloApi</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">hello</span><span class="token punctuation">(</span>e<span class="token operator">:</span> IpcMainInvokeEvent<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> ipcMainProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IpcMainProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

ipcMainProvider<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">register</span><span class="token generic class-name"><span class="token operator">&lt;</span>HelloDefine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;HelloApi&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HelloApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在渲染进程中创建客户端对象并使用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> helloApi <span class="token operator">=</span> IpcRendererClient<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">gen</span><span class="token generic class-name"><span class="token operator">&lt;</span>HelloDefine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;HelloApi&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token keyword">await</span> helloApi<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">&#39;liuli&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现主进程-渲染进程" tabindex="-1"><a class="header-anchor" href="#实现主进程-渲染进程" aria-hidden="true">#</a> 实现主进程 =&gt; 渲染进程</h2><p>由于吾辈的 ui 层框架使用了 react，所以基于 class 的模式在此并不适用，需要使用某种变通的方式（吾辈仍然不愿意放弃将 class 作为命名空间的想法）。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">IpcRendererProviderDefine<span class="token operator">&lt;</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> BaseDefine<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token constant">P</span> <span class="token keyword">extends</span> FunctionKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> FunctionKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  type<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">,</span>
  <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> Parameters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name">IpcRendererProviderHooksDefine<span class="token operator">&lt;</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> BaseDefine<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token constant">P</span> <span class="token keyword">extends</span> FunctionKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> FunctionKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  type<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">,</span>
  <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> Parameters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
  deps<span class="token operator">?</span><span class="token operator">:</span> DependencyList<span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token doc-comment comment">/**
 * 在渲染层管理提供者
 */</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">IpcRendererProvider<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> BaseDefine<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> apiMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> namespace<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;namespace&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">register</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span>type<span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token operator">:</span> IpcRendererProviderDefine<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ipcRenderer <span class="token operator">=</span> IpcRendererClient<span class="token punctuation">.</span><span class="token function">getRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ipcRenderer <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;不在 electron 环境，取消注册: &#39;</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> <span class="token keyword">type</span>
    <span class="token class-name"><span class="token builtin">console</span></span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;IpcRendererProvider.register: &#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">listener</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;IpcRendererProvider.listener: &#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">,</span> id<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">callback</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>args <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> ipcRenderer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> ipcRenderer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    ipcRenderer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> listener<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>apiMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> listener<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">unregister</span><span class="token punctuation">(</span>type<span class="token operator">:</span> IpcRendererProviderDefine<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ipcRenderer <span class="token operator">=</span> IpcRendererClient<span class="token punctuation">.</span><span class="token function">getRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ipcRenderer <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>namespace <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> <span class="token keyword">type</span>
    <span class="token class-name">ipcRenderer</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>apiMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>apiMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * react 中的注册钩子，自动管理清理的操作
   * <span class="token keyword">@param</span> <span class="token parameter">type</span>
   * <span class="token keyword">@param</span> <span class="token parameter">callback</span>
   * <span class="token keyword">@param</span> <span class="token parameter">deps</span>
   */</span>
  <span class="token function">useIpcProvider</span><span class="token punctuation">(</span>
    <span class="token operator">...</span><span class="token punctuation">[</span>type<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> IpcRendererProviderHooksDefine<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> deps<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 转换为一个渲染进程可以调用的 Proxy 对象
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">IpcClientDefine<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> FunctionKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span>
    <span class="token operator">...</span>args<span class="token operator">:</span> Parameters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 客户端
 */</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">IpcMainClient</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 生成一个客户端实例
   * <span class="token keyword">@param</span> <span class="token parameter">namespace</span>
   * <span class="token keyword">@param</span> <span class="token parameter">win</span>
   */</span>
  <span class="token keyword">static</span> <span class="token generic-function"><span class="token function">gen</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> BaseDefine<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>
    namespace<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;namespace&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    win<span class="token operator">:</span> BrowserWindow<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> IpcClientDefine<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> FunctionKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> api<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> key <span class="token operator">=</span> namespace <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> api
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span>ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> id <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            ipcMain<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> err<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;callback: &#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
                <span class="token keyword">return</span>
              <span class="token punctuation">}</span>
              <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;send: &#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> id<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
            win<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>args <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>使用</p><p>在渲染进程使用 hooks 注册它</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> ipcRendererProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IpcRendererProvider<span class="token operator">&lt;</span>HelloApiDefine<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&#39;HelloApi&#39;</span><span class="token punctuation">)</span>

ipcRendererProvider<span class="token punctuation">.</span><span class="token function">useIpcProvider</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在主进程生成客户端实例调用它</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> helloApi <span class="token operator">=</span> IpcMainClient<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">gen</span><span class="token generic class-name"><span class="token operator">&lt;</span>HelloApiDefine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  <span class="token string">&#39;HelloApi&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token keyword">await</span> helloApi<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">&#39;liuli&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="约定俗成" tabindex="-1"><a class="header-anchor" href="#约定俗成" aria-hidden="true">#</a> 约定俗成</h2><ul><li>在 <code>shared_type</code> 模块中的接口定义总是 <code>*Define</code> 形式，且实现的 <code>BaseDefine&lt;T&gt;</code> 泛型参数是 <code>*Api</code> 形式</li><li>在 <code>main</code> 模块中实现的 class 总是 <code>*Api</code> 形式</li><li>在 <code>renderer</code> 模块中获取的 client 实例总是 <code>*Api</code> 小写驼峰形式</li><li>实现 <code>BaseDefine&lt;T&gt;</code> 传入的命名空间参数不应该重复</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>electron 本身的进程通信 api 在逐渐发展，但目前仍然没有足够好用，所以吾辈不得不进行了封装。</p>`,35);function g(w,f){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,k,n("blockquote",null,[n("p",null,[s("参考: "),n("a",d,[s("https://www.electronjs.org/docs/api/ipc-renderer"),p(a)])])]),v,n("blockquote",null,[n("p",null,[s("其实吾辈也看过许多 electron 进程通信的 "),n("a",m,[s("封装库"),p(a)]),s(" 或者类似场景的 rpc 实现 "),n("a",b,[s("comlink"),p(a)]),s("，但最终还是决定使用接口 + 主进程实现 + 渲染层根据接口生成 Client 的方式实现。")])]),y])}const T=e(r,[["render",g],["__file","76393a60949c47c7add910df0206734c.html.vue"]]);export{T as default};
