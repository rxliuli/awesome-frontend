import{r as n,o as s,c as l,a as e,F as a,b as r}from"./app.b503e00a.js";const i={},u=e("h2",{id:"场景",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#场景","aria-hidden":"true"},"#"),r(" 场景")],-1),c=e("p",null,"在我们使用 monorepo 将所有的前端项目放到一个项目中后，会面临各种各样的问题，其中的多个通用模块的初始化也会是一个问题。",-1),t=e("p",null,[e("img",{src:"/assets/2779a9f352d849a6bb3c6fa91ca33c48.fcd942dc.svg",alt:"monorepo 模块依赖图.drawio.svg"})],-1),o=e("p",null,"下面是目前实践过的一些解决方案",-1),p=e("ul",null,[e("li",null,"增量构建"),e("li",null,"捆绑依赖项"),e("li",null,"基于 esbuild"),e("li",null,"不构建 dts")],-1),b=e("h2",{id:"增量构建",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#增量构建","aria-hidden":"true"},"#"),r(" 增量构建")],-1),d=e("p",null,[r("每次修改 libs 中的内容，其他人通过 git 拉取时都需要重新 "),e("code",null,"initialize"),r("，如果知道在哪个包还好，可以仅运行指定包的 "),e("code",null,"initialize"),r(" 命令。如果不知道的话，则需要运行根目录的 "),e("code",null,"initialize"),r(" 命令，这其实是非常缓慢的，因为它会重新运行所有包含 "),e("code",null,"intialize"),r(" 命令的 npm 包，而不管它们是否有变更。")],-1),m=e("ol",null,[e("li",null,"减少 initialize 时间，提高协作的开发体验"),e("li",null,"支持 ci/cd 缓存已构建的 libs，加快构建时间")],-1),h=e("p",null,"需求",-1),k=e("ul",null,[e("li",null,"尽可能地按照依赖图并发执行命令，并且基于 git 变更实现缓存"),e("li",null,"在指定模块依赖的模块执行命令"),e("li",null,"在所有子模块中执行命令")],-1),g=e("p",null,"真实项目构建时间",-1),f=e("ul",null,[e("li",null,[e("code",null,"lerna run"),e("ul",null,[e("li",null,"新项目首次初始化 198.54s"),e("li",null,"非新项目再次初始化 90.17s")])])],-1),x=e("p",null,"吾辈在 yarn-plugin-changed 模块中基于 yarn2 实现了这个功能。",-1),j=e("h2",{id:"捆绑依赖项",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#捆绑依赖项","aria-hidden":"true"},"#"),r(" 捆绑依赖项")],-1),v=e("p",null,"加载一个文件总比加载 100 个小文件要快，这也是为什么 webpack 等工具会将开发的代码打包，yarn2 推动 pnp 的主要原因之一。对于 cli 而言，也是一样的道理，将依赖尽可能地打包到 bundle 中就好了。虽然打包本身会增加一点时间，但在其他模块使用 cli 时就会快一些。",-1),y=e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,"real    0m44.142s\nuser    0m0.122s\nsys     0m0.214s\n")]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br")])],-1),z=e("p",null,"44.142s => 30s 438ms",-1),w={href:"https://code.visualstudio.com/api/working-with-extensions/bundling-extension",target:"_blank",rel:"noopener noreferrer"},C=r("参考 VSCode 打包指南"),$=e("h2",{id:"基于-esbuild",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#基于-esbuild","aria-hidden":"true"},"#"),r(" 基于 esbuild")],-1),q=e("p",null,"rollup 使用 js 编写，它在使用必须的插件之后打包非常缓慢（可能部分要归结于 tsc 本身也非常慢），而 esbuild 在官方性能测试中要快 10-100 倍，这为性能优化提供了一种思路：将 CPU 密集型的功能使用高性能的语言构建。在使用 esbuild 命令行时，基本上，lib/cli 都能在数百毫秒内完成构建，而其中实际运行构建代码的时间大约只有几十毫秒，大部分时间是在等待 cli 启动。",-1),F=e("p",null,"下面是一个在单模块的性能测试",-1),L=e("p",null,"esbuild cli",-1),O=e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"time"),r(" esbuild src/bin.ts --bundle --external:esbuild --external:@yarnpkg/cli --platform"),e("span",{class:"token operator"},"="),r("node --outfile"),e("span",{class:"token operator"},"="),r("dist/bin.js --sourcemap "),e("span",{class:"token operator"},"&&"),r(),e("span",{class:"token punctuation"},"\\"),r("\n"),e("span",{class:"token function"},"time"),r(" esbuild src/index.ts --bundle --external:esbuild --external:@yarnpkg/cli --external:fs-extra --platform"),e("span",{class:"token operator"},"="),r("node --format"),e("span",{class:"token operator"},"="),r("cjs --outfile"),e("span",{class:"token operator"},"="),r("dist/index.js --sourcemap "),e("span",{class:"token operator"},"&&"),r(),e("span",{class:"token punctuation"},"\\"),r("\n"),e("span",{class:"token function"},"time"),r(" esbuild src/index.ts --bundle --external:esbuild --external:@yarnpkg/cli --external:fs-extra --platform"),e("span",{class:"token operator"},"="),r("node --format"),e("span",{class:"token operator"},"="),r("esm --outfile"),e("span",{class:"token operator"},"="),r("dist/index.esm.js --sourcemap\n"),e("span",{class:"token comment"},"# 0m0.244s # 15ms"),r("\n"),e("span",{class:"token comment"},"# 0m0.211s # 4ms"),r("\n"),e("span",{class:"token comment"},"# 0m0.212s # 4ms"),r("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br")])],-1),P=e("p",null,"esbuild base nodejs cli",-1),S=e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"time"),r(" pinefield build cli "),e("span",{class:"token comment"},"# 0m2.276s # 1988ms"),r("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br")])],-1),U=e("h2",{id:"不构建-dts",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#不构建-dts","aria-hidden":"true"},"#"),r(" 不构建 dts")],-1),V=e("p",null,"为什么不构建 dts？",-1),_=e("p",null,"构建 dts 很慢，至于多慢呢？下面是一个构建 cli 的时间分析",-1),A=e("p",null,"不生成类型定义",-1),B=e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,[r("$ "),e("span",{class:"token function"},"time"),r(),e("span",{class:"token function"},"yarn"),r(" build\n√ 构建 cli: 141ms\n√ 构建 esm: 18ms\n√ 构建 cjs: 17ms\n构建完成: 142ms\n\nreal    0m4.000s\nuser    0m0.075s\nsys     0m0.138s\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br")])],-1),D=e("p",null,"生成类型定义",-1),E=e("div",{class:"language-bash ext-sh line-numbers-mode"},[e("pre",{class:"language-bash"},[e("code",null,[r("$ "),e("span",{class:"token function"},"time"),r(),e("span",{class:"token function"},"yarn"),r(" build\n√ 构建 cli: 3598ms\n√ 构建 esm: 50ms\n√ 构建 cjs: 3587ms\n√ 生成类型定义: 3602ms\n构建完成: 3614ms\n\nreal    0m7.763s\nuser    0m0.000s\nsys     0m0.197s\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br")])],-1),G=e("p",null,"可以看到，生成类型定义耗费了大量的时间，与使用 esbuild 构建完全不在一个时间量级上。但同时，我们也必须注意到，nodejs 花费的真实时间很多，甚至远超构建本身，也就意味着，nodejs 确实存在性能极限。实际项目中，初始化 15 个模块需要 30s 438ms，而生成 dts 则需要 44s 343ms，单点优化对整体已经很难产生数量级的影响了。",-1),H=e("h2",{id:"不做任何打包",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#不做任何打包","aria-hidden":"true"},"#"),r(" 不做任何打包")],-1),I=e("p",null,"虽然看起来不可思议，但在 monorepo 中，许多通用模块可能并不需要在 monorepo 之外使用到，所以对于有些不需要发布的模块，可以不做打包，而是直接在 package.json 中指向未打包的入口文件。",-1),J=e("p",null,"下面是一个 lib 的不打包配置",-1),K=e("div",{class:"language-json ext-json line-numbers-mode"},[e("pre",{class:"language-json"},[e("code",null,[e("span",{class:"token punctuation"},"{"),r("\n  "),e("span",{class:"token property"},'"main"'),e("span",{class:"token operator"},":"),r(),e("span",{class:"token string"},'"src/index.ts"'),e("span",{class:"token punctuation"},","),r("\n  "),e("span",{class:"token property"},'"module"'),e("span",{class:"token operator"},":"),r(),e("span",{class:"token string"},'"src/index.ts"'),e("span",{class:"token punctuation"},","),r("\n  "),e("span",{class:"token property"},'"types"'),e("span",{class:"token operator"},":"),r(),e("span",{class:"token string"},'"src/index.ts"'),r("\n"),e("span",{class:"token punctuation"},"}"),r("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br")])],-1),M=e("p",null,"当然，它也会带来一些副作用，例如",-1),N=e("ul",null,[e("li",null,"使用该模块必须支持 ts"),e("li",null,"增加依赖该模块的终端程序的打包时间")],-1);i.render=function(r,i){const Q=n("OutboundLink");return s(),l(a,null,[u,c,t,o,p,b,d,m,h,k,g,f,x,j,v,y,z,e("blockquote",null,[e("p",null,[e("a",w,[C,e(Q)])])]),$,q,F,L,O,P,S,U,V,_,A,B,D,E,G,H,I,J,K,M,N],64)};export{i as default};
