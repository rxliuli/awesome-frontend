import{_ as o,M as p,p as c,q as l,R as n,t as s,N as e,a1 as t}from"./framework-96b046e1.js";const i="/assets/866c4124afe04289b88972507b3f6743-e5494014.png",r={},u=t('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>在 <a href="/p/23ec4673a06f41b59bfaf5a7da6d98db">基本项目搭建</a> 中，我们已经能够启动一个 electron 应用程序了（开发环境），现在来看如何将之打包为二进制程序便于分发给最终用户。</p><h2 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h2>',3),d={href:"https://www.electron.build/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://npmcompare.com/compare/electron-builder,electron-forge,electron-packager",target:"_blank",rel:"noopener noreferrer"},m=n("h2",{id:"渲染层打包",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#渲染层打包","aria-hidden":"true"},"#"),s(" 渲染层打包")],-1),v=n("p",null,"直接使用 cra 的打包工具即可，没什么大不了的，但确实存在一些注意事项",-1),b=n("em",null,"apps/renderer/package.json",-1),h=n("code",null,'"homepage": "."',-1),_={href:"https://create-react-app.dev/docs/deployment/#building-for-relative-paths",target:"_blank",rel:"noopener noreferrer"},g=n("li",null,[s("路由必须是 "),n("code",null,"hash"),s(" 模式")],-1),f=n("h2",{id:"主进程打包",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#主进程打包","aria-hidden":"true"},"#"),s(" 主进程打包")],-1),y=n("p",null,"electron-builder 打包需要以下几个步骤",-1),q=n("h3",{id:"更新-package-json-的一些配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#更新-package-json-的一些配置","aria-hidden":"true"},"#"),s(" 更新 package.json 的一些配置")],-1),w=n("code",null,"build",-1),x={href:"https://www.electron.build/",target:"_blank",rel:"noopener noreferrer"},j=n("li",null,[s("electron-builder 使用 "),n("code",null,"main"),s(" 字段作为启动脚本文件")],-1),R=n("li",null,[s("electron-builder 要求必须使用固定的版本号，意味着 electron 依赖需要指定为 "),n("code",null,'"electron": "10.2.0"')],-1),E=t(`<p>下面是一个基本的配置示例</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/main.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 一个非常基本的打包脚本</span>
    <span class="token property">&quot;pkg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;electron-builder&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;electron&quot;</span><span class="token operator">:</span> <span class="token string">&quot;10.2.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;electron-builder&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^22.9.1&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// electron 主进程实际上是 nodejs 环境，所以为了更好的开发体验，安装 nodejs 的类型定义</span>
    <span class="token property">&quot;@types/node&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^12.19.12&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 程序的唯一标识符</span>
    <span class="token property">&quot;appId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.rxliuli.electron_example&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 打包出来的 exe 名字</span>
    <span class="token property">&quot;productName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;electron 示例应用&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 打包的目录</span>
    <span class="token property">&quot;directories&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;output&quot;</span><span class="token operator">:</span> <span class="token string">&quot;release&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;win&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 打包目标，参考: https://www.electron.build/</span>
      <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;nsis&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复制静态资源" tabindex="-1"><a class="header-anchor" href="#复制静态资源" aria-hidden="true">#</a> 复制静态资源</h3><p>现在，我们需要打包静态资源并复制到主进程模块里面</p><ol><li><code>cd apps/renderer</code> 目录</li><li><code>yarn build</code> 打包静态资源</li><li>将静态资源复制到 <code>build/dist</code> 目录下</li></ol><h3 id="修改主进程入口文件-main-ts" tabindex="-1"><a class="header-anchor" href="#修改主进程入口文件-main-ts" aria-hidden="true">#</a> 修改主进程入口文件 main.ts</h3><p>还需要修改 <em>src/main.ts</em> 代码，主要修改 BrowserWindow 对象载入的 <code>url</code> 地址</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> BrowserWindow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;electron&#39;</span>
<span class="token keyword">import</span> path <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">URL</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;url&#39;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createMainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建新的 electron 窗口</span>
  <span class="token keyword">const</span> mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 载入生产环境的 url</span>
  <span class="token keyword">await</span> mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./build/index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 其他代码...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，这个 url 路径是相对于打包后的 <code>dist/main.js</code> 而言的，因为最终打包的程序运行时的相对路径也是这样。</p></blockquote><h3 id="打包主进程的-exe-程序" tabindex="-1"><a class="header-anchor" href="#打包主进程的-exe-程序" aria-hidden="true">#</a> 打包主进程的 exe 程序</h3>`,10),B={href:"https://github.com/rxliuli/haoel.github.io#7-%E9%80%8F%E6%98%8E%E7%BD%91%E5%85%B3",target:"_blank",rel:"noopener noreferrer"},L={href:"http://www.proxifier.com/",target:"_blank",rel:"noopener noreferrer"},P=n("ol",null,[n("li",null,[s("使用 "),n("code",null,"yarn compile"),s(" 编译 ts 代码")]),n("li",null,[s("使用 "),n("code",null,"yarn pkg"),s(" 打包 electron 应用")])],-1),N=n("p",null,[s("现在，我们应该可以在 "),n("em",null,"apps/main/release/win-unpacked"),s(" 下看到 exe 程序，双击它即可看到之前在开发环境的首页了。")],-1),T={href:"https://github.com/rxliuli/electron_example/tree/85d398fc2c6ba6c918ad9641dbb5d8bae2d4216b/apps/main",target:"_blank",rel:"noopener noreferrer"},U=t(`<h2 id="优化打包" tabindex="-1"><a class="header-anchor" href="#优化打包" aria-hidden="true">#</a> 优化打包</h2><p>虽然打包已经实现，但确实还存在一些问题</p><ul><li>打包脚本仍然不是一键的</li><li>不能兼容开发、生产环境</li></ul><p>下面我们来解决这两个问题</p><h3 id="实现一键打包二进制程序" tabindex="-1"><a class="header-anchor" href="#实现一键打包二进制程序" aria-hidden="true">#</a> 实现一键打包二进制程序</h3><p>使用 gulp 复制渲染层的静态资源</p><p>1、添加 gulp 相关依赖 <code>yarn add -D gulp ts-node @types/gulp fs-extra @types/fs-extra</code></p><ul><li><code>gulp @types/gulp</code>: gulp 核心依赖</li><li><code>ts-node</code>: 使用 ts 编写 gulp 脚本必须的依赖</li><li><code>fs-extra @types/fs-extra</code>: fs 的扩展增强，使用 Promise 包装异步 api</li></ul><p>2、添加 gulp 脚本文件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> copy<span class="token punctuation">,</span> remove <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs-extra&#39;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">copyByMap</span><span class="token punctuation">(</span>copyMap<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
    copyMap<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>src<span class="token punctuation">,</span> destDir<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> srcPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> src<span class="token punctuation">)</span>
      <span class="token keyword">const</span> destPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> destDir<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">await</span> <span class="token function">copy</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span> destPath<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 清理最终生成目录
 */</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;release&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 复制一些资源到 dist 目录中
 */</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">copyStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">copyByMap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;../renderer/build&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dist/&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、添加 npm script</p><blockquote><p>注: lerna 的好处之一就是可以运行其它模块的 npm script。</p></blockquote><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 打包渲染层的静态资源</span>
    <span class="token property">&quot;build:web&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lerna run --scope renderer build&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 打包渲染层的静态资源之后复制然后使用 electron-builder 打包 exe 程序</span>
    <span class="token property">&quot;pkg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gulp clean &amp;&amp; yarn compile &amp;&amp; yarn build:web &amp;&amp; gulp copyStatic &amp;&amp; electron-builder&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、修改 tsconfig.json</p><p>此时在 <em>apps/main</em> 模块根目录下也有 ts 文件了，所以 tsc 翻译代码会将它们也包含进去，但实际上不需要。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以使用一个命令打包 exe 程序了。</p>`,17),W={href:"https://github.com/rxliuli/electron_example/blob/3dacff5dc0/apps/main/package.json",target:"_blank",rel:"noopener noreferrer"},D=n("h3",{id:"使用环境变量来兼容开发、生产环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用环境变量来兼容开发、生产环境","aria-hidden":"true"},"#"),s(" 使用环境变量来兼容开发、生产环境")],-1),M={href:"https://github.com/toddbluhm/env-cmd",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/motdotla/dotenv",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/kentcdodds/cross-env",target:"_blank",rel:"noopener noreferrer"},C=t(`<ol><li><p>安装依赖 <code>yarn add -D env-cmd</code></p></li><li><p>添加配置文件 <em>.env-cmdrc.json</em> 基本上是一个键值映射文件，键是环境，值对象是环境变量</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;ELECTRON_START_URL&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:3000/&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 <code>dev:electron</code> 命令之前设定环境变量 <code>env-cmd -e dev electron ./dist/main.js</code></p></li><li><p>修改 <em>src/main.ts</em> 读取环境变量</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">await</span> mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>
  process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ELECTRON_START_URL</span> <span class="token operator">||</span>
    path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./build/index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>现在，像 <a href="/p/23ec4673a06f41b59bfaf5a7da6d98db">基本项目搭建</a> 中 <strong>更新 <em>package.json</em> 添加几个 npm script</strong> 说的那样启动开发环境就会显示开发环境的页面，打包后显示的则是打包后的静态资源。</p><p><img src="`+i+'" alt="效果"></p>',3),I={href:"https://github.com/rxliuli/electron_example/blob/f8b4f94435/apps/main/.env-cmdrc.json",target:"_blank",rel:"noopener noreferrer"},A=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),s(" 总结")],-1),O=n("p",null,[s("虽然 electron-builder 已经足够好用了，但它仍然不能解决 electron 项目工程上的问题，所以这里结合了 "),n("code",null,"lerna/gulp/env-cmd"),s(" 打包。")],-1);function F(z,G){const a=p("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[n("li",null,[n("a",d,[s("electron-builder"),e(a)]),s(": 打包的主要工具库，负责这个 electron 的跨平台打包工作 "),n("blockquote",null,[n("p",null,[s("事实上，还有一些其它的打包工具，但目前还没有比它更好的，参考: "),n("a",k,[s("https://npmcompare.com/compare/electron-builder,electron-forge,electron-packager"),e(a)])])])])]),m,v,n("ul",null,[n("li",null,[s("因为 electron 在生产环境会从文件系统中加载静态资源，所以打包出来的静态资源必须支持相对路径，下面是常见的两个设置。 "),n("ul",null,[n("li",null,[s("必须在 "),b,s(" 中声明 "),h,s("，参考: "),n("a",_,[s("Building for Relative Paths"),e(a)])]),g])])]),f,y,q,n("ol",null,[n("li",null,[s("使用 package.json 中的 "),w,s(" 字段作为配置项，参考: "),n("a",x,[s("https://www.electron.build/"),e(a)])]),j,R]),E,n("blockquote",null,[n("p",null,[s("因为 electron-builder 需要下载基本的 electron 程序，所以请提前设置好透明代理，如果不知道它是什么，参考: "),n("a",B,[s("透明网关"),e(a)]),s("，"),n("a",L,[s("Proxifier"),e(a)])])]),P,N,n("blockquote",null,[n("p",null,[s("参考: "),n("a",T,[s("https://github.com/rxliuli/electron_example/tree/85d398fc2c6ba6c918ad9641dbb5d8bae2d4216b/apps/main"),e(a)])])]),U,n("blockquote",null,[n("p",null,[s("参考: "),n("a",W,[s("https://github.com/rxliuli/electron_example/blob/3dacff5dc0/apps/main/package.json"),e(a)])])]),D,n("p",null,[s("解决方案简单来说就一句话：使用环境变量指定开发环境的 URL。 这里使用 "),n("a",M,[s("env-cmd"),e(a)]),s(" 来跨平台写入环境变量（不使用 "),n("a",S,[s("dotenv"),e(a)]),s(" 的原因在于自定义环境使用起来有点麻烦，不像 env-cmd 那么直观），而另一个 "),n("a",V,[s("cross-env"),e(a)]),s(" 并未提供管理环境变量的解决方案。下面说一下使用 env-cmd 的步骤")]),C,n("blockquote",null,[n("p",null,[s("参考: "),n("a",I,[s("https://github.com/rxliuli/electron_example/blob/f8b4f94435/apps/main/.env-cmdrc.json"),e(a)])])]),A,O])}const J=o(r,[["render",F],["__file","33dd9a3fccaf4666b04935237f885772.html.vue"]]);export{J as default};
