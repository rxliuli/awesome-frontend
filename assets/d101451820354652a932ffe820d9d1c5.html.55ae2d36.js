import{r as n,o as s,c as a,a as t,F as p,b as e,d as o}from"./app.442277df.js";const c={},l=t("h2",{id:"前言",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),e(" 前言")],-1),r=t("blockquote",null,[t("p",null,"TypeScript 改变了吾辈对于类型系统的认知，它强大的类型系统使得类型本身也是可编程的。")],-1),i=t("p",null,"最近 TypeScript 更新了一个大版本 v4，新增了一些非常强大的特性，让之前难以做到的事情也能够实现了。",-1),u=t("ul",null,[t("li",null,"模板字符串类型"),t("li",null,"递归类型")],-1),k=t("h2",{id:"简介",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),e(" 简介")],-1),b=e("参考："),d={href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html",target:"_blank",rel:"noopener noreferrer"},m=e("TypeScript 4.1"),g=o('<h3 id="模板字符串类型" tabindex="-1"><a class="header-anchor" href="#模板字符串类型" aria-hidden="true">#</a> 模板字符串类型</h3><p>尤其适合在 CSS Properties 相关的类型定义中使用，例如 css 的 <code>width</code>，就可以使用模板字符串进行检查避免低级错误。</p><p>之前</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Width</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> i<span class="token operator">:</span> Width <span class="token operator">=</span> <span class="token string">&quot;1px&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> i2<span class="token operator">:</span> Width <span class="token operator">=</span> <span class="token string">&quot;1px2&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 不会报错</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>现在</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Unit</span> <span class="token operator">=</span> <span class="token string">&quot;px&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;%&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;em&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;rem&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">Width</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token builtin">number</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Unit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> i<span class="token operator">:</span> Width <span class="token operator">=</span> <span class="token string">&quot;1px&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> i2<span class="token operator">:</span> Width <span class="token operator">=</span> <span class="token string">&quot;1px2&quot;</span><span class="token punctuation">;</span> <span class="token comment">// TS2322: Type &#39;&quot;1px2&quot;&#39; is not assignable to type &#39;Width&#39;.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>该特性在 Grid 组件进行了实用，能够避免一些低级错误。</p></blockquote><h3 id="递归类型" tabindex="-1"><a class="header-anchor" href="#递归类型" aria-hidden="true">#</a> 递归类型</h3><p>事实上，递归类型的需求由来已久。例如典型的 <code>Array.prototype.flat</code> 函数的类型定义，或是函数式中部分应用函数的类型定义。</p><p>下面是一个将嵌套数组亚平的函数的类型定义示例（来自 TypeScript 官网）</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ElementType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">ReadonlyArray<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> ElementType<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">deepFlatten</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> ElementType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token string">&quot;not implemented&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// All of these return the type &#39;number[]&#39;:</span>\n<span class="token function">deepFlatten</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">deepFlatten</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">deepFlatten</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="实际的使用场景" tabindex="-1"><a class="header-anchor" href="#实际的使用场景" aria-hidden="true">#</a> 实际的使用场景</h2><h3 id="在-i18next-中根据-key-获取翻译字符串" tabindex="-1"><a class="header-anchor" href="#在-i18next-中根据-key-获取翻译字符串" aria-hidden="true">#</a> 在 i18next 中根据 key 获取翻译字符串</h3>',13),y={href:"https://stackoverflow.com/a/58308279/8409380",target:"_blank",rel:"noopener noreferrer"},w=e("i18next 的类型定义"),h=o('<p>最近遇到了通过 i18n 框架获取翻译文本的需求，其中翻译文本通过一个对象的形式定义，所以吾辈就需要一种能够根据 key 获取到类型的方法。</p><p>需要支持以下情况</p><ul><li>根据 key 获取对应的文本</li><li>根据 key 深层获取文本</li><li>根据 key 获取文本并进行参数注入</li></ul><p>下面是吾辈对 i18next 的封装</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> zhCN <span class="token keyword">from</span> <span class="token string">&quot;../i18n/zhCN&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> en <span class="token keyword">from</span> <span class="token string">&quot;../i18n/en&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> i18next<span class="token punctuation">,</span> <span class="token punctuation">{</span> TOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;i18next&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">//region 类型定义</span>\n\n<span class="token comment">// returns the same string literal T, if props match, else never</span>\n<span class="token keyword">type</span> <span class="token class-name">CheckDictString<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">A</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">B</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">O</span>\n    <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">A</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Extract<span class="token operator">&lt;</span>CheckDictString<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token operator">:</span> <span class="token builtin">never</span>\n  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">O</span>\n  <span class="token operator">?</span> <span class="token constant">T</span>\n  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// returns the property value from object O given property path T</span>\n<span class="token keyword">type</span> <span class="token class-name">GetDictValue<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">A</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">B</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">O</span>\n    <span class="token operator">?</span> GetDictValue<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n    <span class="token operator">:</span> <span class="token builtin">never</span>\n  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">O</span>\n  <span class="token operator">?</span> <span class="token constant">O</span><span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span>\n  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// retrieves all variable placeholder names as tuple</span>\n<span class="token keyword">type</span> <span class="token class-name">Keys<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token string">&quot;&quot;</span>\n  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token operator">:</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> _<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">{{</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">B</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}}</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">C</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token operator">...</span>Keys<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">]</span>\n  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">// substitutes placeholder variables with input values</span>\n<span class="token keyword">type</span> <span class="token class-name">Interpolate<span class="token operator">&lt;</span>\n  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  <span class="token constant">I</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span>Keys<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span>\n<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token string">&quot;&quot;</span>\n  <span class="token operator">?</span> <span class="token string">&quot;&quot;</span>\n  <span class="token operator">:</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">A</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">{{</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">B</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}}</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">C</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">A</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">I</span><span class="token punctuation">[</span>Extract<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token keyword">keyof</span> <span class="token constant">I</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Interpolate<span class="token operator">&lt;</span><span class="token constant">C</span><span class="token punctuation">,</span> <span class="token constant">I</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n\n<span class="token comment">//endregion</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Dict</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> zhCN <span class="token operator">|</span> <span class="token keyword">typeof</span> en<span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">enum</span> LanguageEnum <span class="token punctuation">{</span>\n  ZhCN <span class="token operator">=</span> <span class="token string">&quot;zhCN&quot;</span><span class="token punctuation">,</span>\n  En <span class="token operator">=</span> <span class="token string">&quot;en&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">I18nLoader</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token doc-comment comment">/**\n   * 加载国际化\n   */</span>\n\n  <span class="token keyword">async</span> <span class="token function">load</span><span class="token punctuation">(</span>language<span class="token operator">:</span> LanguageEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> i18next<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      lng<span class="token operator">:</span> language<span class="token punctuation">,</span>\n      resources<span class="token operator">:</span> <span class="token punctuation">{</span>\n        en<span class="token operator">:</span> <span class="token punctuation">{</span>\n          translation<span class="token operator">:</span> en<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        zhCN<span class="token operator">:</span> <span class="token punctuation">{</span>\n          translation<span class="token operator">:</span> zhCN<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token doc-comment comment">/**\n   * 根据 key 获取翻译的文本\n   * <span class="token keyword">@param</span> <span class="token parameter">key</span>\n   */</span>\n  <span class="token generic-function"><span class="token function">getText</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n    key<span class="token operator">:</span> <span class="token keyword">keyof</span> Dict <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token constant">K</span> <span class="token operator">&amp;</span> CheckDictString<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token punctuation">,</span> Dict<span class="token operator">&gt;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token operator">:</span> GetDictValue<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token punctuation">,</span> Dict<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token generic-function"><span class="token function">getText</span><span class="token generic class-name"><span class="token operator">&lt;</span>\n    <span class="token constant">D</span> <span class="token keyword">extends</span> Dict <span class="token operator">&amp;</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">D</span><span class="token punctuation">,</span>\n    <span class="token constant">I</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span>Keys<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span>\n  <span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> args<span class="token operator">:</span> <span class="token constant">I</span><span class="token punctuation">)</span><span class="token operator">:</span> Interpolate<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">I</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token generic-function"><span class="token function">getText</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n    key<span class="token operator">:</span> <span class="token keyword">keyof</span> Dict <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token constant">K</span> <span class="token operator">&amp;</span> CheckDictString<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token punctuation">,</span> Dict<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    args<span class="token operator">?</span><span class="token operator">:</span> TOptions\n  <span class="token punctuation">)</span><span class="token operator">:</span> GetDictValue<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token punctuation">,</span> Dict<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> i18next<span class="token punctuation">.</span><span class="token function">t</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br></div></div><p>使用起来很简单</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> i18nLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">I18nLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> i18nLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>LanguageEnum<span class="token punctuation">.</span>ZhCN<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i18nLoader<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 你好</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>接下来，我们分析以下 <code>CheckDictString</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">CheckDictString<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">A</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">B</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">O</span>\n    <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">A</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Extract<span class="token operator">&lt;</span>CheckDictString<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token operator">:</span> <span class="token builtin">never</span>\n  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">O</span>\n  <span class="token operator">?</span> <span class="token constant">T</span>\n  <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol><li>传入泛型参数 <code>T</code> 和 <code>O</code>，<code>T</code> 必须继承自 <code>string</code></li><li>判断 <code>T</code> 是否继承自 <code>${infer A}.${infer B}</code>，即判断 <code>T</code> 是否包含 <code>.</code>，并解构得到 <code>A</code>（第一个 <code>.</code> 之前）,<code>B</code>（第一个 <code>.</code> 之后，可能还包含 <code>.</code>） <ol><li>如果是，则继续判断 <code>A</code> 是否为传入对象的字段 <ol><li>如果是，则继续递归检查 <code>B</code> 是否为 <code>O[A]</code> 的一个字段</li><li>否则，返回 <code>never</code></li></ol></li><li>否则，则判断 <code>T</code> 是否是 <code>O</code> 的字段 <ol><li>如果是，则返回 <code>T</code></li><li>否则，返回 <code>never</code></li></ol></li></ol></li></ol><p>可以看到，如果检查出现错误，则返回 <code>never</code>，但我们传入的 <code>string</code> 是不能合并为 <code>never</code> 的，这将会导致 ts 类型检查出错（其它的类型基本上也是一样的推导方式）。</p><hr><p>附录</p><p>虽然看起来不错，那么这个类型是否满足我们简化 i18next 使用的需求呢？ 实际上没有。即便有如此强大的类型系统，但它仍然不足以满足特别灵活的需求。实际使用时仍发现以下问题：</p><ul><li>嵌套对象的参数注入没有进行检查</li><li>参数注入的翻译文本没有提示注入参数</li></ul><p>解决方案有两个方向</p><ul><li>linter rule</li><li>code generate</li></ul><p>下面是一个简单的对比</p><table><thead><tr><th>分类</th><th>typescript</th><th>linter rule</th><th>code generate</th></tr></thead><tbody><tr><td>使用</td><td>直接使用</td><td>通过 eslint 插件</td><td>通过 cli 命令行</td></tr><tr><td>复杂度</td><td>一般（不用了解 <code>ast</code>）</td><td>高</td><td>较高</td></tr><tr><td>适用场景</td><td>绝大多数场景</td><td>容易编写的少量代码的检查</td><td>大量重复可自动化生成的代码</td></tr></tbody></table><h3 id="使用类型系统解析-json-字符串-好玩性质" tabindex="-1"><a class="header-anchor" href="#使用类型系统解析-json-字符串-好玩性质" aria-hidden="true">#</a> 使用类型系统解析 json 字符串（好玩性质）</h3>',20),x={href:"https://twitter.com/buildsghost/status/1301976526603206657",target:"_blank",rel:"noopener noreferrer"},f=e("twitter 上"),S=e(" 甚至有人使用 TypeScript 的模板字符串和递归类型解析了 json 字符串。"),q=o('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ParserError<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> error<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">EatWhitespace<span class="token operator">&lt;</span>State <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name">State</span>\n  <span class="token operator">?</span> ParserError<span class="token operator">&lt;</span><span class="token string">&quot;EatWhitespace got generic string type&quot;</span><span class="token operator">&gt;</span>\n  <span class="token operator">:</span> State <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> EatWhitespace<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span>\n  <span class="token operator">:</span> State<span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">AddKeyValue<span class="token operator">&lt;</span>\n  Memo <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  Key <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  Value <span class="token keyword">extends</span> <span class="token builtin">any</span>\n<span class="token operator">&gt;</span></span> <span class="token operator">=</span> Memo <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> Key<span class="token punctuation">]</span><span class="token operator">:</span> Value <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">ParseJsonObject<span class="token operator">&lt;</span>\n  State <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  Memo <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name">State</span>\n  <span class="token operator">?</span> ParserError<span class="token operator">&lt;</span><span class="token string">&quot;ParseJsonObject got generic string type&quot;</span><span class="token operator">&gt;</span>\n  <span class="token operator">:</span> EatWhitespace<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">}</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token punctuation">[</span>Memo<span class="token punctuation">,</span> State<span class="token punctuation">]</span>\n  <span class="token operator">:</span> EatWhitespace<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> Key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> EatWhitespace<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token operator">?</span> ParseJsonValue<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> Value<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>\n      <span class="token operator">?</span> EatWhitespace<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n        <span class="token operator">?</span> ParseJsonObject<span class="token operator">&lt;</span>State<span class="token punctuation">,</span> AddKeyValue<span class="token operator">&lt;</span>Memo<span class="token punctuation">,</span> Key<span class="token punctuation">,</span> Value<span class="token operator">&gt;&gt;</span>\n        <span class="token operator">:</span> EatWhitespace<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">}</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n        <span class="token operator">?</span> <span class="token punctuation">[</span>AddKeyValue<span class="token operator">&lt;</span>Memo<span class="token punctuation">,</span> Key<span class="token punctuation">,</span> Value<span class="token operator">&gt;</span><span class="token punctuation">,</span> State<span class="token punctuation">]</span>\n        <span class="token operator">:</span> ParserError<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ParseJsonObject received unexpected token: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span>\n      <span class="token operator">:</span> ParserError<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ParseJsonValue returned unexpected value for: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span>\n    <span class="token operator">:</span> ParserError<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ParseJsonObject received unexpected token: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span>\n  <span class="token operator">:</span> ParserError<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ParseJsonObject received unexpected token: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">ParseJsonArray<span class="token operator">&lt;</span>\n  State <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  Memo <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name">State</span>\n  <span class="token operator">?</span> ParserError<span class="token operator">&lt;</span><span class="token string">&quot;ParseJsonArray got generic string type&quot;</span><span class="token operator">&gt;</span>\n  <span class="token operator">:</span> EatWhitespace<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">]</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token punctuation">[</span>Memo<span class="token punctuation">,</span> State<span class="token punctuation">]</span>\n  <span class="token operator">:</span> ParseJsonValue<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> Value<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>\n  <span class="token operator">?</span> EatWhitespace<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token operator">?</span> ParseJsonArray<span class="token operator">&lt;</span>EatWhitespace<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>Memo<span class="token punctuation">,</span> Value<span class="token punctuation">]</span><span class="token operator">&gt;</span>\n    <span class="token operator">:</span> EatWhitespace<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">]</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">...</span>Memo<span class="token punctuation">,</span> Value<span class="token punctuation">]</span><span class="token punctuation">,</span> State<span class="token punctuation">]</span>\n    <span class="token operator">:</span> ParserError<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ParseJsonArray received unexpected token: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span>\n  <span class="token operator">:</span> ParserError<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ParseJsonValue returned unexpected value for: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">ParseJsonValue<span class="token operator">&lt;</span>State <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name">State</span>\n  <span class="token operator">?</span> ParserError<span class="token operator">&lt;</span><span class="token string">&quot;ParseJsonValue got generic string type&quot;</span><span class="token operator">&gt;</span>\n  <span class="token operator">:</span> EatWhitespace<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">null</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> State<span class="token punctuation">]</span>\n  <span class="token operator">:</span> EatWhitespace<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> Value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> <span class="token punctuation">[</span>Value<span class="token punctuation">,</span> State<span class="token punctuation">]</span>\n  <span class="token operator">:</span> EatWhitespace<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> ParseJsonArray<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span>\n  <span class="token operator">:</span> EatWhitespace<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">{</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token operator">?</span> ParseJsonObject<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span>\n  <span class="token operator">:</span> ParserError<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ParseJsonValue received unexpected token: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>State<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">ParseJson<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> ParseJsonValue<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">infer</span></span> Result\n  <span class="token operator">?</span> Result <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> Value<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span>\n    <span class="token operator">?</span> Value\n    <span class="token operator">:</span> Result <span class="token keyword">extends</span> <span class="token class-name">ParserError<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span></span>\n    <span class="token operator">?</span> Result\n    <span class="token operator">:</span> ParserError<span class="token operator">&lt;</span><span class="token string">&quot;ParseJsonValue returned unexpected Result&quot;</span><span class="token operator">&gt;</span>\n  <span class="token operator">:</span> ParserError<span class="token operator">&lt;</span><span class="token string">&quot;ParseJsonValue returned uninferrable Result&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Json</span> <span class="token operator">=</span> ParseJson<span class="token operator">&lt;</span><span class="token string">&#39;{ &quot;key1&quot;: [&quot;value1&quot;, null], &quot;key2&quot;: &quot;value2&quot; }&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type Json = { key1: [&quot;value1&quot;, null]; } &amp; { key2: &quot;value2&quot;; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><blockquote><p>我想后端语言（Java/GoLang）至今也没有出现如此复杂的类型定义。</p></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>虽然 TypeScript 的类型系统已经如此强大，但它并非没有局限性，像在上面的 <a href="#%E5%9C%A8-i18next-%E4%B8%AD%E6%A0%B9%E6%8D%AE-key-%E8%8E%B7%E5%8F%96%E7%BF%BB%E8%AF%91%E5%AD%97%E7%AC%A6%E4%B8%B2">在 i18next 中根据 key 获取翻译字符串</a> 便是一例。</p>',4);c.render=function(e,o){const c=n("OutboundLink");return s(),a(p,null,[l,r,i,u,k,t("blockquote",null,[t("p",null,[b,t("a",d,[m,t(c)])])]),g,t("blockquote",null,[t("p",null,[t("a",y,[w,t(c)])])]),h,t("p",null,[t("a",x,[f,t(c)]),S]),q],64)};export default c;
