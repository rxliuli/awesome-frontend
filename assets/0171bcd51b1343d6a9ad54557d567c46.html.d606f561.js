import{r as n,o as s,c as a,a as p,F as t,d as o,b as e}from"./app.21f25fa7.js";const l={},c=o('<h2 id="场景" tabindex="-1"><a class="header-anchor" href="#场景" aria-hidden="true">#</a> 场景</h2><p>由于需要做一些 CPU 密集型的计算，为了优化性能，吾辈开始尝试使用 worker 将计算任务放到其它线程（主要还是为了避免主线程卡死）。</p><p>主要场景包括</p><ul><li>浏览器上的 <code>WebWorker/SharedWorker</code>：处理音频数据</li><li>nodejs 中的 <code>worker_threads</code>：解析 md/ts ast 然后处理</li></ul><blockquote><p>为什么不用 wasm？-- 主要是由于它需要从零开始编写相关的代码，而非可以直接对现有的 js 代码稍微修改便能提高性能。</p></blockquote><h2 id="浏览器" tabindex="-1"><a class="header-anchor" href="#浏览器" aria-hidden="true">#</a> 浏览器</h2><blockquote><p>目前 vite 对此默认支持浏览器 worker，不再需要任何配置，仅使用 comlink 简化使用体验即可。</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// hello.worker.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> expose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;comlink&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">expose</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>\n<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./hello.worker&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> HelloWorker <span class="token keyword">from</span> <span class="token string">&quot;./hello.worker?worker&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> wrap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;comlink&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> asyncHello <span class="token operator">=</span> <span class="token generic-function"><span class="token function">wrap</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">typeof</span> hello<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncHello</span><span class="token punctuation">(</span><span class="token string">&quot;liuli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="nodejs" tabindex="-1"><a class="header-anchor" href="#nodejs" aria-hidden="true">#</a> nodejs</h2><h3 id="nodejs-本身提供的解决方案" tabindex="-1"><a class="header-anchor" href="#nodejs-本身提供的解决方案" aria-hidden="true">#</a> nodejs 本身提供的解决方案</h3><p>nodejs 仍然像浏览器一样基于文件系统使用 worker_threads，但官方确实提供了一种有趣的解决方案 -- 在同一个文件中包含主线程与 worker 线程的代码，然后在其中使用逻辑判断。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// worker.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> isMainThread<span class="token punctuation">,</span> parentPort<span class="token punctuation">,</span> Worker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;worker_threads&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> expose<span class="token punctuation">,</span> wrap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;comlink&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> nodeEndpoint <span class="token keyword">from</span> <span class="token string">&quot;comlink/dist/umd/node-adapter&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> wait <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@liuli-util/async&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> worker <span class="token keyword">as</span> helloType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./worker&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">_hello</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> helloWorker <span class="token operator">=</span> <span class="token generic-function"><span class="token function">wrap</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">typeof</span> helloType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">nodeEndpoint</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">helloWorker</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      worker<span class="token punctuation">.</span><span class="token function">unref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  hello <span class="token operator">=</span> _hello<span class="token punctuation">;</span>\n  <span class="token function">expose</span><span class="token punctuation">(</span>_hello<span class="token punctuation">,</span> <span class="token function">nodeEndpoint</span><span class="token punctuation">(</span>parentPort<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span> hello <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">mixingThreadHello</span><span class="token punctuation">(</span><span class="token string">&quot;liuli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>看起来很简洁，但这种方案也并非尽善尽美，吾辈实际使用时发现以下问题</p>',15),r=p("li",null,"不支持开发环境测试 ts 代码，必须编译为 js 才能运行",-1),u=e("由于基于文件系统，所以打包需要手动分块，或者不进行打包 rollup 参考 "),i={href:"https://rollupjs.org/guide/en/#outputmanualchunks",target:"_blank",rel:"noopener noreferrer"},k=e("output.manualChunks"),b=e("参考："),d={href:"https://nodejs.org/api/worker_threads.html#worker_threads_class_worker",target:"_blank",rel:"noopener noreferrer"},m=e("nodejs Worker"),w=o('<h3 id="使用打包工具处理的调研方案" tabindex="-1"><a class="header-anchor" href="#使用打包工具处理的调研方案" aria-hidden="true">#</a> 使用打包工具处理的调研方案</h3><ul><li>rollup-plugin-web-worker-loader <ul><li>默认不会处理 ts 文件</li><li>worker 中包含依赖时不会打包</li></ul></li><li>rollup-plugin-worker-factory <ul><li>没有看到 ts 的示例</li><li>默认会修改 Worker</li></ul></li><li>@surma/rollup-plugin-off-main-thread <ul><li>没有看到 ts 的示例</li></ul></li></ul><p>目前没有找到满意的插件，后续可能不得不写一个 rollup 插件。还是那句话，没有对比就没有伤害，如果没有 vite 对 ts+worker 的良好支持，或许吾辈还能忍受这种糟糕的开发体验。</p>',3),y=e("尝试编写 rollup 插件 "),g={href:"https://github.com/rxliuli/liuli-tools/tree/dev/libs/rollup-plugin-worker-threads",target:"_blank",rel:"noopener noreferrer"},h=e("rollup-plugin-worker-threads"),f=e("，以在 nodejs 中对 "),q=p("code",null,"worker_threads",-1),v=e(" 提供类似 vite 的开发体验。"),x=o('<p>大致使用方式如下</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/util/wrapWorkerFunc.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> expose<span class="token punctuation">,</span> Remote<span class="token punctuation">,</span> wrap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;comlink&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> isMainThread<span class="token punctuation">,</span> parentPort<span class="token punctuation">,</span> Worker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;worker_threads&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> nodeEndpoint <span class="token keyword">from</span> <span class="token string">&quot;comlink/dist/umd/node-adapter&quot;</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * 包装需要放到 worker 中执行的函数\n * 1. 当检查到当前文件不是 js 文件时会直接返回函数\n * 2. 当检查到在主线程时执行时，使用 Worker 包装并执行它\n * 3. 当检查到在 Worker 线程时，使用 expose 包装它然后执行\n * 注：目前是每次都创建新的 Worker，也许可以考虑支持复用 Worker\n * <span class="token keyword">@param</span> <span class="token parameter">ep</span>\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> wrapWorkerFunc<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  ep<span class="token operator">:</span> <span class="token constant">T</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Remote<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&quot;.js&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ep <span class="token keyword">as</span> Remote<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isMainThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token generic-function"><span class="token function">wrap</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">nodeEndpoint</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> worker<span class="token punctuation">.</span><span class="token function">unref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Remote<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">expose</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> <span class="token function">nodeEndpoint</span><span class="token punctuation">(</span>parentPort<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> ep <span class="token keyword">as</span> Remote<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/hello.worker.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> wait <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@liuli-util/async&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> wrapWorkerFunc <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./util/wrapWorkerFunc&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">_hello</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token function">wrapWorkerFunc</span><span class="token punctuation">(</span>_hello<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// index.ts</span>\n<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;./hello.worker&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',5),_={href:"https://blog.logrocket.com/integrating-web-workers-in-a-react-app-with-comlink/",target:"_blank",rel:"noopener noreferrer"},W=e("Integrating web workers in a React app with Comlink"),j={href:"https://lorefnon.tech/2019/03/24/using-comlink-with-typescript-and-worker-loader/",target:"_blank",rel:"noopener noreferrer"},T=e("Using comlink with typescript and worker-loader"),P={href:"https://medium.com/lacolaco-blog/an-issue-around-angular-cli-comlink-workerplugin-585be1c8d087",target:"_blank",rel:"noopener noreferrer"},E=e("An issue around Angular CLI + Comlink + WorkerPlugin");l.render=function(o,e){const l=n("OutboundLink");return s(),a(t,null,[c,p("ul",null,[r,p("li",null,[u,p("a",i,[k,p(l)])])]),p("blockquote",null,[p("p",null,[b,p("a",d,[m,p(l)])])]),w,p("p",null,[y,p("a",g,[h,p(l)]),f,q,v]),x,p("ul",null,[p("li",null,[p("a",_,[W,p(l)])]),p("li",null,[p("a",j,[T,p(l)])]),p("li",null,[p("a",P,[E,p(l)])])])],64)};export default l;
