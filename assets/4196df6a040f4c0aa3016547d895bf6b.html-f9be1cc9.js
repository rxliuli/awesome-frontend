import{_ as s,M as r,p as i,q as l,R as e,t as n,N as a,a1 as o}from"./framework-96b046e1.js";const c="/assets/49e8605f93954313a6f95621d977785b-fb6af69b.png",p="/assets/2bceea193e1945aeac57b5342eed3fcc-a50eff27.png",d="/assets/96fd64b1eae1494698b5aa092574b1e2-1a63ac9e.png",u="/assets/b3561ab309a6462386c726372f30aeb2-f72254c5.png",h="/assets/837c6b07d00449dc9f61b083087b516d-5b3bde8c.png",g="/assets/468e71461fca48fa9ae306f2da89fc48-e81f307e.png",b={},m=o('<h2 id="webstorm-全局默认配置" tabindex="-1"><a class="header-anchor" href="#webstorm-全局默认配置" aria-hidden="true">#</a> WebStorm 全局默认配置</h2><p>使用场景：<br> 使用 WebStorm 经常会遇到一种情况，在这个项目自顶了一些设置（<strong>Settings</strong> 而非 <strong>Project Structure</strong>，例如 自定义的 Maven，项目字符编码等等），到了新的项目全部恢复了默认值又要重新设定。</p><p>解决方案：<br> 通过 WebStorm 的默认设置（<strong>File &gt; Other Settings &gt; Default Settings</strong>）就可以设定全局的 <strong>Settings</strong>，而不需要在每个项目中重新设定一次。</p><blockquote><p>默认设定按吾辈的理解应该是用于设定那些可以使项目级别的设置，例如 <strong>代码检查</strong>，<strong>代码样式</strong> 等。毕竟大部分的设置都是全局的嘛</p></blockquote><h2 id="alt-enter-操作提示" tabindex="-1"><a class="header-anchor" href="#alt-enter-操作提示" aria-hidden="true">#</a> Alt-Enter 操作提示</h2><p>Alter-Enter 大概是 WebStorm 最强大快捷键了，放在不同的位置有不同的功能。</p><ul><li>警告（代码下面有黄色波浪线），会自动帮我们修复警告。 代码重复，代码冗余（1/0 之类），多余的变量（声明完就立刻返回/声明完最多只使用了一次）</li><li>错误（代码下面有红色波浪线），一般会提出合适的修复建议。 代码缺少注解，具体子类有未实现的方法</li><li>接口名（接口的名字），一般会提示可以生成实现类或者跳转到实现类</li><li>自动修复变量名的问题（不符合驼峰）</li><li>普通类名，一般会提示创建测试类，没有 JavaDoc 注释还会提示生成注释</li><li>字符串里面，会提示使用 <a href="#%E8%AF%AD%E8%A8%80%E6%B3%A8%E5%85%A5">语言注入</a></li><li>跳转到注入语言的编辑面板</li></ul><h2 id="double-shift-任意搜索" tabindex="-1"><a class="header-anchor" href="#double-shift-任意搜索" aria-hidden="true">#</a> Double Shift 任意搜索</h2><p>这个功能其实是集成了多个搜索，但有时候真的很好用，集成的功能包括</p><ul><li>搜索 <code>Settings</code>（<code>CS-A</code>）：搜索 WebStorm 的设置</li><li>搜索 <code>class</code>（<code>C-N</code>）：搜索代码里的 class 类</li><li>搜索 <code>File</code>（<code>CS-N</code>）：搜索任何文件</li><li>搜索 <code>symbol</code>（<code>CSA-N</code>）：搜索符号，主要用于搜索 Spring MVC 路径</li><li>搜索 <code>Tool Windows</code>（<code>C-Tab</code>）：搜索工具窗口</li><li>搜索 <code>Run configuration</code>（<code>SA-F9/F10</code>）：搜索运行的配置项</li><li>搜索 <code>Action</code>（<code>Alt-Enter</code>）：搜索当前位置的代码可执行操作</li></ul><p>如果你知道需要搜索的类型，请尽量使用单独的搜索选项，毕竟速度上会有一些优势</p><h2 id="列编辑" tabindex="-1"><a class="header-anchor" href="#列编辑" aria-hidden="true">#</a> 列编辑</h2><p>列编辑是一个非常有趣的功能，可以让你同时编辑多行文本。</p><p>共有下面几种方式触发</p><ul><li>使用鼠标中键下拉或上拉选中多行</li><li>使用 <code>A-J</code> 依次选择相同的代码片段，并使用 <code>SA-J</code> 取消选择</li><li>使用 <code>CSA-J</code> 选中当前文件所有匹配的代码片段</li><li>使用 <code>CA-Top/Bottom</code> 向上或向下选择多行（需要添加快捷键 <code>Editor Actions =&gt; Clone Caret Above/Clone Caret Below</code>）</li></ul><p>GIF 演示</p><p><img src="https://cdn.jsdelivr.net/gh/rxliuli/img-bed/20190627110522.gif" alt="GIF 演示"></p><h2 id="常用快捷键" tabindex="-1"><a class="header-anchor" href="#常用快捷键" aria-hidden="true">#</a> 常用快捷键</h2>',18),f={href:"https://github.com/halirutan/IntelliJ-Key-Promoter-X",target:"_blank",rel:"noopener noreferrer"},_=o('<ul><li>搜索 <ul><li><code>C-N</code> ：搜索类</li><li><code>CS-N</code> ：搜索文件</li><li><code>CSA-N</code> ：搜索字段名(包含数据库字段)/方法名</li><li><code>SS</code> ：搜索接口路径，类名，文件名，字段名/方法名</li><li><code>CS-F</code>：全局搜索代码（该快捷键与 Windows10 的默认输入法冲突，可以修改快捷键，或者换用其他输入法）</li></ul></li><li>面板操作 <ul><li><code>ESC</code>：返回到编辑器中</li><li><code>C-E</code> ：列出最近操作的文件历史以及可操作面板列表，然后可以通过输入单词跳转到对应的面板</li><li><code>C-Tab -&gt; *</code>：列出最近操作的文件历史以及可操作面板，并能通过单个字母导航到对应的操作面板（需要一直按住 <code>Ctrl</code>）</li><li><code>A-Top/Bottom/Left/Right</code> ：左右是切换标签页，上下是切换方法</li><li><code>F12</code> ：跳转到最后一个使用的面板</li><li><code>CS-F12</code> ：收起/显示所有面板</li><li><code>C-F12</code> ：在一个悬浮面板上列出所有字段/方法</li><li><code>A-F11</code>: 列出可以快速运行的任务，支持 <code>npm/gulp</code></li></ul></li><li>选择 <ul><li><code>C-W/CS-W</code> ：扩大/缩小选择区域范围</li><li><code>CS-[/]</code>：选择至当前区域的开始/结束</li><li><code>A/SA-J</code> ：选中/反选相同的单词进行列编辑（一个个的选中）</li><li><code>CSA-J</code> ：选中多个相同的单词（当前文件全部选中）</li></ul></li><li>代码跳转 <ul><li><code>CA-Left/Right</code> ：跳转到上一个/下一个浏览的位置</li><li><code>CS-Backspace</code> ：回退到上一个编辑的位置</li><li><code>C-Top/Bottom/Left/Right</code>：左右是跳转到上一个/下一个单词，上下是移动屏幕（非移动光标）</li><li><code>C-;</code> ：屏幕内任意跳转（需要安装 <strong>Ace Jumper</strong> 插件）</li><li><code>Home</code> ：跳转到行首/编辑器的最左侧</li><li><code>End</code> ：跳转到行尾</li><li><code>C-Home/End</code> ：跳转到文件的开始/结尾</li><li><code>C-Page Up/Page Down</code> ：跳转到当前屏幕的第一行/最后一行</li><li><code>F2/S-F2</code> ：跳转到下一个/上一个错误/警告的位置</li><li><code>C-Left/C-Right</code> ：跳转到上一个/下一个单词的位置</li><li><code>C-B</code> ：跳转到变量/方法的声明处</li><li><code>CS-B</code> ：跳转到变量/方法的具体实现处，如果不止一处就会列出下拉框 <blockquote><p>注：这里吾辈修改了快捷键，毕竟 <code>CA-B</code> 单手按起来还真有点麻烦</p></blockquote></li></ul></li></ul><blockquote><p>注：在 WebStorm 看来左侧字母上面的数字键和右侧小键盘的数字键是不同的！ 注: <code>Shift</code> 一般用于 <strong>增强/取反</strong> 功能。例如 <code>C-F</code> 搜索当前文件，<code>CS-F</code> 搜索所有文件，<code>F2</code> 跳转到下一个错误，<code>S-F2</code> 跳转到上一个错误。</p></blockquote><h2 id="常用插件" tabindex="-1"><a class="header-anchor" href="#常用插件" aria-hidden="true">#</a> 常用插件</h2>',3),v={href:"https://plugins.jetbrains.com/plugin/4441-jrebel-for-intellij",target:"_blank",rel:"noopener noreferrer"},k={href:"https://plugins.jetbrains.com/plugin/7007-liveedit",target:"_blank",rel:"noopener noreferrer"},S={href:"https://plugins.jetbrains.com/plugin/10119-mybatisx",target:"_blank",rel:"noopener noreferrer"},j={href:"https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines",target:"_blank",rel:"noopener noreferrer"},C={href:"https://plugins.jetbrains.com/plugin/8579-translation",target:"_blank",rel:"noopener noreferrer"},x={href:"https://plugins.jetbrains.com/plugin/2162-string-manipulation",target:"_blank",rel:"noopener noreferrer"},w=e("strong",null,"驼峰命名",-1),A=e("strong",null,"下划线命名",-1),W=e("strong",null,"中缀线命名",-1),E=e("blockquote",null,[e("p",null,"其实这么多命名规范真心坑。。。")],-1),T={href:"https://plugins.jetbrains.com/plugin/9792-key-promoter-x",target:"_blank",rel:"noopener noreferrer"},q={href:"https://plugins.jetbrains.com/plugin/9862-custom-postfix-templates",target:"_blank",rel:"noopener noreferrer"},J={href:"https://plugins.jetbrains.com/plugin/7896-markdown-navigator",target:"_blank",rel:"noopener noreferrer"},y={href:"https://plugins.jetbrains.com/plugin/7179-maven-helper",target:"_blank",rel:"noopener noreferrer"},L={href:"https://plugins.jetbrains.com/plugin/7275-codeglance",target:"_blank",rel:"noopener noreferrer"},F={href:"https://plugins.jetbrains.com/plugin/7125-grep-console",target:"_blank",rel:"noopener noreferrer"},N={href:"https://plugins.jetbrains.com/plugin/7495--ignore",target:"_blank",rel:"noopener noreferrer"},M={href:"https://plugins.jetbrains.com/plugin/5834-cmd-support",target:"_blank",rel:"noopener noreferrer"},$={href:"https://plugins.jetbrains.com/plugin/6098-nodejs",target:"_blank",rel:"noopener noreferrer"},B={href:"https://plugins.jetbrains.com/plugin/9442-vue-js",target:"_blank",rel:"noopener noreferrer"},P={href:"https://plugins.jetbrains.com/plugin/7494-eslint",target:"_blank",rel:"noopener noreferrer"},D={href:"https://plugins.jetbrains.com/plugin/10456-prettier",target:"_blank",rel:"noopener noreferrer"},R={href:"https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter",target:"_blank",rel:"noopener noreferrer"},I=e("code",null,"Properties",-1),G=e("code",null,"YAML",-1),H={href:"https://plugins.jetbrains.com/plugin/7425-wakatime",target:"_blank",rel:"noopener noreferrer"},V=o('<h2 id="语言注入" tabindex="-1"><a class="header-anchor" href="#语言注入" aria-hidden="true">#</a> 语言注入</h2><p>为某一段区域的注入其他语言，WebStorm 最常见的就是在 JavaScript 的字符串中注入了 HTML/CSS/JavaScript，使得在字符串内也有代码提示可用。</p><blockquote><p>此功能常用于 JavaScript 字符串拼接 HTML 代码，当然目前这个需求在 ES6 中由 <code>模板字符串</code> 原生实现了。</p></blockquote><p>我们也可以手动注入，例如为 Java 中的字符串注入 SQL 语言，这样在写 SQL 语句就不用跑到 SQL 编辑器那里写完 SQL 语句在粘贴过来了。</p><p>我们也可以自定义语言注入的规则，例如让 <code>vm.evalCode</code> 中的字符串默认为 js 代码。</p><p><img src="'+c+'" alt="1632817508056"></p>',6),O={href:"https://www.jetbrains.com/help/webstorm/using-language-injections.html#configure-injection-rules",target:"_blank",rel:"noopener noreferrer"},Q=o(`<h2 id="live-template-postfix-template-模板" tabindex="-1"><a class="header-anchor" href="#live-template-postfix-template-模板" aria-hidden="true">#</a> Live Template/Postfix Template 模板</h2><p>Live Template 模板就是那种在 Java 中输入 <code>sout</code> 就可以生成以下代码的模板功能，而这功能在 WebStorm 还可以自定义。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>$<span class="token constant">END</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如吾辈就定义了 <code>autowired</code> 用于生成</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> $<span class="token class-name">BeanClass</span>$ $<span class="token class-name">BeanName</span>$<span class="token punctuation">;</span>
$<span class="token constant">END</span>$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者 <code>thread</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    $<span class="token constant">END</span>$
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),X={href:"https://github.com/xylo/intellij-postfix-templates#download",target:"_blank",rel:"noopener noreferrer"},K={href:"https://blog.jetbrains.com/idea/2014/03/postfix-completion/",target:"_blank",rel:"noopener noreferrer"},Y=o(`<p>此功能可以做到另外一种形式的模板字符串，例如输入 <code>&quot;str&quot;.var</code> 然后回车会得到</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> $variableName$ <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">;</span>$<span class="token constant">END</span>$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者 <code>&quot;str&quot;.sout</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Sysout</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;str&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>吾辈也自定义一些，例如输入了 <code>&quot;str&quot;.val</code>，会生成</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">String</span> $variableName$ <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">;</span>$<span class="token constant">END</span>$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="一些有用的配置项" tabindex="-1"><a class="header-anchor" href="#一些有用的配置项" aria-hidden="true">#</a> 一些有用的配置项</h2><h3 id="soft-wrap-强制换行" tabindex="-1"><a class="header-anchor" href="#soft-wrap-强制换行" aria-hidden="true">#</a> soft wrap 强制换行</h3><p>WebStorm 在一行过长时会出现横向滚动条，那我们不想要它出现以便于能直接使用键盘就能看完要怎么办呢？</p><p>可以在 <em>Settings ⇒ Editor ⇒ General ⇒ Soft Wraps</em> 中找到设置，将 <strong>Soft-wrap files</strong> 的值修改为 <code>*</code> 即可。</p><p><img src="https://cdn.jsdelivr.net/gh/rxliuli/img-bed/20191212090747.png" alt="强制换行"></p><h3 id="根据源代码自动滚动项目" tabindex="-1"><a class="header-anchor" href="#根据源代码自动滚动项目" aria-hidden="true">#</a> 根据源代码自动滚动项目</h3><p>可以在跳转文件时，使文件目录自动聚焦在当前编辑的文件上，这在很多时候是有利于查看目录/文件的。</p><p>2019.3 之后</p><p>在 <em>Project ⇒ Always Select Opened File</em> 中可以找到这个配置，启用即在整个项目中启用了。</p><p><img src="https://cdn.jsdelivr.net/gh/rxliuli/img-bed/20191224100414.png" alt="根据源代码自动滚动项目设置"></p><p>2019.3 之前</p><p>在 <em>Project ⇒ Tool ⇒ Autoscroll from Source</em> 中可以找到这个配置，启用即在整个项目中启用了。</p><p><img src="https://cdn.jsdelivr.net/gh/rxliuli/img-bed/20191212090627.png" alt="根据源代码自动滚动项目设置"></p><h3 id="项目外部依赖" tabindex="-1"><a class="header-anchor" href="#项目外部依赖" aria-hidden="true">#</a> 项目外部依赖</h3><p>在传统 web 项目中，会有需要让 IDE 索引通过 script 标签引入的依赖，但现代前端绝大多数时候不应该让 IDE 处理。</p><p><img src="`+p+'" alt="1619968206663"></p><p>你需要在设置 <em>File | Settings | Languages &amp; Frameworks | JavaScript | Libraries</em> 中取消不需要索引的依赖项。</p><p><img src="'+d+'" alt="1619968548104"></p><h3 id="在-typescript-项目中使用强类型提示" tabindex="-1"><a class="header-anchor" href="#在-typescript-项目中使用强类型提示" aria-hidden="true">#</a> 在 TypeScript 项目中使用强类型提示</h3><p>在 TypeScript 项目中，我们的代码提示应该基于 TypeScript 而非 WebStorm 的索引，因为前者要精确的多。</p><p><img src="'+u+'" alt="1619969180589"></p><p>涉及到以下几个选项</p><ul><li><em>File | Settings | Editor | General | Code Completion =&gt; Only type-based completion</em></li></ul><h3 id="typescript-项目中禁用-webstorm-的索引" tabindex="-1"><a class="header-anchor" href="#typescript-项目中禁用-webstorm-的索引" aria-hidden="true">#</a> typescript 项目中禁用 WebStorm 的索引</h3><h3 id="设置背景图片" tabindex="-1"><a class="header-anchor" href="#设置背景图片" aria-hidden="true">#</a> 设置背景图片</h3><p>最新的 WebStorm 支持设置背景图片，具体设置在 <em>File | Settings | Appearance &amp; Behavior | Appearance</em>，效果如下</p><p><img src="'+h+'" alt="1623482286209"></p><h2 id="复制-webstorm-提示的报错" tabindex="-1"><a class="header-anchor" href="#复制-webstorm-提示的报错" aria-hidden="true">#</a> 复制 WebStorm 提示的报错</h2><blockquote><p>这个技巧的发现来源于一个同事</p></blockquote><p>有时候 WebStorm 提示我们错误，当我们把鼠标放在上面时会有一个 <code>Tooltip</code>。但当我们想要复制这个错误时，却发现选择时 <code>Tooltip</code> 很容易消失，即便在较新版本中进行了改进，但想要复制仍然是非常痛苦的一件事，那么如何更加简单的复制错误呢？ 实际上，当我们将光标移动到错误上面时，左下角的状态栏中会有该错误并且可以右键复制！</p><p><img src="https://cdn.jsdelivr.net/gh/rxliuli/img-bed/20200430145423.png" alt="复制 WebStorm ToolTip 提示"></p>',37),U={href:"https://youtrack.jetbrains.com/issue/WebStorm-70943",target:"_blank",rel:"noopener noreferrer"},z=e("h2",{id:"浏览器报错在-webstorm-打开相应文件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#浏览器报错在-webstorm-打开相应文件","aria-hidden":"true"},"#"),n(" 浏览器报错在 WebStorm 打开相应文件")],-1),Z=e("p",null,"参考：",-1),ee={href:"https://juejin.im/post/6844903967206408206",target:"_blank",rel:"noopener noreferrer"},ne=o(`<p>react 项目下其实就是添加环境变量 <code>REACT_EDITOR</code> 而已，可以使用 <code>.env.local</code> 进行配置</p><div class="language-env line-numbers-mode" data-ext="env"><pre class="language-env"><code>REACT_EDITOR=[WebStorm 的路径]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="设定默认-jest-运行单元测试" tabindex="-1"><a class="header-anchor" href="#设定默认-jest-运行单元测试" aria-hidden="true">#</a> 设定默认 jest 运行单元测试</h2><p>在包含 react-scripts 依赖的项目中，WebStorm 会默认使用 react-scripts 运行测试，这在单体项目中当然很好，但如果是 monorepo，则会出现一些问题。react-scripts 运行时会强制修改 <code>tsconfig.json/react-app-env.d.ts</code>，这在一些 node 子模块中会出现问题，而 react-scripts 目前还不能关闭这个功能。所以只能修改 WebStorm 的测试运行工具了，可以在 <code>Edit configuration</code> 中修改 <code>Jest =&gt; Jest Package</code> 字段值为 <code>jest</code>，更推荐设置 <code>Templates =&gt; Jest =&gt; Jest Package</code> 字段，因为它可以一劳永逸。</p><p><img src="`+g+'" alt="1615086542056"></p>',5),te={href:"https://stackoverflow.com/questions/53794875",target:"_blank",rel:"noopener noreferrer"};function ae(oe,se){const t=r("ExternalLinkIcon");return i(),l("div",null,[m,e("blockquote",null,[e("p",null,[n("快捷键想要熟练没有什么好的办法，却是只能多加使用了。如果你还不熟悉 WebStorm 的快捷键，可以使用 "),e("a",f,[n("Key Promoter X"),a(t)]),n(" 插件来提示你使用快捷键操作。")])]),_,e("ul",null,[e("li",null,[e("a",v,[n("JRebel for IntelliJ"),a(t)]),n("：做 Java Web 开发时真心免不了的 Plugin，能够有效解决 Web 容器（例如 Apache Tomcat）启动速度慢的问题（因为几乎所有的资源都能够热加载，热部署）")]),e("li",null,[e("a",k,[n("LiveEdit"),a(t)]),n("：提供了 HTML/CSS/JavaScript 的实时预览和刷新功能")]),e("li",null,[e("a",S,[n("MybatisX"),a(t)]),n("：Mybatis 的一个辅助开发插件，能够比较愉快的使用 Mybatis 框架了")]),e("li",null,[e("a",j,[n("Alibaba Java Coding Guidelines"),a(t)]),n("：Alibaba 出品的一个 Java 规范检查插件，能够规避一些不好的代码")]),e("li",null,[e("a",C,[n("Translation"),a(t)]),n("：目前使用感觉最好的翻译插件，能够提供比较长的内容进行翻译（某些翻译插件只能翻译很短的内容）")]),e("li",null,[e("a",x,[n("String Manipulation"),a(t)]),n("：字符串操作工具，可以方便对变量名或其他字符串修改为其他风格，例如将变量从 "),w,n("（Java 标准命名） 修改为 "),A,n("（SQL 标准命名）或者 "),W,n("（HTML/CSS 标准命名）。 "),E]),e("li",null,[e("a",T,[n("Key Promoter X"),a(t)]),n("：使用鼠标操作时提示对应的快捷键")]),e("li",null,[e("a",q,[n("Custom Postfix Templates"),a(t)]),n("：提供自定义的后缀模板")]),e("li",null,[e("a",J,[n("Markdown Navigator"),a(t)]),n("：WebStorm 平台的 Markdown 写作插件，比自带的 Markdown Support 要好很多，主要在需要写的 Markdown 内容中含有代码时比较方便")]),e("li",null,[e("a",y,[n("Maven Helper"),a(t)]),n("：一个 Apache Maven 的辅助操作插件")]),e("li",null,[e("a",L,[n("CodeGlance"),a(t)]),n("：在编辑器右侧显示一块代码缩略图，主要为了方便使用滑块进行上下滑动")]),e("li",null,[e("a",F,[n("Grep Console"),a(t)]),n("：自定义控制台的输出颜色")]),e("li",null,[e("a",N,[n(".ignore"),a(t)]),n("：在使用版本控制时，快速忽略某些文件/文件夹，目前支持广泛")]),e("li",null,[e("a",M,[n("CMD support"),a(t)]),n("：Cmd 支持，主要是方便在 WebStorm 中直接运行 bat 脚本")]),e("li",null,[e("a",$,[n("NodeJS"),a(t)]),n("：集成了 NodeJS，可以直接在 WebStorm 中运行 NodeJS")]),e("li",null,[e("a",B,[n("Vue.js"),a(t)]),n("：集成 Vue.js 框架")]),e("li",null,[e("a",P,[n("ESLint"),a(t)]),n("：前端代码规范")]),e("li",null,[e("a",D,[n("Prettier"),a(t)]),n("：根据上面 ESLint 的规范自动格式化代码")]),e("li",null,[e("a",R,[n("Properties to YAML Converter"),a(t)]),n("：将 "),I,n(" 文件快速转换为 "),G,n(" 格式的配置文件")]),e("li",null,[e("a",H,[n("WakaTime"),a(t)]),n("：统计使用的编程语言，不同 IDE 的记录")])]),V,e("blockquote",null,[e("p",null,[n("参考: "),e("a",O,[n("https://www.jetbrains.com/help/webstorm/using-language-injections.html#configure-injection-rules"),a(t)])])]),Q,e("p",null,[n("此功能使用得当甚至能大量减少重复编码。不过相比之下另外一个代码生成功能吾辈更加喜欢，但 WebStorm 在 2018.2 版本之前并不支持自定义，所以功能上来说就显得稍弱一些，当然吾辈也使用插件（Custom Postfix Templates "),e("a",X,[n("GitHub"),a(t)]),n("）实现了自定义的需求。最新版本 WebStorm 原生支持了自定义功能（"),e("a",K,[n("WebStorm 官方介绍"),a(t)]),n("），但实现尚不完善。")]),Y,e("blockquote",null,[e("p",null,[n("相关问题参考："),e("a",U,[n("https://youtrack.jetbrains.com/issue/WebStorm-70943"),a(t)]),n("，这是一个相当古老（2011 年）的问题，但 JetBrains 的开发者一开始甚至不认为这是一个问题，直到最近才着手修复它。 附：或许 JetBrains 的开发人员并不需要面向 Google 编程？#笑")])]),z,e("blockquote",null,[Z,e("ul",null,[e("li",null,[e("a",ee,[n("React 调试的时候如何打开指定的编辑器 /webstorm"),a(t)])])])]),ne,e("blockquote",null,[e("p",null,[n("参考："),e("a",te,[n("How to configure react-script so that it doesn't override tsconfig.json on 'start'"),a(t)])])])])}const ie=s(b,[["render",ae],["__file","4196df6a040f4c0aa3016547d895bf6b.html.vue"]]);export{ie as default};
