import{_ as o,M as p,p as c,q as l,R as n,t as s,N as e,a1 as t}from"./framework-96b046e1.js";const i="/assets/9aa685b675a14bf788093f2656ffc4e8-5d9732f0.png",r="/assets/be9a61a9bb6c466a86f0fe9c1ea499a6-f55af509.png",u={},d=t(`<h2 id="环境" tabindex="-1"><a class="header-anchor" href="#环境" aria-hidden="true">#</a> 环境</h2><ul><li>Windows 10</li><li>NodeJS 12</li><li>WebStorm</li><li>VSCode（编写 markdown 文档）</li></ul><h2 id="创建-lerna-项目" tabindex="-1"><a class="header-anchor" href="#创建-lerna-项目" aria-hidden="true">#</a> 创建 lerna 项目</h2><p>创建目录 <em>electron_example</em>，然后使用 yarn 初始化</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> electron_example <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> electron_example
<span class="token function">yarn</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 <em>package.json</em></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;electron_example&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;private&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MIT&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;workspaces&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;packages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;apps/*&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后创建 <em>lerna.json</em> 配置文件</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;packages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;apps/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;independent&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;npmClient&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yarn&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;useWorkspaces&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化目录如下</p><ul><li><em>apps</em><ul><li><em>main</em>: 主进程</li><li><em>renderer</em>: 渲染进程</li></ul></li><li><em>node_modules</em></li><li><em>lerna.json</em></li><li><em>package.json</em></li><li><em>yarn.lock</em></li></ul>`,11),k={href:"https://github.com/rxliuli/electron_example/tree/b9628e1fd16bb5b6807e55e9ca72fdf2daf5bfde",target:"_blank",rel:"noopener noreferrer"},m=t(`<h2 id="初始化渲染层模块" tabindex="-1"><a class="header-anchor" href="#初始化渲染层模块" aria-hidden="true">#</a> 初始化渲染层模块</h2><p>在 renderer 目录中使用 create-react-app 创建一个 react 项目，并添加</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx create-react-app apps/renderer/ <span class="token parameter variable">--template</span> typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过还需要修改其中部分配置，主要包含</p><ul><li>删除 <em>yarn.lock</em> 或 <em>package-lock.json</em> 文件</li></ul>`,5),v={href:"https://github.com/rxliuli/electron_example/tree/8e0920af985e1201fc05ca36302e094532843c2d",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,[s("尝试再 yarn 安装依赖，接着再使用 "),n("code",null,"yarn start"),s(" 启动开发环境，应该可以在浏览器中看到默认的页面。")],-1),q=n("p",null,[n("img",{src:i,alt:"20210106194304.png"})],-1),h=n("h2",{id:"初始化主进程模块",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#初始化主进程模块","aria-hidden":"true"},"#"),s(" 初始化主进程模块")],-1),g={href:"https://github.com/rxliuli/electron_example/tree/a78885b76de9322dfdac82e2c220b7c6e0a9617f",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>初始化主进程模块，主要包括</p><h3 id="为主进程创建-package-json" tabindex="-1"><a class="header-anchor" href="#为主进程创建-package-json" aria-hidden="true">#</a> 为主进程创建 package.json</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.1.0&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加依赖-yarn-add-electron-electron-builder-typescript" tabindex="-1"><a class="header-anchor" href="#添加依赖-yarn-add-electron-electron-builder-typescript" aria-hidden="true">#</a> 添加依赖 <code>yarn add electron electron-builder typescript</code></h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;electron&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^10.2.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;electron-builder&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^22.9.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;typescript&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.1.3&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加-tsconfig-json-配置文件" tabindex="-1"><a class="header-anchor" href="#添加-tsconfig-json-配置文件" aria-hidden="true">#</a> 添加 <em>tsconfig.json</em> 配置文件</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// tsconfig.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// nodejs 生态大多数都支持这种模块</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 优先考虑输出 es5</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 但不要自缚手脚，仍然使用最新的 es 特性</span>
    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 定义源目录与输出目录</span>
    <span class="token property">&quot;rootDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 生成 sourceMap 方便 IDE 本地调试</span>
    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 禁止 ts 检查 npm 依赖的类型定义（例如 electron 的类型定义就很容易被 ts 检查出错误，毕竟这个项目实在太大了）</span>
    <span class="token property">&quot;skipLibCheck&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;skipDefaultLibCheck&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 排除依赖目录与输出目录</span>
  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加-src-main-ts-基本的启动文件" tabindex="-1"><a class="header-anchor" href="#添加-src-main-ts-基本的启动文件" aria-hidden="true">#</a> 添加 <em>src/main.ts</em> 基本的启动文件</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> BrowserWindow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;electron&#39;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createMainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建新的 electron 窗口</span>
  <span class="token keyword">const</span> mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 载入开发环境的 url</span>
  <span class="token keyword">await</span> mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000/&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * main 函数
 */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> createMainWindow<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新-package-json-添加几个-npm-script" tabindex="-1"><a class="header-anchor" href="#更新-package-json-添加几个-npm-script" aria-hidden="true">#</a> 更新 <em>package.json</em> 添加几个 npm script</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 编译 ts 代码</span>
    <span class="token property">&quot;compile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsc&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 编译 tsc 代码且启动监听模式</span>
    <span class="token property">&quot;watch&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yarn compile -w&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 在主进程通过 lerna 启动渲染进程模块的开发环境</span>
    <span class="token property">&quot;dev:web&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lerna run --scope renderer start&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 启动主进程的开发环境</span>
    <span class="token property">&quot;dev:electron&quot;</span><span class="token operator">:</span> <span class="token string">&quot;electron ./dist/main.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们通过这些 npm script 启动 electron 开发环境</p><ol><li>运行 <code>yarn watch</code></li><li>运行 <code>dev:web</code></li><li>等待以上两条命令都运行完成，再继续运行 <code>dev:electron</code></li></ol><p>现在，你应该可以看到一个 electron 窗口，其中显示着。</p><p><img src="`+r+'" alt="20210106194102.png"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>目前，使用 lerna monorepo 似乎还看不出来明显的优点，不过实际上在后面逐步完善 Electron 程序的过程中我们会发现它的强大之处。</p>',17);function y(_,x){const a=p("ExternalLinkIcon");return c(),l("div",null,[d,n("blockquote",null,[n("p",null,[s("参考: "),n("a",k,[s("https://github.com/rxliuli/electron_example/tree/b9628e1fd16bb5b6807e55e9ca72fdf2daf5bfde"),e(a)])])]),m,n("blockquote",null,[n("p",null,[s("参考: "),n("a",v,[s("https://github.com/rxliuli/electron_example/tree/8e0920af985e1201fc05ca36302e094532843c2d"),e(a)])])]),b,q,h,n("blockquote",null,[n("p",null,[s("参考: "),n("a",g,[s("https://github.com/rxliuli/electron_example/tree/a78885b76de9322dfdac82e2c220b7c6e0a9617f"),e(a)]),s(" 注：electron 版本选择双数，生命周期更长。")])]),f])}const w=o(u,[["render",y],["__file","23ec4673a06f41b59bfaf5a7da6d98db.html.vue"]]);export{w as default};
