import{_ as p,M as o,p as c,q as l,R as n,t as s,N as t,a1 as e}from"./framework-96b046e1.js";const i="/assets/8445c03f200d46229abaab35ef6c4ea7-8b497a7b.png",u="/assets/46116b80afd84b45a11b57ac67e1550e-b5d4528a.gif",r={},d=n("h2",{id:"场景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#场景","aria-hidden":"true"},"#"),s(" 场景")],-1),k=n("p",null,"有时候需要与其他程序进行交互时，自定义协议是一个不错的选择 -- 它能在程序为启动时启动程序然后处理其它程序的动作，而这是其它解决方案，包括 HTTP 请求、共享数据库不能比的。其实日常生活中也有现成的例子，迅雷的自定义协议下载链接、BitTorrent 协议、百度网盘启动本地客户端等等。",-1),v=n("h2",{id:"使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用","aria-hidden":"true"},"#"),s(" 使用")],-1),m={href:"https://www.electronjs.org/docs/api/app#appsetasdefaultprotocolclientprotocol-path-args",target:"_blank",rel:"noopener noreferrer"},b=e('<ol><li>让程序保持单例启动</li><li>设置客户端支持的协议（在 Windows 中会写入到注册表）</li><li>处理命令行参数找到其中需要的 <code>url</code> 信息</li><li>监听 <code>ready</code> 和 <code>second-instance</code> 事件</li></ol><h3 id="让程序保持单例启动" tabindex="-1"><a class="header-anchor" href="#让程序保持单例启动" aria-hidden="true">#</a> 让程序保持单例启动</h3>',2),h={href:"https://www.electronjs.org/docs/api/app#apprequestsingleinstancelock",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"second-instance",-1),f=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 请求单例锁，避免打开多个 electron 实例</span>
<span class="token keyword">const</span> gotTheLock <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">requestSingleInstanceLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>gotTheLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置客户端支持的协议-在-windows-中会写入到注册表" tabindex="-1"><a class="header-anchor" href="#设置客户端支持的协议-在-windows-中会写入到注册表" aria-hidden="true">#</a> 设置客户端支持的协议（在 Windows 中会写入到注册表）</h3>`,2),w={href:"https://www.electronjs.org/docs/api/app#appsetasdefaultprotocolclientprotocol-path-args",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;electron&#39;</span>
<span class="token keyword">import</span> path <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
 * 客户端默认支持的协议
 */</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DefaultProtocolClient</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token keyword">readonly</span> protocol<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 注册一个默认支持打开的协议
   */</span>
  <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开发模式下在 window 运行需要做兼容</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span> <span class="token operator">&amp;&amp;</span>
      process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">&#39;win32&#39;</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 设置 electron.exe 和 app 的路径</span>
      app<span class="token punctuation">.</span><span class="token function">setAsDefaultProtocolClient</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>protocol<span class="token punctuation">,</span> process<span class="token punctuation">.</span>execPath<span class="token punctuation">,</span> <span class="token punctuation">[</span>
        path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      app<span class="token punctuation">.</span><span class="token function">setAsDefaultProtocolClient</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>protocol<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 从命令行参数中找到 url
   * <span class="token keyword">@param</span> <span class="token parameter">argv</span>
   */</span>
  <span class="token function">findUrl</span><span class="token punctuation">(</span>argv<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> regExp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">^</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>protocol<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">://</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> argv<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> regExp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> defaultProtocolClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultProtocolClient</span><span class="token punctuation">(</span><span class="token string">&#39;custom-protocol&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">await</span> defaultProtocolClient<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理命令行参数找到其中需要的-url-信息" tabindex="-1"><a class="header-anchor" href="#处理命令行参数找到其中需要的-url-信息" aria-hidden="true">#</a> 处理命令行参数找到其中需要的 <code>url</code> 信息</h3><p>添加函数 <code>handleDefaultProtocol</code> 从命令行参数中找到 url 然后处理它。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 处理客户端支持的默认协议
 * <span class="token keyword">@param</span> <span class="token parameter">argv</span>
 */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleDefaultProtocol</span><span class="token punctuation">(</span>argv<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> defaultProtocolClient<span class="token punctuation">.</span><span class="token function">findUrl</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">await</span> dialog<span class="token punctuation">.</span><span class="token function">showMessageBox</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span>
    message<span class="token operator">:</span> <span class="token string">&#39;window protocol 自定义协议打开&#39;</span><span class="token punctuation">,</span>
    detail<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> 链接:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="监听-ready-和-second-instance-事件" tabindex="-1"><a class="header-anchor" href="#监听-ready-和-second-instance-事件" aria-hidden="true">#</a> 监听 <code>ready</code> 和 <code>second-instance</code> 事件</h3>`,5),_={href:"https://www.electronjs.org/docs/api/app#%E4%BA%8B%E4%BB%B6-second-instance",target:"_blank",rel:"noopener noreferrer"},x=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>app<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">&#39;second-instance&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> argv<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">handleDefaultProtocol</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">createMainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">handleDefaultProtocol</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="外部调用" tabindex="-1"><a class="header-anchor" href="#外部调用" aria-hidden="true">#</a> 外部调用</h2><p>既然我们自定义协议的目的是让外部程序调用，那么如何使用外部调用就很重要了。</p><p>首先检查注册表中是否已经包含它了，操作 <em>ctrl+s =&gt; 搜索注册表 =&gt; 进入注册表 =&gt; ctrl+f 查找 <code>custom-protocol</code></em></p><p><img src="`+i+'" alt="注册表"></p><h3 id="浏览器打开" tabindex="-1"><a class="header-anchor" href="#浏览器打开" aria-hidden="true">#</a> 浏览器打开</h3><p>如上图所示，可以简单在浏览器中输入 <a href="custom-protocol://test">custom-protocol://test</a> 来启动程序。</p><p><img src="'+u+'" alt="自定义协议效果"></p><h3 id="nodejs-示例" tabindex="-1"><a class="header-anchor" href="#nodejs-示例" aria-hidden="true">#</a> nodejs 示例</h3>',9),P={href:"https://www.npmjs.com/package/open",target:"_blank",rel:"noopener noreferrer"},j=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> open <span class="token keyword">from</span> <span class="token string">&#39;open&#39;</span>

<span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;custom-protocol://test&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),q={href:"https://github.com/sindresorhus/open/blob/master/index.js",target:"_blank",rel:"noopener noreferrer"};function B(D,E){const a=o("ExternalLinkIcon");return c(),l("div",null,[d,k,v,n("blockquote",null,[n("p",null,[s("参考: "),n("a",m,[s("将当前可执行文件设置为协议的默认处理程序（注册表级别）"),t(a)])])]),b,n("blockquote",null,[n("p",null,[s("参考: "),n("a",h,[s("app.requestSingleInstanceLock()"),t(a)]),s(" 注: 仅在单例模式下才能监听 "),g,s(" 事件")])]),f,n("blockquote",null,[n("p",null,[s("参考: "),n("a",w,[s("app.setAsDefaultProtocolClient(protocol[, path, args])"),t(a)])])]),y,n("blockquote",null,[n("p",null,[s("参考: "),n("a",_,[s("事件: 'second-instance'"),t(a)])])]),x,n("p",null,[s("在 nodejs 中使用 npm 包 "),n("a",P,[s("open"),t(a)]),s(" 可以轻易打开自定义默认链接。")]),j,n("p",null,[s("其实本质上就是拼接命令，然后执行系统命令打开 url，参考"),n("a",q,[s("它的实现"),t(a)]),s("。")])])}const L=p(r,[["render",B],["__file","0a4259c97ca440d1b5375f4e21eaaace.html.vue"]]);export{L as default};
